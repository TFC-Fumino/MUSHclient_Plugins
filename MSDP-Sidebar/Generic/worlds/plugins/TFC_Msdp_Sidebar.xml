<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="TFC_MSDP_GUI_SIDEBAR"
   author="Fumino"
   id="9232cf74f97637b76afe76c7"
   language="Lua"
   purpose="A graphical user interface sidebar for The Final Challenge MUD"
   date_written="2016-05-08 00:49:31"
   requires="4.51"
   version="1.9"
   save_state="y"
   >
<description trim="y">
</description>
</plugin>
------------/  TRIGGERS  /------------
<triggers>
 ----/ Exits workaround trigger /----
 <trigger
  enabled="y"
  keep_evaluating="y"
  match="^\[Exits\: (.*)\]$"
  send_to="12"
  regexp="y"
  name="room_exits"
  sequence="100">
 <send>curRoom_exits = {}
 for w in string.gmatch ("%1", "[^%s]+") do
  table.insert (curRoom_exits, w)
 end -- for w
 draw_minimap ()</send>
 </trigger>
 ----/ Equipment stat triggers /---- 
 <trigger
  enabled="y"
  match="* You last logged in on *"
  send_to="12"
  sequence="100">
 <send>DoAfterSpecial (1, 'ColourNote ("goldenrod", "", "Check your equipment to see it totaled up")', sendto.script)</send>
 </trigger>
 <trigger
  enabled="y"
  keep_evaluating="y"
  match="You are using:"
  name="clearoldstats"
  script="start_of_equip_list"
  sequence="100">
 </trigger>
 <trigger
  enabled="n"
  expand_variables="y"
  keep_evaluating="y"
  match="(int:|wis:|dex:|str:|chr:|con:|luc:|dmg:|hr:|da:|ma:|svs:|hp:|mr:)(\D*\d+)"
  name="additup"
  regexp="y"
  repeat="y"
  script="attrib_trigger_script"
  send_to="12"
  sequence="100">
 </trigger>
 <trigger
  enabled="y"
  keep_evaluating="y"
  match="^$"
  name="stopadding"
  regexp="y"
  send_to="12"
  sequence="100">
 <send>if GetVariable("eqstatcheck") == "true" then
   SetVariable("eqstatcheck", "false")
   EnableTrigger ("additup", false)
   show_equip_list ()
   start_of_equip_list ()
  end -- eqstatcheck</send>
 </trigger>
 ----/ Chat Channel Triggers /----
 ----/ Temp fix until I have time to redo again (prompt bar may occasional show in window) /----
 <trigger
  enabled="y"
  group="macktest"
  match="^\#\#\# (.+)$"
  script="chats"
  regexp="y"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="You say*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You say*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* says*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="* * says*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="You gossip*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You gossip*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* gossips*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * gossips*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="You shout*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You shout*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* shouts*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * shouts*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="You yell*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You yell*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* yells*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * yells*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="You pray, *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You pray, *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* prays *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * prays *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="You auction*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You auction*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* auctions*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * auctions*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="You tell *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You tell *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* tells *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * tells *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="You ftell, *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You ftell, *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="* ftells, *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * ftells *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="You cant*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You cant*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="* cants*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * cants*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="You question*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="* You question*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>		
 <trigger
  enabled="y"
  match="* questions*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>		
 <trigger
  enabled="y"
  match="* * questions*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="You answer*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>		
 <trigger
  enabled="y"
  match="* You answer*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>		
 <trigger
  enabled="y"
  match="* answers*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>		
 <trigger
  enabled="y"
  match="* * answers*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 ----/ Star Logger /----
 <trigger
  enabled="n"
  keep_evaluating="y"
  match="*"
  name="starlogger"
  script="dc_log"
  sequence="100">
 </trigger>
</triggers>
------------/  ALIASES  /------------
<aliases>
 ----/ Equipment Stat aliases /----
 <alias
  match="eq"
  enabled="y"
  script="check_equipment"
  sequence="100">
 </alias>
 <alias
  match="equip"
  enabled="y"
  script="check_equipment"
  sequence="100">
 </alias>
 <alias
  match="equipment"
  enabled="y"
  script="check_equipment"
  sequence="100">
 </alias>
 <alias
  script="show_equip_list"
  match="show stats"
  enabled="y"
  sequence="100">
 </alias>
 ----/ Map Patch aliases /----
 <alias
  script="show_map_list"
  match="map list"
  enabled="y"
  sequence="100">
 </alias>
 <alias
  script="close_map_list"
  match="close map list"
  enabled="y"
  sequence="100">
 </alias>
 ----/ Plugin updater /----
 <alias
  script="update_plugin"
  match="update plugin"
  enabled="y"
  sequence="100">
 </alias>
 ----/ Star Logger /----
 <alias
  script="alias_star_logger_rec"
  match="star logger rec"
  enabled="y"
  sequence="100">
 </alias>
 <alias
  script="alias_star_logger_set_folder"
  match="star logger set folder"
  enabled="y"
  sequence="100">
 </alias>
 <alias
  script="alias_star_logger_set_filename"
  match="star logger set filename"
  enabled="y"
  sequence="100">
 </alias>
 <alias
  script="alias_star_logger_open_folder"
  match="star logger open folder"
  enabled="y"
  sequence="100">
 </alias>
 <alias
  script="alias_star_logger_prev_lines"
  match="star logger prev lines"
  enabled="y"
  sequence="100">
 </alias>
 ----/ Orbiter testing aliases /----
 <alias
  script="test_orbit"
  match="orbit test"
  enabled="y"
  sequence="100">
 </alias>
 
 <alias
  script="orbit"
  match="orbit move"
  enabled="y"
  sequence="100">
 </alias>
 
 <alias
  match="orbit show"
  enabled="y"
  send_to="12"
  sequence="100">
  <send>o_x = -6.9631677359134
   o_y = 55.812115698766
   o_xx = 120.99743253856
   o_yy = 56.577722593267
   draw_sun(o_x, o_y)
   draw_moon(o_xx, o_yy)</send>
  </alias>
 
 <alias
  match="orbit hide"
  enabled="y"
  send_to="12"
  sequence="100">
  <send>WindowShow (win5,  false)
   WindowShow (win8,  false)</send>
  </alias>
  
</aliases>

<!--  Get our standard constants -->
<include name="constants.lua"/>
<!--  Script  -->
<script>
<![CDATA[
--------/////*\\\\\--------[ GLOBAL VARIABLES ]--------/////*\\\\\--------

----/ default first time window visibility, must be opposite for toggles /----
CHAT_HIDDEN = false
CHAT_VISIBILITY = false
PROMPT_BARS_VISIBILITY = false

------------/ Sidebar & Adjustable Window Positions  /------------
AVATAR_LEFT_POSITION = 25
SIDEBAR_LEFT_POSITION = 160
TITLEBAR_LEFT_POSITION = 0
MINIMAP_LEFT_POSITION = 0
SPELLS_LEFT_POSITION = 14
SPELLSCOOLDOWN_LEFT_POSITION = 3
CHATS_LEFT_POSITION = 176
CHATS_TOP_POSITION = 0
HEALTH_BAR_LEFT_POSITION = 383
MANA_BAR_LEFT_POSITION = 497
MOVE_BAR_LEFT_POSITION = 695
ENEM_BAR_LEFT_POSITION = 180

------------/  Communications Window  /------------
BODY_FONT_NAME = "Franklin Gothic"
BODY_FONT_SIZE = 9
SCROLL_BAR_WIDTH = 15
MAX_LINES = 10000 -- how many lines to store in scrollback
sidebar_button_window = "sidebar_button_window"  -- miniwindow ID
TIMESTAMP_TEXT_COLOUR = "white"
TIMESTAMP_BACK_COLOUR = "black"
timestamp = not (GetVariable("timestamp") == "false")
echo = not (GetVariable("echo") == "false")
date_format = GetVariable("date_format")
-- Width & Height of Chat Window --
WINDOW_WIDTH = GetInfo (250) - 200
WINDOW_HEIGHT = 93
sepOne_top = 76
TEXT_INSET = 5
lines = {}  -- table of recent chat lines
rawlines = {}
lineStart = ""
lineEnd = ""
WINDOW_COLUMNS = ""
WINDOW_LINES = ""
Win = GetPluginID()
font_height = ""
line_height = ""
windowinfo = ""
-- Scrollbar stuff
startx = ""
starty = ""
barPos = ""
barSize = ""
totalSteps = ""
keepscrolling = false

------------/  Colors  /------------
colourTFC = ColourNameToRGB("#B9C9D8")
colourGold = ColourNameToRGB("gold")
colourSilver = ColourNameToRGB("silver")
colourBlack = ColourNameToRGB("black")
colourWhite = ColourNameToRGB("white")

------------/  Window IDs  /------------
background_window = "world_background_image"
titlebar_window = "titlebar_image"
avatar_window = "avatar_window"
bars_window = "bars_image"
minimap_window = "minimap_image"
health_window = "health_bar"
mana_window = "mana_bar"
movement_window = "movement_bar"
exp_window = "exp_bar"
line_sepOne = "line_sepOne"
line_sepTwo = "line_sepTwo"

------------/  MSDP stuff  /------------
msdp = {}
MSDP = 69
using_msdp = false

------------/  Menu setting default colors /------------
bgColour = tonumber(GetVariable ("bgColour")) or ColourNameToRGB("black")
health_color = tonumber(GetVariable("health_color")) or 0x0000CC
health_colorB = tonumber(GetVariable("health_colorB")) or 0x000033
mana_color = tonumber(GetVariable("mana_color")) or 0xCC0000
mana_colorB = tonumber(GetVariable("mana_colorB")) or 0x330000
move_color = tonumber(GetVariable("move_color")) or 0x00CC00
move_colorB = tonumber(GetVariable("move_colorB")) or 0x003300
enemy_color = tonumber(GetVariable("enemy_color")) or 0x00CCCC
enemy_colorB = tonumber(GetVariable("enemy_colorB")) or 0x003333
bar_text_color = tonumber(GetVariable("bar_text_color")) or ColourNameToRGB("white")
customBar_top_color = tonumber(GetVariable ("custom_bar_color_highlight_top")) or ColourNameToRGB("black")
customBar_bottom_color = tonumber(GetVariable ("custom_bar_color_highlight_bottom")) or ColourNameToRGB("black")
terrain_color = GetVariable("terrain_color") or ColourNameToRGB("white")
cColorLight = GetVariable("cColorLight") or ColourNameToRGB("white")
cColorDark = GetVariable("cColorDark") or ColourNameToRGB("dimgray")
cColorLighto = GetVariable("cColorLighto") or ColourNameToRGB("lime")
cColorDarko = GetVariable("cColorDarko") or ColourNameToRGB("green")
cColorLightc = GetVariable("cColorLightc") or ColourNameToRGB("red")
cColorDarkc = GetVariable("cColorDarkc") or ColourNameToRGB("darkred")

------------/  Msdp room exits  /------------
RoomExit = {}
RoomType = {}
ExitCount = 0

------------/  Msdp spell icons  /------------
AffectName = {}
AffectDuration = {}
AffectMax = 0

------------/  Sun and Moon Orbiter  /------------
o_x = 0.0022328955057276
o_y = 56.495475370442
o_xx = 111.99277099826
o_yy = 54.092225831802
centreX = 58
centreY = 58
centreXX = 56
centreYY = 56
radius = 65
angularVelocity = 0.083
angle = 22
angles = 31.4

------------/  Equipment stat calculator  /------------
stats = {
 str = '0',
 hr = '0',
 int = '0',
 dmg = '0',
 wis = '0',
 chr = '0',
 dex = '0',
 luc = '0',
 con = '0',
 svs = '0',
 da = '0',
 mr = '0',
 hp = '0',
 ma = '0'
}

------------/  Requires  /------------
require "copytable"
require "getstyle"
require "wait"

theme = {
    WINDOW_BORDER = ColourNameToRGB("#000000"), -- for miniwindow body
    HIGHLIGHT=ColourNameToRGB("#B9C9D8"), -- for 3D surfaces
    FACE=0x000000, -- for 3D surfaces
    INNERSHADOW=ColourNameToRGB("#000000"), -- for 3D surfaces
    OUTERSHADOW = ColourNameToRGB("#404040"), -- for 3D surfaces
    BACK_FACE = 0x000000, -- for contrasting details
    DETAIL = ColourNameToRGB ("#FFFFFF"), -- for contrasting details
    TITLE_HEIGHT = 17, -- for miniwindow title area
    SUBTITLE_HEIGHT = 17, -- for miniwindow title area
    TITLE_FONT_NAME = "Dina", -- for miniwindow title area
    TITLE_FONT_SIZE = 8 -- for miniwindow title area
}  -- end theme table

----/ Custom Themed RectOp functions /----
function DrawThemed3DRect(Window, left, top, right, bottom)
 WindowRectOp(Window, miniwin.rect_fill, left, top, right, bottom, theme.FACE)
 WindowLine(Window, left, top, right, top, theme.HIGHLIGHT, 
    miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
 WindowLine(Window, left, top, left, bottom, theme.HIGHLIGHT, 
    miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
 WindowLine(Window, left, bottom-2, right, bottom-2, theme.INNERSHADOW, 
    miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
 WindowLine(Window, right-2, top, right-2, bottom-2, theme.INNERSHADOW, 
    miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
 WindowLine(Window, left, bottom-1, right, bottom-1, theme.OUTERSHADOW, 
    miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
 WindowLine(Window, right-1, top, right-1, bottom-1, theme.OUTERSHADOW, 
    miniwin.pen_solid + miniwin.pen_endcap_flat, 1)    
end -- function Drawthemed3DRectOp

----/ Currently unused function /----
function DrawThemedResizeTag(Window, x1, y1, size)
 local x2, y2 = x1+size, y1+size
 DrawThemed3DRect(Window, x1, y1, x2, y2)
 local m = 2
 local n = 2
 while (x1+m+2 <= x2-3 and y1+n+1 <= y2-4) do
    WindowLine(Window, x1+m+1, y2-4, x2-3, y1+n, theme.HIGHLIGHT, 
        miniwin.pen_solid, 1)
    WindowLine(Window, x1+m+2, y2-4, x2-3, y1+n+1, theme.INNERSHADOW, 
        miniwin.pen_solid, 1)
    m = m+3
    n = n+3
 end -- while loop
end  -- function DrawThemedResizeTag

function OnPluginInstall_repeat()
 PLUGIN_VERSION = GetPluginInfo(GetPluginID(), 19)
 PLUGIN_NAME = GetPluginInfo(GetPluginID(), 1)
 -- Dummy window to get font characteristics
 check (WindowCreate (Win, 0, 0, 1, 1, 12, 2, 0x000000) )
 WindowRectOp (Win, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
 check (WindowFont(Win, "bodyfont"..Win, BODY_FONT_NAME, BODY_FONT_SIZE, true))
 check (WindowFont(Win, "titlefont"..Win, theme.TITLE_FONT_NAME, theme.TITLE_FONT_SIZE))
 font_height = WindowFontInfo (Win, "bodyfont"..Win, 1) -  WindowFontInfo (Win, "bodyfont"..Win, 4) + 1
 line_height = font_height+1
 font_width = WindowTextWidth (Win, "bodyfont"..Win, "W")
 -- check for Echo/Timestamp/date_format/window size (in pixels) variables, if not there, set them
 if date_format == nil then
  date_format = "[%X] "
 end -- if
 if WINDOW_WIDTH == nil then
  WINDOW_WIDTH = (font_width*80)+SCROLL_BAR_WIDTH -- 80 columns
 end -- if
 if WINDOW_HEIGHT == nil then
  WINDOW_HEIGHT = (line_height*6)+2 -- 6 lines
 end -- if
 init(true)
 OnPluginEnable ()  -- do initialization stuff
 create_layout () 
end -- function OnPluginInstall_repeat
  
function OnPluginInstall()
 PLUGIN_VERSION = GetPluginInfo(GetPluginID(), 19)
 PLUGIN_NAME = GetPluginInfo(GetPluginID(), 1)
 -- Dummy window to get font characteristics
 check (WindowCreate (Win, 0, 0, 1, 1, 12, 2, 0x000000) )
 WindowRectOp (Win, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
 check (WindowFont(Win, "bodyfont"..Win, BODY_FONT_NAME, BODY_FONT_SIZE, true))
 check (WindowFont(Win, "titlefont"..Win, theme.TITLE_FONT_NAME, theme.TITLE_FONT_SIZE))
 font_height = WindowFontInfo (Win, "bodyfont"..Win, 1) -  WindowFontInfo (Win, "bodyfont"..Win, 4) + 1
 line_height = font_height+1
 font_width = WindowTextWidth (Win, "bodyfont"..Win, "W")
 -- check for Echo/Timestamp/date_format/window size (in pixels) variables, if not there, set them
 if date_format == nil then
  date_format = "[%X] "
 end -- if
 if WINDOW_WIDTH == nil then
  WINDOW_WIDTH = (font_width*80)+SCROLL_BAR_WIDTH -- 80 columns
 end -- if
 if WINDOW_HEIGHT == nil then
  WINDOW_HEIGHT = (line_height*6)+2 -- 6 lines
 end -- if
 init(true)
 OnPluginEnable ()  -- do initialization stuff
 DoAfterSpecial (0.1, 'create_layout()', sendto.script)  
 ColourNote ("", "", "")
end -- function OnPluginInstall

function init(firstTime)
 -- how many lines and columns will fit?
 WINDOW_LINES = math.ceil((WINDOW_HEIGHT-17)/line_height)
 WINDOW_COLUMNS = math.ceil((WINDOW_WIDTH-SCROLL_BAR_WIDTH)/font_width)
 if firstTime then
  WindowCreate(Win, CHATS_LEFT_POSITION, CHATS_TOP_POSITION, WINDOW_WIDTH, WINDOW_HEIGHT, 4, 6, 0x000000)
  -- catch for right-click menu and line selection
  WindowAddHotspot(Win, "textarea", 0, 0, WINDOW_WIDTH-SCROLL_BAR_WIDTH,0, 
    "", "", "MouseDown", "CancelMouseDown", "MouseUp", "", 
    miniwin.cursor_ibeam, 0)
  -- scroll bar up/down buttons
  WindowAddHotspot(Win, "up", WINDOW_WIDTH-SCROLL_BAR_WIDTH, 0, 0, SCROLL_BAR_WIDTH, 
    "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 
    miniwin.cursor_hand, 0)
  WindowAddHotspot(Win, "down", WINDOW_WIDTH-SCROLL_BAR_WIDTH, WINDOW_HEIGHT-(2*SCROLL_BAR_WIDTH), 0, WINDOW_HEIGHT-SCROLL_BAR_WIDTH, 
    "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 
    miniwin.cursor_hand, 0)
 else
  WindowMoveHotspot(Win, "textarea", 0, 0, WINDOW_WIDTH-SCROLL_BAR_WIDTH, 0)
  WindowMoveHotspot(Win, "up", WINDOW_WIDTH-SCROLL_BAR_WIDTH, 0, 0, SCROLL_BAR_WIDTH)
  WindowMoveHotspot(Win, "down", WINDOW_WIDTH-SCROLL_BAR_WIDTH, WINDOW_HEIGHT-(2*SCROLL_BAR_WIDTH), 0, WINDOW_HEIGHT-SCROLL_BAR_WIDTH)
 end -- firstTime
 WindowShow(Win, true)  
 if (firstTime == true) then
  lines = {}
  for _,styles in ipairs(rawlines) do 
   fillBuffer(styles)
  end  -- for each line
 end -- if
 lineStart = math.max(1, #lines-WINDOW_LINES+2)
 lineEnd = math.max(1, #lines)
 refresh()
end  -- function init

function OnPluginClose ()
 -- if enabled
 if GetPluginInfo (GetPluginID(), 17) then
  OnPluginDisable()
 end -- if enabled
end -- function OnPluginClose

function OnPluginEnable ()
 WindowShow (Win, true)
end -- function OnPluginEnable

function OnPluginSaveState ()
 -- save echo/timestamp status
 SetVariable ("echo", tostring (echo))
 SetVariable ("timestamp", tostring (timestamp))
 SetVariable("date_format", date_format)
 SetVariable("WINDOW_WIDTH", WINDOW_WIDTH)
 SetVariable("WINDOW_HEIGHT", WINDOW_HEIGHT)
 if castle_checked ~= nil then
  SetVariable("castle_checked", tostring (castle_checked))
  elseif filename ~= nil then
  SetVariable("filename", tostring (filename))
 end -- background
end -- function OnPluginSaveState

function OnPluginDisable ()
end -- function OnPluginDisable

function Display_Line (line, styles)
 local left    = TEXT_INSET
 local top     = (line * line_height) + 1
 local bottom  = top + line_height
 local font    = "bodyfont" .. Win
 if backfill then
  WindowRectOp (Win, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
 end -- backfill  
 if (styles) then
  for _, style in ipairs (styles) do
   local width = WindowTextWidth (Win, font, style.text) -- get width of text
   local right = left + width
   WindowRectOp (Win, miniwin.rect_fill, left, top, right, bottom, style.backcolour)  -- draw background
   WindowText (Win, font, style.text, left, top, 0, 0, style.textcolour)  -- draw text
   left = left + width  -- advance horizontally
  end -- for each style run        
 end -- if  styles
end -- Display_Line

function writeLines()
 for count = lineStart, lineEnd do
  Display_Line( count-lineStart, lines[count][1], false )
 end  -- for each line
 Redraw()
end  -- function writeLines

function refresh()
 WindowRectOp (Win, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
 drawStuff()
end  -- function refresh

function drawStuff()
 if #lines >= 1 then
  writeLines()
 end -- if        
 -- Scrollbar base
 WindowRectOp(Win, miniwin.rect_fill, WINDOW_WIDTH-SCROLL_BAR_WIDTH, 0, WINDOW_WIDTH, WINDOW_HEIGHT, theme.BACK_FACE) -- scroll bar background
 WindowRectOp(Win, miniwin.rect_frame, WINDOW_WIDTH-SCROLL_BAR_WIDTH+1, SCROLL_BAR_WIDTH-1, WINDOW_WIDTH+1, WINDOW_HEIGHT-(2*SCROLL_BAR_WIDTH)-1, theme.DETAIL) -- scroll bar background inset rectangle
 DrawThemed3DRect(Win, WINDOW_WIDTH-SCROLL_BAR_WIDTH, 0, WINDOW_WIDTH+2, SCROLL_BAR_WIDTH) -- top scroll button
 DrawThemed3DRect(Win, WINDOW_WIDTH-SCROLL_BAR_WIDTH, WINDOW_HEIGHT-(SCROLL_BAR_WIDTH*2), WINDOW_WIDTH+2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH) -- bottom scroll button
 -- draw triangle in up button
 points = string.format ("%i,%i,%i,%i,%i,%i", (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+3, 8,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, 4,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+11, 8)
 WindowPolygon (Win, points,
    theme.DETAIL, miniwin.pen_solid, 1,   -- pen (solid, width 1)
    theme.DETAIL, miniwin.brush_solid, --brush (solid)
    true, --close
    false)  --alt fill
 -- draw triangle in down button    
 points = string.format ("%i,%i,%i,%i,%i,%i", (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+3, (WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-10,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, (WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-6, (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+11,(WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-10)
 WindowPolygon (Win, points,
    theme.DETAIL, miniwin.pen_solid, 1,   -- pen (solid, width 1)
    theme.DETAIL, miniwin.brush_solid, --brush (solid)
    true, --close
    false) --alt fill  
 -- The scrollbar position indicator
 totalSteps = #lines
 if (totalSteps <= WINDOW_LINES-1) then totalSteps = 1 end
 SCROLL_BAR_HEIGHT = (WINDOW_HEIGHT-(3*SCROLL_BAR_WIDTH))
 if (not dragscrolling) then
  stepNum = lineStart-1
  barPos = SCROLL_BAR_WIDTH + ((SCROLL_BAR_HEIGHT/totalSteps) * stepNum)
  barSize = (SCROLL_BAR_HEIGHT/math.max(WINDOW_LINES-1,totalSteps)) * (WINDOW_LINES-1)
  if barSize < 10 then
   barSize = 10
  end -- barSize
  if barPos+barSize > SCROLL_BAR_WIDTH+SCROLL_BAR_HEIGHT then
   barPos = SCROLL_BAR_WIDTH+SCROLL_BAR_HEIGHT - barSize
  end -- barPos+barSize
  WindowAddHotspot(Win, "scroller", (WINDOW_WIDTH-SCROLL_BAR_WIDTH), barPos, WINDOW_WIDTH, barPos+barSize, 
    "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 
    miniwin.cursor_hand, 0)
  WindowDragHandler(Win, "scroller", "ScrollerMoveCallback", "ScrollerReleaseCallback", 0)
 end  -- if
 DrawThemed3DRect(Win, WINDOW_WIDTH-SCROLL_BAR_WIDTH, barPos, WINDOW_WIDTH+2, barPos+barSize)
 Redraw()
end  -- function drawStuff

function ScrollerMoveCallback(flags, hotspot_id)
 mouseposy = WindowInfo(Win, 18)
 windowtop = WindowInfo(Win, 2)
 barPos = math.max(mouseposy-windowtop+clickdelta, SCROLL_BAR_WIDTH)
 if barPos > WINDOW_HEIGHT-(SCROLL_BAR_WIDTH*2)-barSize then
  barPos = WINDOW_HEIGHT-(SCROLL_BAR_WIDTH*2)-barSize
  lineStart = math.max(1,#lines-WINDOW_LINES+2)
  lineEnd = #lines
 else
  lineStart = math.floor((barPos-SCROLL_BAR_WIDTH)/(SCROLL_BAR_HEIGHT/totalSteps)+1)
  lineEnd = math.min(lineStart + WINDOW_LINES-2, #lines)
 end -- if
 refresh()
end  -- function ScrollerMoveCallback

function ScrollerReleaseCallback(flags, hotspot_id)
 dragscrolling = false
 refresh()
end  -- function ScrollerReleaseCallback

function fillBuffer(rawstyles)
 local avail = 0
 local line_styles
 local beginning = true
 -- keep pulling out styles and trying to fit them on the current line
 local styles = copytable.deep (rawstyles)
 local remove = table.remove
 local insert = table.insert
 while #styles > 0 do
  if avail <= 0 then -- no room available? start new line
   -- remove first line if filled up
   if #lines >= MAX_LINES then
    remove (lines, 1)
   end -- if 
   avail = WINDOW_WIDTH - (TEXT_INSET * 2) - 9
   line_styles = {}
   add_line( line_styles, beginning )
   beginning = false
  end -- line full
  -- get next style, work out how long it is
  local style = remove (styles, 1)
  local width = WindowTextWidth (Win, "bodyfont"..Win, style.text)
  -- if it fits, copy whole style in
  if width <= avail then
   insert (line_styles, style)
   avail = avail - width
  else -- otherwise, have to split style   
   -- look for trailing space (work backwards). remember where space is
   local col = style.length - 1
   local split_col
   -- keep going until out of columns
   while col > 1 do
    width = WindowTextWidth (Win, "bodyfont"..Win, style.text:sub (1, col)) 
    if width <= avail then
     if not split_col then
      split_col = col  -- in case no space found, this is where we can split
     end -- if
     -- see if space here
     if style.text:sub (col, col) == " " then
      split_col = col
      break
     end -- if space
    end -- if will now fit
    col = col - 1
   end -- while
   -- if we found a place to split, use old style, and make it shorter. Also make a copy and put the rest in that
   if split_col then
    insert (line_styles, style)
    local style_copy = copytable.shallow (style)
    style.text = style.text:sub (1, split_col)
    style.length = split_col 
    style_copy.text = style_copy.text:sub (split_col + 1)
    style_copy.length = #style_copy.text
    insert (styles, 1, style_copy)
   elseif next (line_styles) == nil then
    insert (line_styles, style)
   else
    insert (styles, 1, style)
   end -- if    
    avail = 0  -- now we need to wrap     
  end -- if could not fit whole thing in
 end -- while we still have styles over
end  -- function fillBuffer

function chats (name, line, wildcards, styles)
 -- echo in this world as well if the user wants
 if echo then
  for _, v in ipairs (styles) do
    ColourTell (RGBColourToName (v.textcolour),RGBColourToName (v.backcolour),v.text)
  end -- for each style run
  Note ("")  -- wrap up line
 end -- echo wanted
 -- inject timestamp if wanted
 if timestamp then
  local tstamp = os.date (date_format)
  table.insert (styles, 1, {
  text = tstamp,
  textcolour  = ColourNameToRGB (TIMESTAMP_TEXT_COLOUR),
  backcolour = ColourNameToRGB (TIMESTAMP_BACK_COLOUR),
  length = string.len (tstamp),
  style = 0,
  } )
 end -- if    
 -- store the raw lines for use during resizing
 if #rawlines >= MAX_LINES then
  table.remove(rawlines, 1)
 end
 table.insert(rawlines, styles)
 fillBuffer(styles)
 refresh( )
end -- function chats 

function add_line ( line, is_beginning_of_message )
 -- add new line
 table.insert (lines, {line, false} )
 lines[#lines][2] = is_beginning_of_message
 -- advance the count
 if #lines >= WINDOW_LINES then
  lineStart = lineStart + 1
 end -- if
 if #lines > 1 then
  lineEnd = lineEnd + 1
 end -- if
end -- function add_line

function scrollbar(calledBy)
 wait.make (function()
  while keepscrolling == true do
   if calledBy == "up" then
    if (lineStart > 1) then
     lineStart = lineStart - 1
     lineEnd = lineEnd - 1
     WindowRectOp(Win, miniwin.rect_draw_edge, (WINDOW_WIDTH-SCROLL_BAR_WIDTH), 0, 0, SCROLL_BAR_WIDTH, 
         miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all) -- up arrow pushed
     points = string.format ("%i,%i,%i,%i,%i,%i", (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+3, 9,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, 5,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+11, 9)
     WindowPolygon (Win, points,
         theme.DETAIL, miniwin.pen_solid, 1, -- pen (solid, width 1)
         theme.DETAIL, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
    else
     keepscrolling = false
    end
   elseif calledBy == "down" then
    if (lineEnd < #lines) then
     lineStart = lineStart + 1
     lineEnd = lineEnd + 1
     WindowRectOp(Win, miniwin.rect_draw_edge, (WINDOW_WIDTH-SCROLL_BAR_WIDTH), WINDOW_HEIGHT-(SCROLL_BAR_WIDTH*2), 0, WINDOW_HEIGHT-SCROLL_BAR_WIDTH-1, 
         miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all) -- down arrow pushed
     points = string.format ("%i,%i,%i,%i,%i,%i", (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+3, (WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-11,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, (WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-7, (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+11,(WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-11) -- draw triangle in up button
     WindowPolygon (Win, points,
         theme.DETAIL, miniwin.pen_solid, 1, -- pen (solid, width 1)
         theme.DETAIL, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
    else
     keepscrolling = false
    end
   end -- if
   wait.time(0.1)
   refresh()
  end -- while keepscrolling
 end)  -- wait.make
end  -- function scrollbar

function GetLineText (styles)
 local t = {}
 for _, style in ipairs (styles) do
  table.insert (t, style.text)
 end -- for
 return table.concat (t)
end -- function GetLineText

function GetAllBufferedMessages()
 local t = {}
 for _,styles in ipairs(rawlines) do
  table.insert (t, GetLineText (styles))
 end -- for
 SetClipboard(table.concat(t,"\r\n"))
end -- function GetAllBufferedMessages

function GetBufferedMessage(xpos, ypos)
 windowline = math.floor((ypos/line_height)+1)-1
 text = ""
 if (#lines > windowline) then
  local line = windowline+lineStart
  -- go to beginning of message
  while lines[line][2] ~= true and line > 1 do
   line = line - 1
  end -- while
  -- first line
  local styles = copytable.deep(lines[line][1])
  if (line-lineStart+1 > 0) then
   Display_Line (line-lineStart, styles, true)
  end -- if
  text = GetLineText (styles)
  -- remaining lines
  line = line + 1
  while line <= #lines and lines[line][2] ~= true do
   local styles = copytable.deep(lines[line][1])
   if (line-lineStart+1 > 0 and line-lineStart < WINDOW_LINES) then
    Display_Line (line-lineStart, styles, true)
   end
   text = text.. GetLineText (styles)
   line = line + 1
  end -- while
  SetClipboard(text)
 end -- if
 Redraw()   
end  -- function GetBufferedMessage

function MouseOver(flags, hotspot_id)
 keepscrolling = false
end  -- function MouseOver

function CancelMouseOver(flags, hotspot_id)
 keepscrolling = false
end  -- function CancelMouseOver

function MouseDown(flags, hotspot_id)
 if (hotspot_id == "resizer") then
  startx, starty = WindowInfo (Win, 17), WindowInfo (Win, 18)
 elseif (hotspot_id == "scroller") then
  clickdelta = WindowHotspotInfo(Win, "scroller", 2)-WindowInfo (Win, 15)
  dragscrolling = true
 elseif (hotspot_id == "textarea" and flags == miniwin.hotspot_got_lh_mouse) then
  GetBufferedMessage(WindowInfo(Win, 14), WindowInfo(Win,15))
 else
  keepscrolling = true
  scrollbar(hotspot_id)
 end -- if
end  -- function MouseDown

function CancelMouseDown(flags, hotspot_id)
 keepscrolling = false
 refresh()
end  -- function CancelMouseDown

function MouseUp(flags, hotspot_id)
 if (hotspot_id == "textarea" and flags == miniwin.hotspot_got_rh_mouse) then
  -- build menu for current state
  right_click_menu()
 else
  refresh()
 end -- if
 keepscrolling = false
end  -- function MouseUp

function chat_echo (name, line, wildcards)
 if wildcards [1] == false then
  echo = not echo  -- toggle
  SetVariable("wechoon", "false")
 else
  echo = wildcards [1]:lower () == " on"
  SetVariable("wechoon", "true")
 end -- if
 if echo then
  ColourNote ("yellow", "", "Echoing chats in main window ENABLED.")
 else
  ColourNote ("yellow", "", "Echoing chats in main window DISABLED.")
 end -- if
end -- function chat_echo

function right_click_menu ()
 menustring ="Copy All To Clipboard|Change Font|Turn Echo "
 if echo then
  menustring = menustring .. "Off"
 else
  menustring = menustring .. "On"
 end -- if
 menustring = menustring.."|>Timestamp|No Timestamps|30 Aug 13:29:49|30 Aug 01:20:12PM|13:29:08|1:22:06 PM"
 result = WindowMenu (Win, 
            WindowInfo (Win, 14),  -- x position
            WindowInfo (Win, 15),   -- y position
            menustring) -- content
 if result == "Copy All To Clipboard" then
  GetAllBufferedMessages()
  ColourNote ("yellow", "", "All buffered messages copied to clipboard.")
 elseif result == "Change Font" then
  wanted_font = utils.fontpicker (BODY_FONT_NAME, BODY_FONT_SIZE) --font dialog
  if wanted_font then
   BODY_FONT_NAME = wanted_font.name
   BODY_FONT_SIZE = wanted_font.size
   SetVariable ("bodyfont", BODY_FONT_NAME)
   SetVariable ("font_size", BODY_FONT_SIZE)
   OnPluginInstall()
  end
 elseif result == "Turn Echo Off" then
  echo = false
  ColourNote ("yellow", "", "Echoing chats in main window DISABLED.")
 elseif result == "Turn Echo On" then
  echo = true
  ColourNote ("yellow", "", "Echoing chats in main window ENABLED.")
 elseif result == "No Timestamps" then
  timestamp = false
  ColourNote ("yellow", "", "Timestamps in communication window DISABLED.")
 elseif result == "30 Aug 13:29:49" then
  timestamp = true
  date_format = "[%d %b %H:%M:%S] "
  ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '30 Aug 13:29:49'.")
 elseif result == "30 Aug 01:20:12PM" then
  timestamp = true
  date_format = "[%d %b %I:%M:%S%p] "
  ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '30 Aug 01:20:12PM'.")
 elseif result == "13:29:08" then
  timestamp = true
  date_format = "[%H:%M:%S] "
  ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '13:29:08'.")
 elseif result == "1:22:06 PM" then
  timestamp = true
  date_format = "[%I:%M:%S%p] "
  ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '1:22:06 PM'.")
 elseif result == "Hide Window" then
  WindowShow( Win, false )
  ColourNote ("yellow", "", "Chats window now hidden. Type 'chats show' to see it again.")        
 end -- if
end -- function right_click_menu

function show_map_list ()
 WindowShow (avatar_window, false)
end -- show_map_list

function close_map_list ()
 WindowShow (avatar_window, true)
end -- show_map_list

function check_equipment ()
 EnableTrigger("additup", true)
 Send "eq"
 SetVariable("eqstatcheck", "true")
end -- check_equipment

function attrib_trigger_script (name, line, wildcards)
 -- function to handle individual matches
 local function one_attrib (m, t)
  local name = "attrib_" .. string.gsub (t [1], ":", "")
  local value = tonumber (t [2])
  SetVariable (name, tonumber (GetVariable (name) or 0) + value)
 end -- one_herb 
 local re = rex.new (GetTriggerInfo (name, 1))  -- get the match text, make into a regexp
 re:gmatch (line, one_attrib)  -- match repeatedly, call function
 for k, v in pairs (GetVariableList()) do 
  name = string.match (k, "^attrib_(%a+)$")
  if name then
   value = tonumber (v)
   stats [name] = value
  end -- if
 end
end -- attrib_trigger_script  

function start_of_equip_list (name, line, wildcards)
 for k, v in pairs (GetVariableList()) do 
  if string.match (k, "^attrib_") then
   DeleteVariable (k)
  end -- one of the attrib_* variables
 end -- for
 stats = {
  str = '0',
  hr = '0',
  int = '0',
  dmg = '0',
  wis = '0',
  chr = '0',
  dex = '0',
  luc = '0',
  con = '0',
  svs = '0',
  da = '0',
  mr = '0',
  hp = '0',
  ma = '0'
 }
end -- start_of_equip_list

function show_equip_list ()
 ColourNote("white", "black", "Str:", "red", "black", stats.str,
            "white", "black", " Int:", "red", "black", stats.int,
            "white", "black", " Wis:", "red", "black", stats.wis,
            "white", "black", " Dex:", "red", "black", stats.dex,
            "white", "black", " Con:", "red", "black", stats.con,
            "white", "black", " Da:", "red", "black", stats.da,
            "white", "black", " Mr:", "red", "black", stats.mr,
            "white", "black", " Hr:", "red", "black", stats.hr,
            "white", "black", " Dmg:", "red", "black", stats.dmg,
            "white", "black", " Chr:", "red", "black", stats.chr,
            "white", "black", " Luc:", "red", "black", stats.luc,
            "white", "black", " Svs:", "red", "black", stats.svs,
            "white", "black", " Hp:", "red", "black", stats.hp,
            "white", "black", " Ma:", "red", "black", stats.ma)
end -- show_equip_list

function create_layout ()
 left = 175
 top = 78
 top_map = 73
 right = GetInfo (281) - 320
 bottom = GetInfo (280) - 20
 bars_bottom = GetInfo (280) - 20
 -- if its less than this, we lose the map
 min_width = 50 + GetInfo (213) * 81 -- offset + width for 81 characters
 if right < min_width then
  right = min_width
 end -- if
 -- avoid the plugin crashing if someone makes the window stupidly small
 if bottom < top then
  bottom = top
 end -- if
 ----/ Create adjustable windows /----
 main_text_area ()
 create_titlebar ()
 build_avatar_window ()
 create_sidebar_button ()
 create_minimap_window ()
 build_prompt_bars ()
 build_chatLine ()
 build_promptLine ()
 ----/ Set the background /----
 if GetVariable("castle_checked") == "browse" then
  SetBackgroundImage(GetVariable("filename"), 0)
 elseif GetVariable("castle_checked") == "two" then
  SetBackgroundImage(GetInfo (66) .. "Generic/layout/outer_background_two.png", 0)
 elseif GetVariable("castle_checked") == "three" then
  SetBackgroundImage(GetInfo (66) .. "Generic/layout/outer_background_three.png", 0)
 elseif GetVariable("castle_checked") == "one" then
  SetBackgroundImage(GetInfo (66) .. "Generic/layout/outer_background.png", 0)
 elseif GetVariable("bgColour") ~= nil then
  SetBackgroundImage("", 0)
  SetBackgroundColour(bgColour)
 else
  SetBackgroundImage(GetInfo (66) .. "Generic/layout/outer_background.png", 0)
 end -- filename
 -- draw the energy bars
 draw_energy_bars ()
end -- create_layout

function checkItem (which)
  menu [which] = "+" .. menu [which]
end -- checkItem

function settings_click_menu ()
 menu = {
  [1] = "! >Avatar",
  [2] = "Default",
  [3] = "-",
  [4] = "Browse..",
  [5] = "<",
  [6] = ">Background",
  [7] = "Castle 1",
  [8] = "Castle 2",
  [9] = "Castle 3",
  [10] = "-",
  [11] = "Browse..",
  [12] = "-",
  [13] = "Solid Color",
  [14] = "<",
  [15] = ">Prompt Bars",
  [16] = "Default [reset]",
  [17] = "-",
  [18] = "Font Color",
  [19] = "-",
  [20] = "Shiny",
  [21] = "Extra Shiny",
  [22] = "-",
  [23] = "Top Edge Color", 
  [24] = "Bottom Edge Color",
  [25] = "-",
  [26] = ">Center Color",
  [27] = "Health Color Filled", 
  [28] = "Health Color Empty",
  [29] = "-",
  [30] = "Mana Color Filled", 
  [31] = "Mana Color Empty",
  [32] = "-",
  [33] = "Move Color Filled", 
  [34] = "Move Color Empty",
  [35] = "-",
  [36] = "Enemy Color Filled", 
  [37] = "Enemy Color Empty",
  [38] = "<",
  [39] = "<",
  [40] = ">Compass",
  [41] = "Default [reset]",
  [42] = "-",
  [43] = ">Main colors",
  [44] = "Set Primary",
  [45] = "Set Secondary",
  [46] = "<",
  [47] = ">Open room colors",
  [48] = "Set Primary",
  [49] = "Set Secondary",
  [50] = "<",
  [51] = ">Closed room colors",
  [52] = "Set Primary",
  [53] = "Set Secondary",
  [54] = "<",
  [55] = "<",
  [56] = "-",
  [57] = ">Star Logger",
  [58] = "Record [Start logging]",
  [59] = "-",
  [60] = "Log previous lines",
  [61] = "Remove prompt",
  [62] = "-",
  [63] = ">Set Timestamp",
  [64] = "No Timestamp",
  [65] = "-",
  [66] = ">12 Hour",
  [67] = "Jan 25 2016 [08:00:15AM]",
  [68] = "Jan 25 16 [08:00:15AM]",
  [69] = "Jan 25 [08:00:15AM]",
  [70] = "-",
  [71] = "01 25 2016 [08:00:15AM]",
  [72] = "01 25 16 [08:00:15AM]",
  [73] = "01 25 [08:00:15AM]",
  [74] = "-",
  [75] = "2016 25 Jan [08:00:15AM]",
  [76] = "16 25 Jan [08:00:15AM]",
  [77] = "25 Jan [08:00:15AM]",
  [78] = "-",
  [79] = "2016 25 01 [08:00:15AM]",
  [80] = "16 25 01 [08:00:15AM]",
  [81] = "25 01 [08:00:15AM]",
  [82] = "-",
  [83] = "[08:00:15AM]",
  [84] = "<",
  [85] = ">24 Hour",
  [86] = "Jan 25 2016 [18:00:15]",
  [87] = "Jan 25 16 [18:00:15]",
  [88] = "Jan 25 [18:00:15]",
  [89] = "-",
  [90] = "01 25 2016 [18:00:15]",
  [91] = "01 25 16 [18:00:15]",
  [92] = "01 25 [18:00:15]",
  [93] = "-",
  [94] = "2016 25 Jan [18:00:15]",
  [95] = "16 25 Jan [18:00:15]",
  [96] = "25 Jan [18:00:15]",
  [97] = "-",
  [98] = "2016 25 01 [18:00:15]",
  [99] = "16 25 01 [18:00:15]",
  [100] = "25 01 [18:00:15]",
  [101] = "-",
  [102] = "[18:00:15]",
  [103] = "<",
  [104] = "<",
  [105] = ">Set Filename",
  [106] = "Custom",
  [107] = "-",
  [108] = ">Timestamp 12 Hour",
  [109] = "Jan 25 2016 [08_00_15AM]",
  [110] = "Jan 25 16 [08_00_15AM]",
  [111] = "Jan 25 [08_00_15AM]",
  [112] = "-",
  [113] = "01 25 2016 [08_00_15AM]",
  [114] = "01 25 16 [08_00_15AM]",
  [115] = "01 25 [08_00_15AM]",
  [116] = "-",
  [117] = "2016 25 Jan [08_00_15AM]",
  [118] = "16 25 Jan [08_00_15AM]",
  [119] = "25 Jan [08_00_15AM]",
  [120] = "-",
  [121] = "2016 25 01 [08_00_15AM]",
  [122] = "16 25 01 [08_00_15AM]",
  [123] = "25 01 [08_00_15AM]",
  [124] = "-",
  [125] = "[08_00_15AM]",
  [126] = "<",
  [127] = ">Timestamp 24 Hour",
  [128] = "Jan 25 2016 [18_00_15]",
  [129] = "Jan 25 16 [18_00_15]",
  [130] = "Jan 25 [18_00_15]",
  [131] = "-",
  [132] = "01 25 2016 [18_00_15AM]",
  [133] = "01 25 16 [18_00_15AM]",
  [134] = "01 25 [18_00_15AM]",
  [135] = "-",
  [136] = "2016 25 Jan [18_00_15]",
  [137] = "16 25 Jan [18_00_15]",
  [138] = "25 Jan [18_00_15]",
  [139] = "-",
  [140] = "2016 25 01 [18_00_15AM]",
  [141] = "16 25 01 [18_00_15AM]",
  [142] = "25 01 [18_00_15AM]",
  [143] = "-",
  [144] = "[18_00_15]",
  [145] = "<",
  [146] = "<",
  [147] = "-",
  [148] = "Set Logs Folder",
  [149] = "Open Logs Folder",
  [150] = "<",
  [151] = "-",
  [152] = "Report an issue",
  [153] = "-",
  [154] = "Check and Update Plugin"
 }
 if GetVariable("avatar_checked") == "one" or GetVariable("avatar_checked") == nil then
  checkItem (2)
 elseif GetVariable("avatar_checked") == "browse" then
  checkItem (4)
 end -- if
 if GetVariable("castle_checked") == "one" or GetVariable("castle_checked") == nil then
  checkItem (7)
 elseif GetVariable("castle_checked") == "two" then
  checkItem (8)
 elseif GetVariable("castle_checked") == "three" then
  checkItem (9)
 elseif GetVariable("castle_checked") == "browse" then
  checkItem (11)
 end -- if 
 if GetVariable("bgColour") ~= nil then
  checkItem (13)
  menu [13] = menu [13] .. " [" .. RGBColourToName(bgColour) .. "]"
 end -- if
 if GetVariable("prompt_checked") == "default" then
  checkItem (16)
 elseif GetVariable("prompt_checked") == "shiny" then
  checkItem (20)
 elseif GetVariable("prompt_checked") == "extrashiny" then
  checkItem (21)
 elseif GetVariable("prompt_checked") == "customTop" then
  checkItem (23)
  menu [23] = menu [23] .. " [" .. RGBColourToName(customBar_top_color) .. "]"
 end -- prompt_checked
 if GetVariable("prompt_checked_custom") == "customBottom" then
  checkItem (24)
  menu [24] = menu [24] .. " [" .. RGBColourToName(customBar_bottom_color) .. "]"
 end -- prompt_checked_custom 
 if GetVariable("health_color") ~= nil then
  checkItem (27)
  menu [27] = menu [27] .. " [" .. RGBColourToName(GetVariable("health_color")) .. "]"
 end -- health_color
 if GetVariable("health_colorB") ~= nil then
  checkItem (28)
  menu [28] = menu [28] .. " [" .. RGBColourToName(GetVariable("health_colorB")) .. "]"
 end -- health_colorB 
 if GetVariable("mana_color") ~= nil then
  checkItem (30)
  menu [30] = menu [30] .. " [" .. RGBColourToName(GetVariable("mana_color")) .. "]"
 end -- mana_color
 if GetVariable("mana_colorB") ~= nil then
  checkItem (31)
  menu [31] = menu [31] .. " [" .. RGBColourToName(GetVariable("mana_colorB")) .. "]"
 end -- mana_colorB
 if GetVariable("move_color") ~= nil then
  checkItem (33)
  menu [33] = menu [33] .. " [" .. RGBColourToName(GetVariable("move_color")) .. "]"
 end -- move_color
 if GetVariable("move_colorB") ~= nil then
  checkItem (34)
  menu [34] = menu [34] .. " [" .. RGBColourToName(GetVariable("move_colorB")) .. "]"
 end -- move_colorB
 if GetVariable("enemy_color") ~= nil then
  checkItem (36)
  menu [36] = menu [36] .. " [" .. RGBColourToName(GetVariable("enemy_color")) .. "]"
 end -- enemy_color
 if GetVariable("enemy_colorB") ~= nil then
  checkItem (37)
  menu [37] = menu [37] .. " [" .. RGBColourToName(GetVariable("enemy_colorB")) .. "]"
 end -- enemy_colorB
 if GetVariable("bar_text_color") ~= nil then
  checkItem (18)
  menu [18] = menu [18] .. " [" .. RGBColourToName(GetVariable("bar_text_color")) .. "]"
 end -- bar_text_color
 if GetVariable("cColorLight") == nil and GetVariable("cColorDark") == nil and GetVariable("cColorLighto") == nil and GetVariable("cColorDarko") == nil and GetVariable("cColorLightc") == nil and GetVariable("cColorDarkc") == nil then
  checkItem (41)
 end -- basic reset
 if GetVariable("cColorLight") ~= nil then
  menu [44] = menu [44] .. " [" .. RGBColourToName(GetVariable("cColorLight")) .. "]"
  checkItem (44)
 end -- cColorLight main
 if GetVariable("cColorDark") ~= nil then
  menu [45] = menu [45] .. " [" .. RGBColourToName(GetVariable("cColorDark")) .. "]"
  checkItem (45)
 end -- cColorDark main
 if GetVariable("cColorLighto") ~= nil then
  menu [48] = menu [48] .. " [" .. RGBColourToName(GetVariable("cColorLighto")) .. "]"
  checkItem (48)
 end -- cColorLighto
 if GetVariable("cColorDarko") ~= nil then
  menu [49] = menu [49] .. " [" .. RGBColourToName(GetVariable("cColorDarko")) .. "]"
  checkItem (49)
 end -- cColorDarko
 if GetVariable("cColorLightc") ~= nil then
  menu [52] = menu [52] .. " [" .. RGBColourToName(GetVariable("cColorLightc")) .. "]"
  checkItem (52)
 end -- cColorLightc
 if GetVariable("cColorDarkc") ~= nil then
  menu [53] = menu [53] .. " [" .. RGBColourToName(GetVariable("cColorDark")) .. "]"
  checkItem (53)
 end -- cColorDarkc
 if GetVariable("starLog_isRec") == "true" then
  menu [58] = "Recording [Stop logging]"
  checkItem (58)
 end -- starLog_isRec
 if GetVariable("starLog_recPrev") == "true" then
  checkItem (60)
 end -- starLog_recPrev
 if GetVariable("starLog_tsType") == "%b %d %Y [%I:%M:%S%p] " then
  checkItem (67)
 elseif GetVariable("starLog_tsType") == "%b %d %y [%I:%M:%S%p] " then
  checkItem (68)
 elseif GetVariable("starLog_tsType") == "%b %d [%I:%M:%S%p] " then
  checkItem (69)
 elseif GetVariable("starLog_tsType") == "%m %d %Y [%I:%M:%S%p] " then
  checkItem (71)
 elseif GetVariable("starLog_tsType") == "%m %d %y [%I:%M:%S%p] " then
  checkItem (72)
 elseif GetVariable("starLog_tsType") == "%m %d [%I:%M:%S%p] " then
  checkItem (73)
 elseif GetVariable("starLog_tsType") == "%Y %d %b [%I:%M:%S%p] " then
  checkItem (75)
 elseif GetVariable("starLog_tsType") == "%y %d %b [%I:%M:%S%p] " then
  checkItem (76)
 elseif GetVariable("starLog_tsType") == "%d %b [%I:%M:%S%p] " then
  checkItem (77)
 elseif GetVariable("starLog_tsType") == "%Y %d %m [%I:%M:%S%p] " then
  checkItem (79)
 elseif GetVariable("starLog_tsType") == "%y %d %m [%I:%M:%S%p] " then
  checkItem (80)
 elseif GetVariable("starLog_tsType") == "%d %m [%I:%M:%S%p] " then
  checkItem (81)
 elseif GetVariable("starLog_tsType") == "[%I:%M:%S%p] " then
  checkItem (83)
 elseif GetVariable("starLog_tsType") == "%b %d %Y [%H:%M:%S] " then
  checkItem (86)
 elseif GetVariable("starLog_tsType") == "%b %d %y [%H:%M:%S] " then
  checkItem (87)
 elseif GetVariable("starLog_tsType") == "%b %d [%H:%M:%S] " then
  checkItem (88)
 elseif GetVariable("starLog_tsType") == "%m %d %Y [%H:%M:%S] " then
  checkItem (90)
 elseif GetVariable("starLog_tsType") == "%m %d %y [%H:%M:%S] " then
  checkItem (91)
 elseif GetVariable("starLog_tsType") == "%m %d [%H:%M:%S] " then
  checkItem (92)
 elseif GetVariable("starLog_tsType") == "%Y %d %b [%H:%M:%S] " then
  checkItem (94)
 elseif GetVariable("starLog_tsType") == "%y %d %b [%H:%M:%S] " then
  checkItem (95)
 elseif GetVariable("starLog_tsType") == "%d %b [%H:%M:%S] " then
  checkItem (96)
 elseif GetVariable("starLog_tsType") == "%Y %d %m [%H:%M:%S] " then
  checkItem (98)
 elseif GetVariable("starLog_tsType") == "%y %d %m [%H:%M:%S] " then
  checkItem (99)
 elseif GetVariable("starLog_tsType") == "%d %m [%H:%M:%S] " then
  checkItem (100)
 elseif GetVariable("starLog_tsType") == "[%H:%M:%S] " then
  checkItem (102)
 else
  checkItem (64)
 end -- starLog_tsType
 if GetVariable("starLog_fnTs") == "%b %d %Y [%I_%M_%S%p]" then
  checkItem (109)
 elseif GetVariable("starLog_fnTs") == "%b %d %y [%I_%M_%S%p]" then
  checkItem (110)
 elseif GetVariable("starLog_fnTs") == "%b %d [%I_%M_%S%p]" then
  checkItem (111)
 elseif GetVariable("starLog_fnTs") == "%m %d %Y [%I_%M_%S%p]" then
  checkItem (113)
 elseif GetVariable("starLog_fnTs") == "%m %d %y [%I_%M_%S%p]" then
  checkItem (114)
 elseif GetVariable("starLog_fnTs") == "%m %d [%I_%M_%S%p]" then
  checkItem (115)
 elseif GetVariable("starLog_fnTs") == "%Y %d %b [%I_%M_%S%p]" then
  checkItem (117)
 elseif GetVariable("starLog_fnTs") == "%y %d %b [%I_%M_%S%p]" then
  checkItem (118)
 elseif GetVariable("starLog_fnTs") == "%d %b [%I_%M_%S%p]" then
  checkItem (119)
 elseif GetVariable("starLog_fnTs") == "%Y %d %m [%I_%M_%S%p]" then
  checkItem (121)
 elseif GetVariable("starLog_fnTs") == "%y %d %m [%I_%M_%S%p]" then
  checkItem (122)
 elseif GetVariable("starLog_fnTs") == "%d %m [%I_%M_%S%p]" then
  checkItem (123)
 elseif GetVariable("starLog_fnTs") == "[%I_%M_%S%p]" then
  checkItem (125)
 elseif GetVariable("starLog_fnTs") == "%b %d %Y [%H_%M_%S]" then
  checkItem (128)
 elseif GetVariable("starLog_fnTs") == "%b %d %y [%H_%M_%S]" then
  checkItem (129)
 elseif GetVariable("starLog_fnTs") == "%b %d [%H_%M_%S]" then
  checkItem (130)
 elseif GetVariable("starLog_fnTs") == "%m %d %Y [%H_%M_%S]" then
  checkItem (132)
 elseif GetVariable("starLog_fnTs") == "%m %d %y [%H_%M_%S]" then
  checkItem (133)
 elseif GetVariable("starLog_fnTs") == "%m %d [%H_%M_%S]" then
  checkItem (134)
 elseif GetVariable("starLog_fnTs") == "%Y %d %b [%H_%M_%S]" then
  checkItem (136)
 elseif GetVariable("starLog_fnTs") == "%y %d %b [%H_%M_%S]" then
  checkItem (137)
 elseif GetVariable("starLog_fnTs") == "%d %b [%H_%M_%S]" then
  checkItem (138)
 elseif GetVariable("starLog_fnTs") == "%Y %d %m [%H_%M_%S]" then
  checkItem (140)
 elseif GetVariable("starLog_fnTs") == "%y %d %m [%H_%M_%S]" then
  checkItem (141)
 elseif GetVariable("starLog_fnTs") == "%d %m [%H_%M_%S]" then
  checkItem (142)
 elseif GetVariable("starLog_fnTs") == "[%H_%M_%S]" then
  checkItem (144)
 else
  if GetVariable("starLog_fnTs") == nil then
   checkItem (67)
  end -- starLog_fnTs
  if GetVariable("result_filename") ~= nil then
   checkItem (106)
   menu [106] = menu [106] .. " [ " .. GetVariable("starLog_fnTs") .. " ]"
  end -- result_filename
 end -- starLog_fnTs
 if GetVariable("starLog_remPrompt") == "true" then
  checkItem (61)
 end -- starLog_remPrompt
 result = WindowMenu (titlebar_window, 65, 15, table.concat (menu, "|"))
 if result == "1" then
  avatar_filename = nil
  SetVariable("avatar_checked", "one")
  WindowLoadImage (avatar_window, "avatar", GetInfo (66) .. "Generic/avatars/Default.png")
  WindowDrawImage (avatar_window, "avatar", 0, 0, 117, 117, 2)
  print("Avatar Selected: Default")
 elseif result == "2" then
  filter = {  bmp = "Bitmap files", png = "Image files" }
  avatar_filename = utils.filepicker (title, name, extension, filter, save)
  if avatar_filename == nil then
   print("Custom Avatar Canceled")
  else
   print("Avatar Selected:", avatar_filename)
   SetVariable("avatar_filename", avatar_filename)
   SetVariable("avatar_checked", "browse")
   WindowLoadImage (avatar_window, "avatar", avatar_filename)
   WindowDrawImage (avatar_window, "avatar", 0, 0, 117, 117, 2)
  end -- avatar_filename
 elseif result == "3" then
  filename = nil
  DeleteVariable("bgColour")
  SetVariable("castle_checked", "one")
  print("Background Selected: Castle 1")
  SetBackgroundImage(GetInfo (66) .. "Generic/layout/outer_background.png", 0)
 elseif result == "4" then
  filename = nil
  SetVariable("castle_checked", "two")
  DeleteVariable("bgColour")
  print("Background Selected: Castle 2")
  SetBackgroundImage(GetInfo (66) .. "Generic/layout/outer_background_two.png", 0)
 elseif result == "5" then
  filename = nil
  SetVariable("castle_checked", "three")
  DeleteVariable("bgColour")
  print("Background Selected: Castle 3")
  SetBackgroundImage(GetInfo (66) .. "Generic/layout/outer_background_three.png", 0)
 elseif result == "6" then
  DeleteVariable("bgColour")
  filter = {  bmp = "Bitmap files", png = "Image files" }
  filename = utils.filepicker (title, name, extension, filter, save)
  if filename == nil then
   print("Custom Background Image Canceled")
  else
   print("Background Selected:", filename)
   SetVariable("filename", filename)
   SetVariable("castle_checked", "browse")
   SetBackgroundImage(GetVariable("filename"), 0)
  end -- filename
 elseif result == "7" then
  bgColour = getColour(bgColour)
  print("Background Solid Color Canceled")
  SetVariable("bgColour", bgColour) -- save it for next time they play
  SetVariable("castle_checked", "none") -- so it doesnt mess with first time default 
  filename = nil
  SetBackgroundImage("", 0)
  SetBackgroundColour(tonumber(GetVariable ("bgColour")))
  main_text_area ()
 elseif result == "8" then
  SetVariable("prompt_checked", "default")
  DeleteVariable("prompt_checked_custom")
  DeleteVariable("health_color")
  DeleteVariable("health_colorB")
  DeleteVariable("mana_color")
  DeleteVariable("mana_colorB")
  DeleteVariable("move_color")
  DeleteVariable("move_colorB")
  DeleteVariable("enemy_color")
  DeleteVariable("enemy_colorB")
  DeleteVariable("bar_text_color")
  SetVariable("custom_bar_color_highlight_top", ColourNameToRGB("#000000"))
  SetVariable("custom_bar_color_highlight_bottom", ColourNameToRGB("#000000"))
  draw_energy_bars ()
 elseif result == "9" then
  SetVariable("prompt_checked", "blahblah")
  bar_text_color = getColour(bar_text_color)
  SetVariable("bar_text_color", bar_text_color)
  draw_energy_bars ()
 elseif result == "10" then
  SetVariable("prompt_checked", "shiny")
  DeleteVariable("prompt_checked_custom")
  SetVariable("custom_bar_color_highlight_top", ColourNameToRGB("#FFFFFF"))
  SetVariable("custom_bar_color_highlight_bottom", ColourNameToRGB("#000000"))
  draw_energy_bars ()
 elseif result == "11" then
  SetVariable("prompt_checked", "extrashiny")
  DeleteVariable("prompt_checked_custom")
  SetVariable("custom_bar_color_highlight_top", ColourNameToRGB("#FFFFFF"))
  SetVariable("custom_bar_color_highlight_bottom", ColourNameToRGB("#FFFFFF"))
  draw_energy_bars ()
 elseif result == "12" then
  SetVariable("prompt_checked", "customTop")
  customBar_top_color = getColour(customBar_top_color)
  SetVariable("custom_bar_color_highlight_top", customBar_top_color)
  draw_energy_bars ()
 elseif result == "13" then
  SetVariable("prompt_checked_custom", "customBottom")
  if GetVariable("prompt_checked") ~= "customTop" then
   SetVariable("prompt_checked", "blahblah")
  end -- quick fix so I dont have to rewrite code cause im lazy lol
  customBar_bottom_color = getColour(customBar_bottom_color)
  SetVariable("custom_bar_color_highlight_bottom", customBar_bottom_color)
  draw_energy_bars ()	 
 elseif result == "14" then
  SetVariable("prompt_checked", "blahblah")
  health_color = getColour(health_color)
  SetVariable("health_color", health_color)
  draw_energy_bars ()
 elseif result == "15" then
  SetVariable("prompt_checked", "blahblah")
  health_colorB = getColour(health_colorB)
  SetVariable("health_colorB", health_colorB)
  draw_energy_bars ()
 elseif result == "16" then
  SetVariable("prompt_checked", "blahblah")
  mana_color = getColour(mana_color)
  SetVariable("mana_color", mana_color)
  draw_energy_bars ()
 elseif result == "17" then
  SetVariable("prompt_checked", "blahblah")
  mana_colorB = getColour(mana_colorB)
  SetVariable("mana_colorB", mana_colorB)
  draw_energy_bars ()
 elseif result == "18" then
  SetVariable("prompt_checked", "blahblah")
  move_color = getColour(move_color)
  SetVariable("move_color", move_color)
  draw_energy_bars ()
 elseif result == "19" then
  SetVariable("prompt_checked", "blahblah")
  move_colorB = getColour(move_colorB)
  SetVariable("move_colorB", move_colorB)
  draw_energy_bars ()
 elseif result == "20" then
  SetVariable("prompt_checked", "blahblah")
  enemy_color = getColour(enemy_color)
  SetVariable("enemy_color", enemy_color)
  draw_energy_bars ()
 elseif result == "21" then
  SetVariable("prompt_checked", "blahblah")
  enemy_colorB = getColour(enemy_colorB)
  SetVariable("enemy_colorB", enemy_colorB)
  draw_energy_bars ()
 elseif result == "22" then
  --compass reset
  DeleteVariable("cColorLight")
  DeleteVariable("cColorDark")
  DeleteVariable("cColorLighto")
  DeleteVariable("cColorDarko")
  DeleteVariable("cColorLightc")
  DeleteVariable("cColorDarkc")
  create_minimap_window ()
 elseif result == "23" then
 --compass main color primary
  cColorLight = getColour(cColorLight)
  SetVariable("cColorLight", cColorLight)
  create_minimap_window ()
 elseif result == "24" then
 --compass main color secondary
  cColorDark = getColour(cColorDark)
  SetVariable("cColorDark", cColorDark)
  create_minimap_window ()
 elseif result == "25" then
 --compass open room primary
  cColorLighto = getColour(cColorLighto)
  SetVariable("cColorLighto", cColorLighto)
  create_minimap_window ()
 elseif result == "26" then
 --compass open room secondary
  cColorDarko = getColour(cColorDarko)
  SetVariable("cColorDarko", cColorDarko)
  create_minimap_window ()
 elseif result == "27" then
 --compass closed room primary
  cColorLightc = getColour(cColorLightc)
  SetVariable("cColorLightc", cColorLightc)
  create_minimap_window ()
 elseif result == "28" then
 --compass closed room secondary
  cColorDarkc = getColour(cColorDarkc)
  SetVariable("cColorDarkc", cColorDarkc)
  create_minimap_window () 
 elseif result == "29" then
  if GetVariable("starLog_isRec") == nil then
   starLog_isRec = false
   SetVariable("starLog_isRec", "false")
  end -- starLog_isRec  
  starLog_isRec = not starLog_isRec  
  if starLog_isRec then
   SetVariable("starLog_isRec", "true")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Activated")
   if GetVariable("starLog_recPrev") == "true" then
    starLog_prev ()
   end -- starLog_recPrev  
   EnableTrigger("starlogger", true)
  else
   EnableTrigger("starlogger", false)
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "red", "", "Deactivated")
   if GetVariable("starlog_folder") ~= nil then
    if GetVariable("starLog_fnTs") ~= nil then
     SaveNotepad ("Star_Log_Test", GetVariable("starlog_folder") .. "\\" .. os.date(GetVariable("starLog_fnTs")) .. ".txt")
     CloseNotepad ("Star_Log_Test", 0)
     ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Log file saved to ", "red", "", GetVariable("starlog_folder") .. "\\" .. os.date(GetVariable("starLog_fnTs")) .. ".txt")	 
    else
     SaveNotepad ("Star_Log_Test", GetVariable("starlog_folder") .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
     CloseNotepad ("Star_Log_Test", 0)
     ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "silver", "", "Filename has not been set, saving file with default format name.")
     ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Log file saved to ", "red", "", GetVariable("starlog_folder") .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
    end -- starlog_folder
   else
    SaveNotepad ("Star_Log_Test", GetInfo (58) .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
    CloseNotepad ("Star_Log_Test", 0)
    ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "silver", "", "Folder and Filename has not been set, saving file at default location with default name.")
    ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Log file saved to ", "red", "", GetInfo (58) .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
   end -- starlog_folder
   SetVariable("starLog_isRec", "false")
  end -- starLog_isRec
 elseif result == "30" then
  if GetVariable("starLog_recPrev") == "true" then
   starLog_recPrev = true
  elseif GetVariable("starLog_recPrev") == "false" then
   starLog_recPrev = false
  else
   starLog_recPrev = false
   SetVariable("starLog_recPrev", "false")
  end -- starLog_recPrev
  starLog_recPrev = not starLog_recPrev
  if starLog_recPrev then
   SetVariable("starLog_recPrev", "true")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Previous lines will now be logged.")
  else
   SetVariable("starLog_recPrev", "false")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "red", "", "Previous lines will no longer be logged.")
  end -- starLog_recPrev
 elseif result == "31" then
  if GetVariable("starLog_remPrompt") == "true" then
   starLog_remPrompt = true
  elseif GetVariable("starLog_remPrompt") == "false" then
   starLog_remPrompt = false
  else
   starLog_remPrompt = false
   SetVariable("starLog_remPrompt", "false")
  end -- starLog_remPrompt
  starLog_remPrompt = not starLog_remPrompt
  if starLog_remPrompt then
   SetVariable("starLog_remPrompt", "true")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Prompt will now be removed from logs.")
  else
   SetVariable("starLog_remPrompt", "false")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "red", "", "Prompt will no longer be removed from logs.")
  end -- starLog_remPrompt
 elseif result == "32" then
  DeleteVariable("starLog_tsType")
 elseif result == "33" then
  SetVariable("starLog_tsType", "%b %d %Y [%I:%M:%S%p] ")
 elseif result == "34" then
  SetVariable("starLog_tsType", "%b %d %y [%I:%M:%S%p] ")
 elseif result == "35" then
  SetVariable("starLog_tsType", "%b %d [%I:%M:%S%p] ")
 elseif result == "36" then
  SetVariable("starLog_tsType", "%m %d %Y [%I:%M:%S%p] ")
 elseif result == "37" then
  SetVariable("starLog_tsType", "%m %d %y [%I:%M:%S%p] ")
 elseif result == "38" then
  SetVariable("starLog_tsType", "%m %d [%I:%M:%S%p] ")
 elseif result == "39" then
  SetVariable("starLog_tsType", "%Y %d %b [%I:%M:%S%p] ")
 elseif result == "40" then
  SetVariable("starLog_tsType", "%y %d %b [%I:%M:%S%p] ")
 elseif result == "41" then
  SetVariable("starLog_tsType", "%d %b [%I:%M:%S%p] ")
 elseif result == "42" then
  SetVariable("starLog_tsType", "%Y %d %m [%I:%M:%S%p] ")
 elseif result == "43" then
  SetVariable("starLog_tsType", "%y %d %m [%I:%M:%S%p] ")
 elseif result == "44" then
  SetVariable("starLog_tsType", "%d %m [%I:%M:%S%p] ")
 elseif result == "45" then
  SetVariable("starLog_tsType", "[%I:%M:%S%p] ")
 elseif result == "46" then
  SetVariable("starLog_tsType", "%b %d %Y [%H:%M:%S] ")
 elseif result == "47" then
  SetVariable("starLog_tsType", "%b %d %y [%H:%M:%S] ")
 elseif result == "48" then
  SetVariable("starLog_tsType", "%b %d [%H:%M:%S] ")
 elseif result == "49" then
  SetVariable("starLog_tsType", "%m %d %Y [%H:%M:%S] ")
 elseif result == "50" then
  SetVariable("starLog_tsType", "%m %d %y [%H:%M:%S] ")
 elseif result == "51" then
  SetVariable("starLog_tsType", "%m %d [%H:%M:%S] ")
 elseif result == "52" then
  SetVariable("starLog_tsType", "%Y %d %b [%H:%M:%S] ")
 elseif result == "53" then
  SetVariable("starLog_tsType", "%y %d %b [%H:%M:%S] ")
 elseif result == "54" then
  SetVariable("starLog_tsType", "%d %b [%H:%M:%S] ")
 elseif result == "55" then
  SetVariable("starLog_tsType", "%Y %d %m [%H:%M:%S] ")
 elseif result == "56" then
  SetVariable("starLog_tsType", "%y %d %m [%H:%M:%S] ")
 elseif result == "57" then
  SetVariable("starLog_tsType", "%d %m [%H:%M:%S] ")
 elseif result == "58" then
  SetVariable("starLog_tsType", "[%H:%M:%S] ")
 elseif result == "59" then
  result_filename = utils.inputbox ("What would you like the filename to be?", "Star Logger", "The Final Challenge Log", "Courier", 9)
  if result_filename ~= nil then
   SetVariable("result_filename", result_filename)
   SetVariable("starLog_fnTs", result_filename)
  else
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "red", "", "Custom filename has been canceled.")
  end -- result_filename
 elseif result == "60" then
  SetVariable("starLog_fnTs", "%b %d %Y [%I_%M_%S%p]")
 elseif result == "61" then
  SetVariable("starLog_fnTs", "%b %d %y [%I_%M_%S%p]")
 elseif result == "62" then
  SetVariable("starLog_fnTs", "%b %d [%I_%M_%S%p]")
 elseif result == "63" then
  SetVariable("starLog_fnTs", "%m %d %Y [%I_%M_%S%p]")
 elseif result == "64" then
  SetVariable("starLog_fnTs", "%m %d %y [%I_%M_%S%p]")
 elseif result == "65" then
  SetVariable("starLog_fnTs", "%m %d [%I_%M_%S%p]")
 elseif result == "66" then
  SetVariable("starLog_fnTs", "%Y %d %b [%I_%M_%S%p]")
 elseif result == "67" then
  SetVariable("starLog_fnTs", "%y %d %b [%I_%M_%S%p]")
 elseif result == "68" then
  SetVariable("starLog_fnTs", "%d %b [%I_%M_%S%p]")
 elseif result == "69" then
  SetVariable("starLog_fnTs", "%Y %d %m [%I_%M_%S%p]")
 elseif result == "70" then
  SetVariable("starLog_fnTs", "%y %d %m [%I_%M_%S%p]")
 elseif result == "71" then
  SetVariable("starLog_fnTs", "%d %m [%I_%M_%S%p]")
 elseif result == "72" then
  SetVariable("starLog_fnTs", "[%I_%M_%S%p]")
 elseif result == "73" then
  SetVariable("starLog_fnTs", "%b %d %Y [%H_%M_%S]")
 elseif result == "74" then
  SetVariable("starLog_fnTs", "%b %d %y [%H_%M_%S]")
 elseif result == "75" then
  SetVariable("starLog_fnTs", "%b %d [%H_%M_%S]")
 elseif result == "76" then
  SetVariable("starLog_fnTs", "%m %d %Y [%H_%M_%S]")
 elseif result == "77" then
  SetVariable("starLog_fnTs", "%m %d %y [%H_%M_%S]")
 elseif result == "78" then
  SetVariable("starLog_fnTs", "%m %d [%H_%M_%S]")
 elseif result == "79" then
  SetVariable("starLog_fnTs", "%Y %d %b [%H_%M_%S]")
 elseif result == "80" then
  SetVariable("starLog_fnTs", "%y %d %b [%H_%M_%S]")
 elseif result == "81" then
  SetVariable("starLog_fnTs", "%d %b [%H_%M_%S]")
 elseif result == "82" then
  SetVariable("starLog_fnTs", "%Y %d %m [%H_%M_%S]")
 elseif result == "83" then
  SetVariable("starLog_fnTs", "%y %d %m [%H_%M_%S]")
 elseif result == "84" then
  SetVariable("starLog_fnTs", "%d %m [%H_%M_%S]")
 elseif result == "85" then
  SetVariable("starLog_fnTs", "[%H_%M_%S]")
 elseif result == "86" then
  directoryname = utils.directorypicker ("Folder to put logs into", GetInfo (58))
  if directoryname ~= nil then
   SetVariable("starlog_folder", directoryname)
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Logs will now save to ", "red", "", directoryname)
  else
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "red", "", "Custom folder has been canceled.")
  end -- directoryname
 elseif result == "87" then
  if GetVariable("starlog_folder") then
   os.execute ("explorer " .. GetVariable("starlog_folder") )
  else
   os.execute ("explorer " .. GetInfo (58) )
  end -- starlog_folder
 elseif result == "88" then
  OpenBrowser ("https://github.com/TFC-Fumino/MUSHclient_Plugins/issues")
 elseif result == "89" then
  print("")
  ColourNote("white", "blue", "Connecting to the server and checking for updates.")
  ColourNote("white", "blue", "Please wait..")
  update_plugin ()
 end -- result
 DrawThemed3DRect(titlebar_window, 65, 0, 104, 13)
 outlined_text (colourWhite, titlebar_window, "settings", 5, 68, 2, 0)
 Redraw()
 Activate()
end -- function settings_click_menu

function MouseDown_button(flags, hotspot_id)
 WindowRectOp(titlebar_window, miniwin.rect_draw_edge, 65, 0, 104, 13, 
    miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
 outlined_text (colourTFC, titlebar_window, "settings", 5, 68, 2, 0)
 Redraw()
 settings_click_menu()
end  -- function MouseDown_button

function MouseUp_button(flags, hotspot_id)
DrawThemed3DRect(titlebar_window, 65, 0, 104, 13)
 outlined_text (colourWhite, titlebar_window, "settings", 5, 68, 2, 0)
Redraw()
end  -- function MouseUp_button

function getColour(c)
 local newColour = PickColour (c)
 if newcolour ~= -1 then
  c = newColour
 end
 return c
end --getColour

function OnPluginWorldOutputResized ()
end -- function

----/ Create the health, mana, movement and enemy bars at the bottom /----
function build_prompt_bars ()
 -- make a miniwindow under the text
 WindowCreate (health_window,   -- window ID
    HEALTH_BAR_LEFT_POSITION,            -- left
    bars_bottom - 3,            -- top
    100,           -- width
    20,            -- depth
    12,            -- center it (ignored anyway) 
    2,             -- draw underneath (1) + absolute location (2)
    colourBlack)  -- background colour
 -- show the window
 WindowShow (health_window, true)
 -- make a miniwindow under the text
 WindowCreate (mana_window,   -- window ID
    MANA_BAR_LEFT_POSITION,            -- left
    bars_bottom - 3,           -- top
    100,           -- width
    20,            -- depth
    12,            -- center it (ignored anyway) 
    2,             -- draw underneath (1) + absolute location (2)
    colourBlack)  -- background colour
 -- show the window
 WindowShow (mana_window, true)
 -- make a miniwindow under the text
 WindowCreate (movement_window,   -- window ID
    MOVE_BAR_LEFT_POSITION,            -- left
    bars_bottom - 3,           -- top
    100,           -- width
    20,            -- depth
    12,            -- center it (ignored anyway) 
    2,             -- draw underneath (1) + absolute location (2)
    colourBlack)  -- background colour
 -- show the window
 WindowShow (movement_window, true)
 -- make a miniwindow under the text
 WindowCreate (exp_window,   -- window ID
    ENEM_BAR_LEFT_POSITION,            -- left
    bars_bottom - 3,           -- top
    100,           -- width
    20,            -- depth
    12,            -- center it (ignored anyway) 
    2,             -- draw underneath (1) + absolute location (2)
    colourBlack)  -- background colour
 -- show the window
 WindowShow (exp_window, true)
end -- build_prompt_bars

function init_rooms (data)
 ExitCount = 0
 index = 0
 startpos = 1
 max = 0
 for i=startpos,string.len(data),1 do
  if string.byte(data,i) == 1 or i == string.len(data) then
   if string.byte(data,i) == 1 then
    endpos = 1
   else
    endpos = 0
   end -- if
   variable = string.sub(data,startpos,i-endpos)
   startpos = i+1
   index = index + 1
   pos1 = string.find(variable, "\002")
   if pos1 ~= nil then
    RoomExit[index] = string.sub(variable, 1, pos1-1)
    RoomType[index] = string.sub(variable, pos1+1)
    ExitCount = ExitCount + 1
   end -- if
  end -- if
 end -- for
end -- function

function draw_room (x, y, type_room)
 terrain_image = "terrain_dark"
 if type_room == "O" then
  terrain_image = "terrain_city"
 end -- if
 if GetVariable("terrain_type") == "nomoon" then
  if type_room == "C" then
   -- WindowDrawImage (minimap_window, terrain_image, x-12, y-6, x+20, y+20, 3)  -- draw the door
   -- draw filled triangle door color here
  end -- type_room
 else
  -- WindowDrawImage (minimap_window, terrain_image, x-12, y-6, x+20, y+20, 3)  -- draw the terrain
  -- draw filled triangle normal room here
 end -- terrain_type
end -- draw_room

function draw_minimap ()
 data = msdp["ROOM_EXITS"]
 if data ~= nil then
  init_rooms (data)
 end -- if
 mapCentre = 45
 -- clean the background and redraw the central room
 if GetVariable("bgColour") ~= nil then
  WindowRectOp (minimap_window, 2, 0, 0, 0, 0, tonumber(GetVariable ("bgColour")))
 else
  WindowRectOp (minimap_window, 2, 0, 0, 0, 0, 0x000000)
 end -- bgColour
 cColorLight = GetVariable("cColorLight") or ColourNameToRGB("white")
 cColorDark = GetVariable("cColorDark") or ColourNameToRGB("dimgray")
 outlined_text (cColorLight, minimap_window, "*", 10, 77, 44, 0) 
 WindowCircleOp (minimap_window, 4, 75, 44, 88, 57,
    cColorLight, 0, 2, ColourNameToRGB("cyan"), 1, 
    0, 0, 0, 0) 
 -- north arrow right half
 points = string.format ("%i,%i,%i,%i,%i,%i", 81, 43, 81, 8, 86, 43)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- north arrow left half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 76, 43, 81, 8, 81, 43)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- south arrow left half
 points = string.format ("%i,%i,%i,%i,%i,%i", 76, 57, 81, 90, 81, 57)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- south arrow right half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 81, 57, 81, 90, 86, 57)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- east arrow bottom half
 points = string.format ("%i,%i,%i,%i,%i,%i", 88, 50, 116, 50, 88, 55)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- east arrow top half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 88, 45, 116, 50, 88, 50)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- west arrow top half
 points = string.format ("%i,%i,%i,%i,%i,%i", 74, 45, 46, 50, 74, 50)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- west arrow bottom half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 74, 50, 46, 50, 74, 55)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 --/ up ladder /--
 -- ladder steps
 WindowLine (minimap_window, 108, 11, 116, 11, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 15, 116, 15, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 19, 116, 19, cColorLight, miniwin.pen_solid, 1)
 -- ladder sides
 WindowLine (minimap_window, 108, 8, 108, 23, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 115, 8, 115, 23, cColorLight, miniwin.pen_solid, 1)
 --/ down ladder /--
 -- ladder steps
 WindowLine (minimap_window, 108, 78, 116, 78, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 82, 116, 82, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 86, 116, 86, cColorLight, miniwin.pen_solid, 1)
 -- ladder sides
 WindowLine (minimap_window, 108, 75, 108, 90, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 115, 75, 115, 90, cColorLight, miniwin.pen_solid, 1)
 if ExitCount > 0 and curRoom_exits ~= nil then
  if GetVariable("terrain_color") == nil then
   colourMap = ColourNameToRGB("white")
  else
   colourMap = GetVariable("terrain_color")
  end -- terrain_color
  for i=1,ExitCount,1 do
   for k, v in pairs (curRoom_exits) do
    if RoomExit[i] == "north" then
	 if RoomType[i] == "C" then
      cColorLight = GetVariable("cColorLightc") or ColourNameToRGB("red")
	  cColorDark = GetVariable("cColorDarkc") or ColourNameToRGB("darkred")
	  -- north arrow right half
      points = string.format ("%i,%i,%i,%i,%i,%i", 81, 43, 81, 8, 86, 43)
      WindowPolygon (minimap_window, points,
            cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
            cColorLight, miniwin.brush_solid, -- brush (solid)
            true, -- close
            false) -- alt fill
      -- north arrow left half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 76, 43, 81, 8, 81, 43)
      WindowPolygon (minimap_window, points,
            cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
            cColorDark, miniwin.brush_solid, -- brush (solid)
            true, -- close
            false) -- alt fill
	 end -- RoomType
	 if v == "north" then
	  cColorLight = GetVariable("cColorLighto") or ColourNameToRGB("lime")
	  cColorDark = GetVariable("cColorDarko") or ColourNameToRGB("green")
	  -- north arrow right half
      points = string.format ("%i,%i,%i,%i,%i,%i", 81, 43, 81, 8, 86, 43)
      WindowPolygon (minimap_window, points,
        cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
        cColorLight, miniwin.brush_solid, -- brush (solid)
        true, -- close
        false) -- alt fill
      -- north arrow left half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 76, 43, 81, 8, 81, 43)
      WindowPolygon (minimap_window, points,
        cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
        cColorDark, miniwin.brush_solid, -- brush (solid)
        true, -- close
        false) -- alt fill
	 end -- v north
    elseif RoomExit[i] == "south" then
	 if RoomType[i] == "C" then
      cColorLight = GetVariable("cColorLightc") or ColourNameToRGB("red")
	  cColorDark = GetVariable("cColorDarkc") or ColourNameToRGB("darkred")
      -- south arrow left half
      points = string.format ("%i,%i,%i,%i,%i,%i", 76, 57, 81, 90, 81, 57)
      WindowPolygon (minimap_window, points,
         cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorLight, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
      -- south arrow right half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 81, 57, 81, 90, 86, 57)
      WindowPolygon (minimap_window, points,
         cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorDark, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
     end -- RoomType
	 if v == "south" then
      cColorLight = GetVariable("cColorLighto") or ColourNameToRGB("lime")
	  cColorDark = GetVariable("cColorDarko") or ColourNameToRGB("green")
      -- south arrow left half
      points = string.format ("%i,%i,%i,%i,%i,%i", 76, 57, 81, 90, 81, 57)
      WindowPolygon (minimap_window, points,
         cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorLight, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
      -- south arrow right half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 81, 57, 81, 90, 86, 57)
      WindowPolygon (minimap_window, points,
         cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorDark, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill	  
     end -- v south
	elseif RoomExit[i] == "east" then
	 if RoomType[i] == "C" then
      cColorLight = GetVariable("cColorLightc") or ColourNameToRGB("red")
	  cColorDark = GetVariable("cColorDarkc") or ColourNameToRGB("darkred")
      -- east arrow bottom half
      points = string.format ("%i,%i,%i,%i,%i,%i", 88, 50, 116, 50, 88, 55)
      WindowPolygon (minimap_window, points,
         cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorLight, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
      -- east arrow top half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 88, 45, 116, 50, 88, 50)
      WindowPolygon (minimap_window, points,
         cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorDark, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
	 end -- RoomType
	 if v == "east" then
      cColorLight = GetVariable("cColorLighto") or ColourNameToRGB("lime")
	  cColorDark = GetVariable("cColorDarko") or ColourNameToRGB("green")
      -- east arrow bottom half
      points = string.format ("%i,%i,%i,%i,%i,%i", 88, 50, 116, 50, 88, 55)
      WindowPolygon (minimap_window, points,
         cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorLight, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
      -- east arrow top half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 88, 45, 116, 50, 88, 50)
      WindowPolygon (minimap_window, points,
         cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorDark, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
     end -- v east	  
    elseif RoomExit[i] == "west" then
	 if RoomType[i] == "C" then
      cColorLight = GetVariable("cColorLightc") or ColourNameToRGB("red")
	  cColorDark = GetVariable("cColorDarkc") or ColourNameToRGB("darkred")
      -- west arrow top half
      points = string.format ("%i,%i,%i,%i,%i,%i", 74, 45, 46, 50, 74, 50)
      WindowPolygon (minimap_window, points,
         cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorLight, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
      -- west arrow bottom half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 74, 50, 46, 50, 74, 55)
      WindowPolygon (minimap_window, points,
         cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorDark, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
	 end -- RoomType
	 if v == "west" then
      cColorLight = GetVariable("cColorLighto") or ColourNameToRGB("lime")
	  cColorDark = GetVariable("cColorDarko") or ColourNameToRGB("green")
      -- west arrow top half
      points = string.format ("%i,%i,%i,%i,%i,%i", 74, 45, 46, 50, 74, 50)
      WindowPolygon (minimap_window, points,
         cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorLight, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
      -- west arrow bottom half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 74, 50, 46, 50, 74, 55)
      WindowPolygon (minimap_window, points,
         cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorDark, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
	 end -- v west
    elseif RoomExit[i] == "up" then
	 if RoomType[i] == "C" then
      cColorLight = GetVariable("cColorLightc") or ColourNameToRGB("red")
      --/ up ladder /--
      -- ladder steps
      WindowLine (minimap_window, 108, 11, 116, 11, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 15, 116, 15, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 19, 116, 19, cColorLight, miniwin.pen_solid, 1)
      -- ladder sides
      WindowLine (minimap_window, 108, 8, 108, 23, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 115, 8, 115, 23, cColorLight, miniwin.pen_solid, 1)
	 end -- RoomType
	 if v == "up" then
	  cColorLight = GetVariable("cColorLighto") or ColourNameToRGB("lime")
      --/ up ladder /--
      -- ladder steps
      WindowLine (minimap_window, 108, 11, 116, 11, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 15, 116, 15, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 19, 116, 19, cColorLight, miniwin.pen_solid, 1)
      -- ladder sides
      WindowLine (minimap_window, 108, 8, 108, 23, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 115, 8, 115, 23, cColorLight, miniwin.pen_solid, 1)
   	 end -- v up
    elseif RoomExit[i] == "down" then
	 if RoomType[i] == "C" then
	  cColorLight = GetVariable("cColorLightc") or ColourNameToRGB("lime")
      --/ down ladder /--
      -- ladder steps
      WindowLine (minimap_window, 108, 78, 116, 78, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 82, 116, 82, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 86, 116, 86, cColorLight, miniwin.pen_solid, 1)
      -- ladder sides
      WindowLine (minimap_window, 108, 75, 108, 90, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 115, 75, 115, 90, cColorLight, miniwin.pen_solid, 1)
	 end -- RoomType
	 if v == "down" then
	  cColorLight = GetVariable("cColorLighto") or ColourNameToRGB("lime")
      --/ down ladder /--
      -- ladder steps
      WindowLine (minimap_window, 108, 78, 116, 78, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 82, 116, 82, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 86, 116, 86, cColorLight, miniwin.pen_solid, 1)
      -- ladder sides
      WindowLine (minimap_window, 108, 75, 108, 90, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 115, 75, 115, 90, cColorLight, miniwin.pen_solid, 1)
     end -- v down	  
    end -- RoomExit north
   end -- for k v
  end -- for i
 end -- if ExitCount and curRoom_exits
end -- draw_minimap

function draw_energy_bars ()
 -- HEALTH
 current_health = msdp["HEALTH"]
 max_health = msdp["HEALTH_MAX"]
 -- initialise with empty bars
 if current_health == nil then
  current_health = 0
  max_health = 0
 end -- if
 if current_health ~= nil and max_health ~= nil then
  type_bar = "Health"
  colour = GetVariable("health_color") or 0x0000CC
  colour2 = GetVariable("health_colorB") or 0x000033
  draw_energy_bar(type_bar, colour, colour2, health_window, current_health, max_health)
 end -- if
 -- MANA
 current_mana = msdp["MANA"]
 max_mana = msdp["MANA_MAX"]
 -- initialise with empty bars
 if current_mana == nil then
  current_mana = 0
  max_mana = 0
 end -- if
 if current_mana ~= nil and max_mana ~= nil then
  type_bar = "Mana"
  colour = GetVariable("mana_color") or 0xCC0000
  colour2 = GetVariable("mana_colorB") or 0x330000
  draw_energy_bar(type_bar, colour, colour2, mana_window, current_mana, max_mana)
 end -- if
 -- MOVEMENT
 current_movement = msdp["MOVEMENT"]
 max_movement = msdp["MOVEMENT_MAX"]
 -- initialise with empty bars
 if current_movement == nil then
  current_movement = 0
  max_movement = 0
 end -- if
 if current_movement ~= nil and max_movement ~= nil then
  type_bar = "Move"
  colour = GetVariable("move_color") or 0x00CC00
  colour2 = GetVariable("move_colorB") or 0x003300
  draw_energy_bar(type_bar, colour, colour2, movement_window, current_movement, max_movement)
 end -- if
 -- EXP
 current_exp = msdp["OPPONENT_HEALTH"]
 max_exp = 100
 -- initialise with empty bars
 if current_exp == nil then
  current_exp = 0
  max_exp = 0
 end -- if
 if current_exp ~= nil and max_exp ~= nil then
  type_bar = "Enemy"
  colour = GetVariable("enemy_color") or 0x00CCCC
  colour2 = GetVariable("enemy_colorB") or 0x003333
  draw_energy_bar(type_bar, colour, colour2, exp_window, current_exp, max_exp)
 end -- if
end -- draw_energy_bars

function draw_energy_bar (type_bar, colour, colour2, window, current_value, max_value)
 -- convert the strings to numbers
 current = tonumber(current_value)
 max = tonumber(max_value)
 -- Calculate health
 if current < 0 then
  current = 0
 elseif current > max then
  current = max
 end -- if
 custom_bar_color_highlight_top = GetVariable("custom_bar_color_highlight_top")
 custom_bar_color_highlight_bottom = GetVariable("custom_bar_color_highlight_bottom")  
 if custom_bar_color_highlight_top == nil then
  custom_bar_color_highlight_top = ColourNameToRGB("black")
  SetVariable("prompt_checked", "default")
 end -- custom color check   
 if custom_bar_color_highlight_bottom == nil then
  custom_bar_color_highlight_bottom = ColourNameToRGB("black")
 end -- custom color check  
 -- clear the bars
 WindowGradient (window, 0, -1, 100, 10, custom_bar_color_highlight_top, colour2, 2)
 WindowGradient (window, 0, 10, 100, 21, colour2, custom_bar_color_highlight_bottom, 2)
 -- calculate the filled part
 if max > 0 then
  filled = current * 100 / max
 else -- avoid division by zero
  filled = 0
 end -- if
 -- redraw the bars
 if current > 0 then
  WindowGradient (window, 0, -1, filled, 10, custom_bar_color_highlight_top, colour, 2)
  WindowGradient (window, 0, 10, filled, 21, colour, custom_bar_color_highlight_bottom, 2)
 end -- if
 -- write the information inside
 colour_cust = GetVariable("bar_text_color") or ColourNameToRGB("white")
 outlined_text (colour_cust, window, type_bar, 9, 3, 3, 0)
 outlined_text (colour_cust, window, math.ceil(filled)..'%', 9, 55, 3, 0)
end -- draw_energy_bar

function init_affects (data)
 index = 0
 startpos = 1
 max = 0
 for i=startpos,string.len(data),1 do
  if string.byte(data,i) == 1 or i == string.len(data) then
   if string.byte(data,i) == 1 then
    endpos = 1
   else
    endpos = 0
   end -- if
   variable = string.sub(data,startpos,i-endpos)
   startpos = i+1
   index = index + 1
   pos1 = string.find(variable, "\002")
   if pos1 ~= nil then
    AffectName[index] = string.sub(variable, 1, pos1-1)
    AffectDuration[index] = string.sub(variable, pos1+1)
   end -- if
  end -- if
 end -- for
 -- AffectMax is the highest EVER number - we need to keep track of all created icons
 if index < AffectMax then
  for i=index+1,AffectMax,1 do
   AffectName[i] = nil
   win = "affect_window_"..i
   WindowShow (win, false)
  end -- for
  AffectMax = index
 elseif index > AffectMax then
  AffectMax = index
 end -- if
end -- function

function list_affects ()
 print(affects)
end -- list_affects

function build_avatar_window ()
 WindowCreate (avatar_window,   -- window ID
    AVATAR_LEFT_POSITION,   -- left
    85,     -- top
    117,-- width
    117, -- depth
    12,         -- center it (ignored anyway) 
    6,          -- draw underneath (1) + absolute location (2)
    0x000000)  -- background colour
 -- load the avatar image
 if GetVariable("avatar_checked") == "one" then
  WindowLoadImage (avatar_window, "avatar", GetInfo (66) .. "Generic/avatars/Default.png")
 elseif GetVariable("avatar_checked") == "browse" then
  WindowLoadImage (avatar_window, "avatar", GetVariable("avatar_filename"))
 else
  WindowLoadImage (avatar_window, "avatar", GetInfo (66) .. "Generic/avatars/Default.png")
 end -- avatar check
 WindowDrawImage (avatar_window, "avatar", 0, 0, 117, 117, 2)  -- draw it  
 WindowShow (avatar_window, true)
end -- function build_avatar_window

function draw_affects ()
 affects = msdp["AFFECTS"]
 if affects == nil or affects == "None" then
  for i=1,AffectMax,1 do
   WindowShow ("affect_window_"..i, false)
  end -- for
  AffectMax = 0
  return
 end -- if
 init_affects (affects)
 offset_x = 0
 offset_y = 0
 for i=1,AffectMax,1 do
  if AffectName[i] ~= nil then
   win = "affect_window_"..i
   affect = "affect_"..i
   -- draw the icons left to right, top to bottom
   if i > 1 then
    if offset_x == 0 then
     offset_x = 36
    elseif offset_x == 36 then
     offset_x = 72
    elseif offset_x == 72 then
     offset_x = 108
    else
     offset_x = 0
     offset_y = offset_y + 36      
    end -- if
   end -- if
   colour = colourWhite
   -- make a miniwindow under the text
   WindowCreate (win,   -- window ID
        SPELLS_LEFT_POSITION+offset_x,  -- left
        383+offset_y, -- top
        34,           -- width
        34,           -- depth
        12,           -- center it (ignored anyway) 
        2,            -- draw underneath (1) + absolute location (2)
        colourBlack)      -- background colour
    -- load the icon
    if WindowLoadImage (win, affect, GetInfo (66) .. "Generic/affects/" .. AffectName[i] .. ".png") == eOK then
     WindowDrawImage (win, affect, 1, 1, 33, 33, 2)  -- draw the icon
    elseif WindowLoadImage (win, affect, GetInfo (66) .. "Generic/affects/default.png") == eOK then
     WindowDrawImage (win, affect, 1, 1, 33, 33, 2)  -- draw the default icon instead
    else -- even the default spell icon is missing
     Note( "Missing spell icons.")
     return
    end -- if
    -- create the pie-shape - based on an example by Nick Gammon
    timer = tonumber(AffectDuration[i])
    -- for drawing cooldowns (window not visible)
    backgroundColour = ColourNameToRGB ("black")
    tempwin = GetPluginID() .. ":temp"
    WindowCreate (tempwin, 
        SPELLSCOOLDOWN_LEFT_POSITION, 3,   -- left, top 
        28,     -- width
        28,     -- height
        12,     -- position mode
        0,      -- flags
        backgroundColour) 
   if timer > 1 and timer < 10 then
    percent = timer / 10.0
    -- calculate pie end point
    endy = (math.cos(math.rad (percent * 360 + 90)) * 28) + 14
    endx = (-1 * math.sin(math.rad (percent * 360 + 90)) * 28) + 14
    -- clear temporary window
    WindowRectOp (tempwin, 2, 0, 0, 0, 0, 0xFFFFFF)  -- fill with white
    -- draw the pie showing amount of cooldown
    WindowCircleOp (tempwin, 5, -10, -10, 38, 38,   -- pie
        0xFFFFFF, 5, 0,   -- no pen
        0x000000, 0,      -- solid brush, black
        14, 0,            -- from 12 o'clock position
        endy, endx)
    -- turn pie shape into an image
    WindowImageFromWindow(win, "mask", tempwin)
    -- blend in (darken mode) with 100% opacity
    WindowBlendImage(win, "mask", 
        3, 3, 31, 31,  -- rectangle
        1, 0.5)       -- mode and opacity
   elseif timer > 0 and timer < 2 then
    percent = timer / 10.0
    -- calculate pie end point
    endy = (math.cos(math.rad (percent * 360 + 90)) * 28) + 14
    endx = (-1 * math.sin(math.rad (percent * 360 + 90)) * 28) + 14
    -- clear temporary window
    WindowRectOp (tempwin, 2, 0, 0, 0, 0, 0x0000FF)  -- fill with red
    -- draw the pie showing amount of cooldown
    WindowCircleOp (tempwin, 5, -10, -10, 38, 38,   -- pie
        0x000000, 5, 0,   -- no pen
        0x000000, 0,      -- solid brush, black
        14, 0,            -- from 12 o'clock position
        endy, endx)
    -- turn pie shape into an image
    WindowImageFromWindow(win, "mask", tempwin)
    -- blend in (darken mode) with 100% opacity
    WindowBlendImage(win, "mask", 
        3, 3, 31, 31,  -- rectangle
        1, 0.5)       -- mode and opacity
   elseif timer == 0 then
    percent = timer + 60
    -- calculate pie end point
    endy = (math.cos(math.rad (percent * 360 + 90)) * 28) + 14
    endx = (-1 * math.sin(math.rad (percent * 360 + 90)) * 28) + 14
    -- clear temporary window
    WindowRectOp (tempwin, 2, 0, 0, 0, 0, 0x0000FF)  -- fill with red
    -- draw the pie showing amount of cooldown
    WindowCircleOp (tempwin, 5, -10, -10, 38, 38,   -- pie
        0x000000, 5, 0,   -- no pen
        0x000000, 0,      -- solid brush, black
        14, 0,            -- from 12 o'clock position
        endy, endx)
    -- turn pie shape into an image
    WindowImageFromWindow(win, "mask", tempwin)
    -- blend in (darken mode) with 100% opacity
    WindowBlendImage(win, "mask", 
        3, 3, 31, 31,  -- rectangle
        1, 0.5)       -- mode and opacity
   end -- if
   if tonumber(AffectDuration[i]) < 10 then
    offset = 9
   elseif tonumber(AffectDuration[i]) < 100 then
    offset = 5
   else -- two digits
    offset = 1
   end -- if
   if tonumber(AffectDuration[i]) < 0 then
    -- draw an infinity symbol
    outlined_text (colour, win, "O", 6, 4, 21, 0)
    outlined_text (colour, win, "O", 6, 9, 21, 0)
    -- go over the first 'O' again, removing the outline from the second 'O'
    WindowFont(win,'f','Times New Roman',6,1,0,0,0)
    WindowText(win,'f',"O",4,21,0,0,colour,0)
   else -- write the duration
    outlined_text (colour, win, AffectDuration[i], 6, 4, 21, 0)
   end -- if
   -- show the window
   WindowShow (win, true)
   -- create a hotspot over the timer
   WindowAddHotspot(win, "hs_affect_"..i, 0, 0, 34, 34, "", "", "", "", "MouseUp_aff", AffectName[i], 1, 0)
  end -- if
 end -- for
end -- draw_affects

function MouseUp_aff(flags, hotspot_id)
 print("Sorry! Clicking the icon does nothing for now..")
end -- function MouseUp_aff

function outlined_text (colour, window, text, size, x, y, centre_width)
 outlineColour = colourBlack
 -- write the information inside
 WindowFont(window,'f','Verdana',size,1,0,0,0)
 if centre_width > 0 then
  width = WindowTextWidth (window, 'f', text)
  x = x + ((centre_width-width) / 2)
 end -- if
 -- smear black text around the location to create an outline
 WindowText(window,'f',text,x+1,y+1,0,0,outlineColour,0)
 WindowText(window,'f',text,x+1,y,0,0,outlineColour,0)
 WindowText(window,'f',text,x+1,y-1,0,0,outlineColour,0)
 WindowText(window,'f',text,x,y+1,y,0,outlineColour,0)
 WindowText(window,'f',text,x,y-1,y,0,outlineColour,0)
 WindowText(window,'f',text,x-1,y+1,0,0,outlineColour,0)
 WindowText(window,'f',text,x-1,y,0,0,outlineColour,0)
 WindowText(window,'f',text,x-1,y-1,0,0,outlineColour,0)
 -- display the text
 WindowText(window,'f',text,x,y,0,0,colour,0)
 return width
end -- function outlined_text

function main_text_area () 
 -- tell the client where to draw the text
 if GetVariable("bgColour") ~= nil then
  TextRectangle(left+4,  
    top,   
    right+197,
    bottom - 4,  
    0,  -- BorderOffset, 
    colourWhite,    -- BorderColour, 
    0,  -- BorderWidth, 
    tonumber(GetVariable ("bgColour")),  -- OutsideFillColour, 
    0) -- OutsideFillStyle (fine hatch)
 else
  TextRectangle(left+4,  
    top,   
    right+197,
    bottom - 4,  
    0,  -- BorderOffset, 
    colourWhite,    -- BorderColour, 
    0,  -- BorderWidth, 
    colourWhite,  -- OutsideFillColour, 
    8) -- OutsideFillStyle (fine hatch)
 end -- bgColour
end -- function main_text_area

function create_titlebar ()
 -- make a miniwindow to the left of the text
 WindowCreate (titlebar_window,   -- window ID
    TITLEBAR_LEFT_POSITION,   -- left
    3,   -- top
    161, -- width
    85, -- depth
    12,  -- center it (ignored anyway) 
    6,          -- draw underneath (1) + absolute location (2) + transparent (4)
    0x000000)  -- background colour
 DrawThemed3DRect(titlebar_window, 65, 0, 104, 13)
 outlined_text (colourWhite, titlebar_window, "settings", 5, 68, 2, 0)
 WindowAddHotspot(titlebar_window, "bgbutton", 65, 0, 104, 13, 
    "", "", "MouseDown_button", "", "MouseUp_button", "", 
    0, 0)
 -- load the titlebar image
 WindowLoadImage (titlebar_window, "titlebar", GetInfo (66) .. "Generic/layout/Generic_title_small.png")
 -- draw it
 WindowDrawImage (titlebar_window, "titlebar", 57, 25, 0, 0, 3)  -- draw it 
if CHAT_VISIBILITY == false then 
 WindowRectOp(titlebar_window, miniwin.rect_draw_edge, 5, 60, 64, 76, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
 outlined_text (colourTFC, titlebar_window, "Chat Window", 5, 8, 62, 0)
else
 DrawThemed3DRect(titlebar_window, 5, 60, 64, 76)
 outlined_text (colourWhite, titlebar_window, "Chat Window", 5, 8, 62, 0)
end -- CHAT_VISIBILITY
 WindowAddHotspot(titlebar_window, "chbutton", 5, 60, 64, 76, 
    "", "", "MouseDown_ch", "", "MouseUp_ch", "", 
    0, 0)
if PROMPT_BARS_VISIBILITY == false then
 WindowRectOp(titlebar_window, miniwin.rect_draw_edge, 107, 60, 161, 76, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
 outlined_text (colourTFC, titlebar_window, "Prompt Bars", 5, 110, 62, 0)
else
 DrawThemed3DRect(titlebar_window, 107, 60, 161, 76)
 outlined_text (colourWhite, titlebar_window, "Prompt Bars", 5, 110, 62, 0)
end -- PROMPT_BARS_VISIBILITY
 WindowAddHotspot(titlebar_window, "barsbutton", 107, 60, 161, 76, 
    "", "", "MouseDown_bars", "", "MouseUp_bars", "", 
    0, 0)
 -- show the window
 WindowShow (titlebar_window, true)
end -- function create_titlebar

function create_minimap_window ()
 -- make a miniwindow for the map
 WindowCreate (minimap_window,   -- window ID
    MINIMAP_LEFT_POSITION,         -- left
    top_map+167,    -- top
    120,        -- width
    120,        -- depth
    12,         -- center it (ignored anyway) 
    6,          -- draw underneath (1) + absolute location (2)
    0x000000)  -- background colour
 cColorLight = GetVariable("cColorLight") or ColourNameToRGB("white")
 cColorDark = GetVariable("cColorDark") or ColourNameToRGB("dimgray")
 cColorLighto = GetVariable("cColorLighto") or ColourNameToRGB("lime")
 cColorDarko = GetVariable("cColorDarko") or ColourNameToRGB("green")
 cColorLightc = GetVariable("cColorLightc") or ColourNameToRGB("red")
 cColorDarkc = GetVariable("cColorDarkc") or ColourNameToRGB("darkred")
 outlined_text (cColorLight, minimap_window, "*", 10, 77, 44, 0)
 WindowCircleOp (minimap_window, 4, 75, 44, 88, 57,
    cColorLight, 0, 2, ColourNameToRGB("cyan"), 1, 
    0, 0, 0, 0) 
 -- north arrow right half
 points = string.format ("%i,%i,%i,%i,%i,%i", 81, 43, 81, 8, 86, 43)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- north arrow left half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 76, 43, 81, 8, 81, 43)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- south arrow left half
 points = string.format ("%i,%i,%i,%i,%i,%i", 76, 57, 81, 90, 81, 57)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- south arrow right half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 81, 57, 81, 90, 86, 57)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- east arrow bottom half
 points = string.format ("%i,%i,%i,%i,%i,%i", 88, 50, 116, 50, 88, 55)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- east arrow top half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 88, 45, 116, 50, 88, 50)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- west arrow top half
 points = string.format ("%i,%i,%i,%i,%i,%i", 74, 45, 46, 50, 74, 50)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- west arrow bottom half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 74, 50, 46, 50, 74, 55)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 --/ up ladder /--
 -- ladder steps
 WindowLine (minimap_window, 108, 11, 116, 11, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 15, 116, 15, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 19, 116, 19, cColorLight, miniwin.pen_solid, 1)
 -- ladder sides
 WindowLine (minimap_window, 108, 8, 108, 23, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 115, 8, 115, 23, cColorLight, miniwin.pen_solid, 1)
 --/ down ladder /--
 -- ladder steps
 WindowLine (minimap_window, 108, 78, 116, 78, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 82, 116, 82, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 86, 116, 86, cColorLight, miniwin.pen_solid, 1)
 -- ladder sides
 WindowLine (minimap_window, 108, 75, 108, 90, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 115, 75, 115, 90, cColorLight, miniwin.pen_solid, 1)
 WindowShow (minimap_window, true)
end -- function create_minimap_window

function create_sidebar_button ()
 -- make a miniwindow to the left of the text
 WindowCreate (sidebar_button_window,   -- window ID
    SIDEBAR_LEFT_POSITION,   -- left
    225,   -- top
    23, -- width
    55, -- depth
    12,  -- center it (ignored anyway) 
    6,          -- draw underneath (1) + absolute location (2) + transparent (4)
    0x000000)  -- background colour
 if which_sidebar_image then
  WindowLoadImage (sidebar_button_window, "open_button", GetInfo (66) .. "Generic/layout/open.png")
  WindowDrawImage (sidebar_button_window, "open_button", 0, 0, 0, 0, 1)  -- draw it
  WindowAddHotspot(sidebar_button_window, "open_it", 0, 0, 23, 55, 
    "", "", "MouseDown_sidebar_button_op", "", "MouseUp_sidebar_button_op", "", 
    1, 0)
 else
  WindowLoadImage (sidebar_button_window, "close_button", GetInfo (66) .. "Generic/layout/close.png")
  WindowDrawImage (sidebar_button_window, "close_button", 0, 0, 0, 0, 1)  -- draw it
  WindowAddHotspot(sidebar_button_window, "close_it", 0, 0, 23, 55, 
    "", "", "MouseDown_sidebar_button", "", "MouseUp_sidebar_button", "", 
    1, 0)
 end -- which_sidebar_image
 WindowShow (sidebar_button_window, true)
end -- function create_sidebar_button

function MouseUp_sidebar_button(flags, hotspot_id)
 sidebar_closing = true
 while sidebar_closing do
  if SIDEBAR_LEFT_POSITION < 1 then
   sidebar_closing = false
   which_sidebar_image = true
   create_sidebar_button ()
   WindowShow( titlebar_window, false )
  else
   AVATAR_LEFT_POSITION = AVATAR_LEFT_POSITION - 10
   build_avatar_window ()
   SIDEBAR_LEFT_POSITION = SIDEBAR_LEFT_POSITION - 10
   create_sidebar_button ()
   TITLEBAR_LEFT_POSITION = TITLEBAR_LEFT_POSITION - 10
   create_titlebar ()
   MINIMAP_LEFT_POSITION = MINIMAP_LEFT_POSITION - 10
   create_minimap_window ()   
   SPELLS_LEFT_POSITION = SPELLS_LEFT_POSITION - 10
   SPELLSCOOLDOWN_LEFT_POSITION = SPELLSCOOLDOWN_LEFT_POSITION - 10
   draw_affects ()
   left = left - 10
   main_text_area ()
   ENEM_BAR_LEFT_POSITION = ENEM_BAR_LEFT_POSITION - 10
   HEALTH_BAR_LEFT_POSITION = HEALTH_BAR_LEFT_POSITION - 10
   MANA_BAR_LEFT_POSITION = MANA_BAR_LEFT_POSITION - 10
   MOVE_BAR_LEFT_POSITION = MOVE_BAR_LEFT_POSITION - 10
   build_prompt_bars ()
   draw_energy_bars ()
   CHATS_LEFT_POSITION = CHATS_LEFT_POSITION - 10
   WINDOW_WIDTH = WINDOW_WIDTH + 10
   init(true)
   build_chatLine ()
   build_promptLine ()
   if CHAT_HIDDEN ~= false then
    WindowShow( Win, false )
   end -- chat_closing
   Repaint()
  end -- SIDEBAR_LEFT_POSITION 
 end  -- while loop sidebar_closing 
end -- function MouseUp_sidebar_button

function MouseUp_sidebar_button_op(flags, hotspot_id)
 sidebar_closing = true
 WindowShow( titlebar_window, true )
 while sidebar_closing do
  if SIDEBAR_LEFT_POSITION > 155 then
   sidebar_closing = false
   which_sidebar_image = false
   create_sidebar_button ()
   build_avatar_window ()
  else
   AVATAR_LEFT_POSITION = AVATAR_LEFT_POSITION + 10
   build_avatar_window ()
   SIDEBAR_LEFT_POSITION = SIDEBAR_LEFT_POSITION + 10
   create_sidebar_button ()
   TITLEBAR_LEFT_POSITION = TITLEBAR_LEFT_POSITION + 10
   create_titlebar ()
   MINIMAP_LEFT_POSITION = MINIMAP_LEFT_POSITION + 10
   create_minimap_window ()  
   SPELLS_LEFT_POSITION = SPELLS_LEFT_POSITION + 10
   SPELLSCOOLDOWN_LEFT_POSITION = SPELLSCOOLDOWN_LEFT_POSITION + 10
   draw_affects ()
   left = left + 10
   main_text_area ()
   ENEM_BAR_LEFT_POSITION = ENEM_BAR_LEFT_POSITION + 10
   HEALTH_BAR_LEFT_POSITION = HEALTH_BAR_LEFT_POSITION + 10
   MANA_BAR_LEFT_POSITION = MANA_BAR_LEFT_POSITION + 10
   MOVE_BAR_LEFT_POSITION = MOVE_BAR_LEFT_POSITION + 10
   build_prompt_bars ()
   draw_energy_bars ()
   CHATS_LEFT_POSITION = CHATS_LEFT_POSITION + 10
   WINDOW_WIDTH = WINDOW_WIDTH - 10
   init(true)
   build_chatLine ()
   build_promptLine ()
   if CHAT_HIDDEN ~= false then
    WindowShow( Win, false )
   end -- chat_closing
   Repaint()
  end -- SIDEBAR_LEFT_POSITION 
 end  -- while
end -- function MouseUp_sidebar_button_op

function MouseUp_ch()
 CHAT_VISIBILITY = not CHAT_VISIBILITY
 if CHAT_VISIBILITY == true then
  DrawThemed3DRect(titlebar_window, 5, 60, 64, 76)
  outlined_text (colourWhite, titlebar_window, "Chat Window", 5, 8, 62, 0)
 else
  WindowRectOp(titlebar_window, miniwin.rect_draw_edge, 5, 60, 64, 76, 
    miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
  outlined_text (colourTFC, titlebar_window, "Chat Window", 5, 8, 62, 0)
 end -- CHAT_VISIBILITY
 Redraw()
 if CHAT_VISIBILITY == true then
  chat_closing = true
  while chat_closing do
   if CHATS_TOP_POSITION < -75 then
    chat_closing = false
    WindowShow( Win, false )
    CHAT_HIDDEN = true
   else
    CHATS_TOP_POSITION = CHATS_TOP_POSITION - 5
    init(true)
    top = top - 5
    main_text_area ()
    sepOne_top = sepOne_top - 5
    build_chatLine ()
    Repaint()
   end -- CHATS_TOP_POSITION 
  end  -- while loop sidebar_closing
 end -- CHAT_VISIBILITY
 if CHAT_VISIBILITY == false then
  chat_closing = true
  WindowShow( Win, true )
  while chat_closing do
   if CHATS_TOP_POSITION > -3 then
    chat_closing = false
    CHAT_HIDDEN = false
   else
    CHATS_TOP_POSITION = CHATS_TOP_POSITION + 5
    init(true)
    top = top + 5
    main_text_area ()
    sepOne_top = sepOne_top + 5
    build_chatLine ()
    Repaint()
   end -- CHATS_TOP_POSITION 
  end  -- while loop sidebar_closing
 end -- CHAT_VISIBILITY
end -- function MouseUp_ch

function MouseUp_bars()
 PROMPT_BARS_VISIBILITY = not PROMPT_BARS_VISIBILITY
 if PROMPT_BARS_VISIBILITY == true then
  DrawThemed3DRect(titlebar_window, 107, 60, 161, 76)
  outlined_text (colourWhite, titlebar_window, "Prompt Bars", 5, 110, 62, 0)
 else
  WindowRectOp(titlebar_window, miniwin.rect_draw_edge, 107, 60, 161, 76, 
    miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
  outlined_text (colourTFC, titlebar_window, "Prompt Bars", 5, 110, 62, 0)
 end -- PROMPT_BARS_VISIBILITY
 Redraw()
 bars_orig = GetInfo (280) + 2
 if PROMPT_BARS_VISIBILITY == true then
  bars_closing = true
  while bars_closing do
   if bars_bottom > bars_orig then
    bars_closing = false
    main_text_area ()
   else
    bars_bottom = bars_bottom + 3
    build_prompt_bars ()
    draw_energy_bars ()
    bottom = bottom + 3
    main_text_area ()
    build_promptLine ()
    Repaint()
   end -- bars_bottom 
  end  -- while loop bars_closing
 end -- PROMPT_BARS_VISIBILITY
 bars_orig = GetInfo (280) - 17
 if PROMPT_BARS_VISIBILITY == false then
  bars_closing = true
  while bars_closing do
   if bars_bottom < bars_orig then
    bars_closing = false
    main_text_area ()
   else
    bars_bottom = bars_bottom - 3
    build_prompt_bars ()
    draw_energy_bars ()
    bottom = bottom - 3
    main_text_area ()
    build_promptLine ()
    Repaint()
   end -- bars_bottom 
  end  -- while loop bars_closing
 end -- PROMPT_BARS_VISIBILITY
end -- function MouseUp_bars

function build_chatLine ()
 WindowCreate(line_sepOne, CHATS_LEFT_POSITION, sepOne_top, WINDOW_WIDTH, 4, 4, 6, 0x000000)
 WindowLine (line_sepOne, 0, 2, WINDOW_WIDTH, 2, ColourNameToRGB ("white"), miniwin.pen_solid, 1)
 WindowShow( line_sepOne, true)
end -- function build_chatLine

function build_promptLine ()
 WindowCreate(line_sepTwo, ENEM_BAR_LEFT_POSITION, bars_bottom - 4, 615, 1, 4, 6, 0x000000)
 WindowLine (line_sepTwo, 0, 0, 615, 0, ColourNameToRGB ("white"), miniwin.pen_solid, 1)
 WindowShow( line_sepTwo, true)
end -- function build_promptLine

function OnPluginTelnetRequest (type_msdp, data)
 if type_msdp == MSDP and data == "WILL" then
  using_msdp = true
  return true
 elseif type_msdp == MSDP and data == "SENT_DO" then
  -- IAC SB MSDP response IAC SE 
  SendPkt ("\255\250\69\1REPORT\2CHARACTER_NAME\2RACE\2CLASS\2HEALTH_MAX\2HEALTH\2MANA_MAX\2MANA\2MOVEMENT_MAX\2MOVEMENT\2EXPERIENCE_TNL\2BLOOD\2LEVEL\2HITROLL\2DAMROLL\2AC\2STR\2INT\2WIS\2DEX\2CON\2STR_PERM\2INT_PERM\2WIS_PERM\2DEX_PERM\2CON_PERM\2ALIGNMENT\2AFFECTS\2WIMPY\2OPPONENT_HEALTH\2ROOM_EXITS\2\255\240")
  return true
 else -- another protocol
  return false
 end -- if
end -- function OnPluginTelnetRequest

function OnPluginTelnetSubnegotiation (type_msdp, data)
 if type_msdp == MSDP then
  endpos = string.len(data)
  bName = false
  bValue = false
  bTable = false
  bIgnore = false
  variable = nil
  value = nil
  --Note('Raw data: ['..data..']')
  for i=1,endpos,1 do
   if string.byte(data,i) == 1 and bTable == false then
    if variable ~= nil and value ~= nil then
     StoreVariable(variable, value)
     variable = nil
     value = nil
    end -- if
    bName = true
    bValue = false
   elseif string.byte(data,i) == 2 and bTable == false then
    if value ~= nil then
     value = value.." "
    end -- if
    bName = false
    bValue = true
   elseif string.byte(data,i) == 3 then
    bTable = true
    bIgnore = true
   elseif string.byte(data,i) == 4 then
    bTable = false
   elseif bIgnore == true then
    bIgnore = false -- Just ignore one character.
   elseif bName == true then
    if variable == nil then
     variable = ""
    end -- if
    variable = variable..string.sub(data,i,i)
   elseif bValue == true then
    if value == nil then
     value = ""
    end -- if
    value = value..string.sub(data,i,i)
   end -- if
  end -- for
  if variable ~= nil then
   if value == nil then
    value = ""
   end -- if
   StoreVariable(variable, value)
  end -- if
  --  redraw the map
  draw_minimap ()
  -- redraw the energy bars
  draw_energy_bars ()
  -- redraw the spell affect icons
  draw_affects ()
  Redraw()
 end -- if
end -- function OnPluginTelnetSubnegotiation

function StoreVariable (MSDP_var, MSDP_val)
 --Note('Variable: '..MSDP_var..' = ['..MSDP_val..']')
 if MSDP_var == "SERVER_ID" then
  create_layout ()
  SendPkt ("\255\250\69\1PLUGIN_ID\2Generic MUSHclient plugin (version 1.1)\255\240")
 else -- store the variable
  msdp[MSDP_var] = MSDP_val
 end -- if
end -- function StoreVariable

function update_plugin()
 raw = "https://raw.githubusercontent.com/TFC-Fumino/MUSHclient_Plugins/master/MSDP-Sidebar/Generic/worlds/plugins/TFC_Msdp_Sidebar.xml"
 async_ok, async = pcall (require, "async")
 if async_ok then
  plugin_page = async.doAsyncRemoteRequest(raw, raw_get, "HTTPS")
 else
  ColourNote("white", "blue", "Error on plugin update!")
 end -- async
end -- function update_plugin

function raw_get(retval, page, status, headers, full_status, request_url)
 if status == 200 then
  raw_version = tonumber(string.match(page, '%s%s%s+version="([0-9%.]+)"'))
 end -- status
 if raw_version == PLUGIN_VERSION then
  ColourNote("white", "blue", PLUGIN_NAME .. " is up-to-date.")
  ColourNote("white", "blue", "Please reconnect to The Final Challenge to enable MSDP data.")
 elseif raw_version > PLUGIN_VERSION then
  ColourNote("white", "blue", "An update has been found!")
  ColourNote("white", "blue", "Updating from version " .. 
  PLUGIN_VERSION .. " to " .. raw_version .. ". Do not touch anything!")
  SetVariable("plugin_updating", "true")
  local file = io.open(GetPluginInfo(GetPluginID(), 6), "w")
  file:write(page)
  file:close()
 else
  ColourNote("white", "blue", "Something has went wrong..")
 end -- raw_version
 raw_version = nil
 if "" == GetAlphaOption("script_prefix") then
  SetAlphaOption("script_prefix", "\\\\\\")
 end
 if GetVariable("plugin_updating") == "true" then
  Execute(GetAlphaOption("script_prefix") .. "DoAfterSpecial(1, \"ReloadPlugin('" .. GetPluginID() .. "')\", sendto.script)")
  ColourNote("white", "blue", PLUGIN_NAME .. " has been updated to the latest version.")
  ColourNote("white", "blue", "Plugin is now reloading.")
  ColourNote("white", "blue", "Please save the world and re-open it to see changes.")
  SetVariable("plugin_updating", "false")
 end 
end -- function raw_get

function dc_log (name, line, wildcards, styles)
 if GetVariable("starLog_tsType") ~= nil then
  if GetVariable("starLog_remPrompt") == "true" then
   if string.find(line, "<") and string.find(line, ">") then
   else
    AppendToNotepad ("Star_Log_Test", os.date(GetVariable("starLog_tsType")) .. line)
	AppendToNotepad ("Star_Log_Test", "\r\n")
   end -- line string match
  else
   AppendToNotepad ("Star_Log_Test", os.date(GetVariable("starLog_tsType")) .. line)
   AppendToNotepad ("Star_Log_Test", "\r\n")
  end -- starLog_remPrompt
 else
  if GetVariable("starLog_remPrompt") == "true" then
   if string.find(line, "<") and string.find(line, ">") then
   else
    AppendToNotepad ("Star_Log_Test", line)
	AppendToNotepad ("Star_Log_Test", "\r\n")
   end -- line string match
  else
   AppendToNotepad ("Star_Log_Test", line)
   AppendToNotepad ("Star_Log_Test", "\r\n")
  end -- starLog_remPrompt
 end -- starLog_tsType
 Activate()
end  -- function dc_log

function starLog_prev ()
 local line, total_lines
 total_lines = GetLinesInBufferCount ()
 for line = 1, total_lines do
  if GetVariable("starLog_tsType") ~= nil then
   if GetVariable("starLog_remPrompt") == "true" then
    if string.find(GetLineInfo (line, 1), "<") and string.find(GetLineInfo (line, 1), ">") then
    else
     AppendToNotepad ("Star_Log_Test", os.date(GetVariable("starLog_tsType"), GetLineInfo(line,9)) .. GetLineInfo (line, 1))
     AppendToNotepad ("Star_Log_Test", "\r\n")
	end -- line string match
   else
    AppendToNotepad ("Star_Log_Test", os.date(GetVariable("starLog_tsType"), GetLineInfo(line,9)) .. GetLineInfo (line, 1))
    AppendToNotepad ("Star_Log_Test", "\r\n")
   end -- starLog_remPrompt
  else
   if GetVariable("starLog_remPrompt") == "true" then
    if string.find(GetLineInfo (line, 1), "<") and string.find(GetLineInfo (line, 1), ">") then
    else
     AppendToNotepad ("Star_Log_Test", GetLineInfo (line, 1))
	 AppendToNotepad ("Star_Log_Test", "\r\n")
    end -- line string match
   else
    AppendToNotepad ("Star_Log_Test", GetLineInfo (line, 1))
	AppendToNotepad ("Star_Log_Test", "\r\n")
   end -- starLog_remPrompt
  end -- starLog_tsType 
 end -- for
 Activate()
end -- function starLog_prev

function alias_star_logger_rec ()
  if GetVariable("starLog_isRec") == nil then
   starLog_isRec = false
   SetVariable("starLog_isRec", "false")
  end -- starLog_isRec  
  starLog_isRec = not starLog_isRec  
  if starLog_isRec then
   SetVariable("starLog_isRec", "true")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Activated")
   if GetVariable("starLog_recPrev") == "true" then
    starLog_prev ()
   end -- starLog_recPrev  
   EnableTrigger("starlogger", true)
  else
   EnableTrigger("starlogger", false)
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "red", "", "Deactivated")
   if GetVariable("starlog_folder") ~= nil then
    if GetVariable("starLog_fnTs") ~= nil then
     SaveNotepad ("Star_Log_Test", GetVariable("starlog_folder") .. "\\" .. os.date(GetVariable("starLog_fnTs")) .. ".txt")
     CloseNotepad ("Star_Log_Test", 0)
     ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Log file saved to ", "red", "", GetVariable("starlog_folder") .. "\\" .. os.date(GetVariable("starLog_fnTs")) .. ".txt")	 
    else
     SaveNotepad ("Star_Log_Test", GetVariable("starlog_folder") .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
     CloseNotepad ("Star_Log_Test", 0)
     ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "silver", "", "Filename has not been set, saving file with default format name.")
     ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Log file saved to ", "red", "", GetVariable("starlog_folder") .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
    end -- starlog_folder
   else
    SaveNotepad ("Star_Log_Test", GetInfo (58) .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
    CloseNotepad ("Star_Log_Test", 0)
    ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "silver", "", "Folder and Filename has not been set, saving file at default location with default name.")
    ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Log file saved to ", "red", "", GetInfo (58) .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
   end -- starlog_folder
   SetVariable("starLog_isRec", "false")
  end -- starLog_isRec
end -- function alias_star_logger_rec

function alias_star_logger_set_folder()
  directoryname = utils.directorypicker ("Folder to put logs into", GetInfo (58))
  SetVariable("starlog_folder", directoryname)
  ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Logs will now save to ", "red", "", directoryname)
end -- function alias_star_logger_set_folder()

function alias_star_logger_set_filename()
  result_filename = utils.inputbox ("What would you like the filename to be?", "Star Logger", "The Final Challenge Log", "Courier", 9)
  SetVariable("result_filename", result_filename)
  SetVariable("starLog_fnTs", result_filename)
  ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Logs will now save as ", "red", "", result_filename)
end -- function alias_star_logger_set_filename

function alias_star_logger_open_folder()
  if GetVariable("starlog_folder") then
   os.execute ("explorer " .. GetVariable("starlog_folder") )
  else
   os.execute ("explorer " .. GetInfo (58) )
  end -- starlog_folder
end -- function alias_star_logger_open_folder

function alias_star_logger_prev_lines()
  if GetVariable("starLog_recPrev") == "true" then
   starLog_recPrev = true
  elseif GetVariable("starLog_recPrev") == "false" then
   starLog_recPrev = false
  else
   starLog_recPrev = false
   SetVariable("starLog_recPrev", "false")
  end -- starLog_recPrev
  starLog_recPrev = not starLog_recPrev
  if starLog_recPrev then
   SetVariable("starLog_recPrev", "true")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Previous lines will now be logged.")
  else
   SetVariable("starLog_recPrev", "false")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "red", "", "Previous lines will no longer be logged.")
  end -- starLog_recPrev
end -- alias_star_logger_prev_lines

function test_orbit()
 print("Orbit test started, this will stop after 3 minutes and 7 seconds, which is roughly half of night")
 EnableTimer("orbitTimer", true)
 ResetTimer("orbitTimer")
 EnableTimer("orbitTimerEnd", true)
 ResetTimer("orbitTimerEnd")
end -- function test_orbit

function orbit()
	angle = angle + angularVelocity
	o_x = centreX + radius * math.cos(angle)
	o_y = centreY + radius * math.sin(angle)
    angles = angles + angularVelocity
	o_xx = centreXX + radius * math.cos(angles)
	o_yy = centreYY + radius * math.sin(angles)
	--print("Sun ", "x:" .. o_x, "y:" .. o_y)
    --print("Moon", "x:" .. o_xx, "y:" .. o_yy)
    draw_sun(o_x, o_y)
    draw_moon(o_xx, o_yy)
end -- function orbit

function draw_sun (o_x, o_y)
 -- main result window
 win5 = GetPluginID () .. ".5"
 WindowCreate (win5, o_x + 15, o_y + 222, 20, 20, 7, 6, 0x000000)  -- create window
 -- gradient window
 win6 = GetPluginID ()  .. ".6"
 WindowCreate (win6, o_x + 13, o_y + 220, 20, 20, 7, 6, 0xFFFFFF)  -- create window
 WindowGradient (win6, 0, 0, 0, 0, 
                 ColourNameToRGB ("yellow"), 
                 ColourNameToRGB ("red"), 
                 2)  -- top to bottom			
 -- mask window
 win7 = GetPluginID ()  .. ".7"
 WindowCreate (win7, o_x + 13, o_y + 220, 20, 20, 7, 6, 0x000000)  -- create window
 -- chord
 WindowCircleOp (win7, 4, 0, 0, 20, 20, 
                 0x000000, 5, 0,  -- no pen
                 0xFFFFFF, 0,  -- brush
                 0, 0)
 -- convert to images
 WindowImageFromWindow (win5, "gradient", win6)
 WindowImageFromWindow (win5, "mask", win7)
 -- do the merge
 WindowMergeImageAlpha (win5, "gradient", "mask", 0, 1, 20, 20, 0, 1, 0, 0, 0, 0)
 --WindowFilter (win5, 0, 0, 0, 0, 3, 0) -- blur both directions
 WindowShow (win5,  true)  -- show it
end -- function draw_sun

function draw_moon (o_xx, o_yy)
 -- main result window
 win8 = GetPluginID () .. ".8" 
 WindowCreate (win8, o_xx + 15, o_yy + 222, 20, 20, 7, 6, 0x000000)  -- create window
 -- gradient window
 win9 = GetPluginID ()  .. ".9"
 WindowCreate (win9, o_xx, o_yy, 20, 20, 7, 6, 0xFFFFFF)  -- create window
 WindowGradient (win9, 0, 0, 0, 0, 
                 ColourNameToRGB ("whitesmoke"), 
                 ColourNameToRGB ("lightskyblue"), 
                 2)  -- top to bottom			
 -- mask window
 win10 = GetPluginID ()  .. ".10"
 WindowCreate (win10, o_xx, o_yy, 20, 20, 7, 6, ColourNameToRGB("black"))  -- create window
 -- chord
 WindowCircleOp (win10, 4, 0, 0, 20, 20, 
                 0x000000, 5, 0,  -- no pen
                 0xFFFFFF, 0,  -- brush
                 0, 0)
 -- convert to images
 WindowImageFromWindow (win8, "gradient", win9)
 WindowImageFromWindow (win8, "mask", win10)
 -- do the merge
 WindowMergeImageAlpha (win8, "gradient", "mask", 0, 1, 20, 20, 0, 1, 0, 0, 0, 0)
 --WindowFilter (win8, 0, 0, 0, 0, 3, 0) -- blur both directions
 WindowShow (win8,  true)  -- show it
end -- function draw_moon

]]>
</script>

<timers>
 <timer 
  enabled="n"
  name="orbitTimer"
  script="orbit"
  second="10.00"
  offset_second="0.00"
  send_to="12"
  ></timer> 
 <timer 
  enabled="n"
  name="orbitTimerEnd"
  minute="3"
  second="7"
  offset_second="0.00"
  send_to="12"
  >
  <send>EnableTimer("orbitTimer", false)
  EnableTimer("orbitTimerEnd", false)
  print("Orbit Test Complete, stopping..")</send>
  </timer>
</timers>

</muclient>