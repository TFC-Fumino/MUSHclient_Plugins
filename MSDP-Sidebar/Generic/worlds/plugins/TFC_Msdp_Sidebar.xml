<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="TFC_MSDP_GUI_SIDEBAR"
   author="Fumino"
   id="9232cf74f97637b76afe76c7"
   language="Lua"
   purpose="A graphical user interface sidebar for The Final Challenge MUD"
   date_written="2016-05-15 00:49:31"
   requires="4.51"
   version="2.5"
   save_state="y"
   >
<description trim="y">
</description>
</plugin>
------------/  TRIGGERS  /------------
<triggers>
 ----/ Exits workaround trigger /----
 <trigger
  enabled="y"
  keep_evaluating="y"
  match="^(.*)\[Exits\: (.*)\]$"
  send_to="12"
  regexp="y"
  name="room_exits"
  sequence="100">
 <send>curRoom_exits = {}
 for w in string.gmatch ("%2", "[^%s]+") do
  table.insert (curRoom_exits, w)
 end -- for w
 draw_minimap ()</send>
 </trigger>
 ----/ Equipment stat triggers /---- 
 <trigger
  enabled="y"
  match="* You last logged in on *"
  send_to="12"
  sequence="100">
 <send>DoAfterSpecial (1, 'ColourNote ("goldenrod", "", "Check your equipment to see it totaled up")', sendto.script)</send>
 </trigger>
 <trigger
  enabled="y"
  keep_evaluating="y"
  match="You are using:"
  name="clearoldstats"
  script="start_of_equip_list"
  sequence="100">
 </trigger>
 <trigger
  enabled="n"
  expand_variables="y"
  keep_evaluating="y"
  match="(int:|wis:|dex:|str:|chr:|con:|luc:|dmg:|hr:|da:|ma:|svs:|hp:|mr:)(\D*\d+)"
  name="additup"
  regexp="y"
  repeat="y"
  script="attrib_trigger_script"
  send_to="12"
  sequence="100">
 </trigger>
 <trigger
  enabled="y"
  keep_evaluating="y"
  match="^$"
  name="stopadding"
  regexp="y"
  send_to="12"
  sequence="100">
 <send>if GetVariable("eqstatcheck") == "true" then
   SetVariable("eqstatcheck", "false")
   EnableTrigger ("additup", false)
   show_equip_list ()
   start_of_equip_list ()
  end -- eqstatcheck</send>
 </trigger>
 ----/ Chat Channel Triggers /----
 ----/ Temp fix until I have time to redo again (prompt bar may occasional show in window) /----
 <trigger
  enabled="y"
  group="macktest"
  match="^\#\#\# (.+)$"
  script="chats"
  regexp="y"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="You say*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You say*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* says*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="* * says*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="You gossip*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You gossip*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* gossips*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * gossips*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="You shout*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You shout*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* shouts*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * shouts*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="You yell*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You yell*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* yells*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * yells*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="You pray, *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You pray, *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* prays *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * prays *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="You auction*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You auction*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* auctions*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * auctions*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="You tell *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You tell *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* tells *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * tells *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="You ftell, *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You ftell, *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="* ftells, *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * ftells *"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="You cant*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* You cant*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="* cants*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 <trigger
  enabled="y"
  match="* * cants*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="You question*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="* You question*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>		
 <trigger
  enabled="y"
  match="* questions*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>		
 <trigger
  enabled="y"
  match="* * questions*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>	
 <trigger
  enabled="y"
  match="You answer*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>		
 <trigger
  enabled="y"
  match="* You answer*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>		
 <trigger
  enabled="y"
  match="* answers*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>		
 <trigger
  enabled="y"
  match="* * answers*"
  script="chats"
  omit_from_output="y"
  sequence="100"
 ></trigger>
 ----/ Star Logger /----
 <trigger
  enabled="n"
  keep_evaluating="y"
  match="*"
  name="starlogger"
  script="dc_log"
  sequence="100">
 </trigger>
</triggers>
------------/  ALIASES  /------------
<aliases>
 ----/ Equipment Stat aliases /----
 <alias
  match="eq"
  enabled="y"
  script="check_equipment"
  sequence="100">
 </alias>
 <alias
  match="equip"
  enabled="y"
  script="check_equipment"
  sequence="100">
 </alias>
 <alias
  match="equipment"
  enabled="y"
  script="check_equipment"
  sequence="100">
 </alias>
 <alias
  script="show_equip_list"
  match="show stats"
  enabled="y"
  sequence="100">
 </alias>
 ----/ Map Patch aliases /----
 <alias
  script="show_map_list"
  match="map list"
  enabled="y"
  sequence="100">
 </alias>
 <alias
  script="close_map_list"
  match="close map list"
  enabled="y"
  sequence="100">
 </alias>
 ----/ Plugin updater /----
 <alias
  script="update_plugin"
  match="update plugin"
  enabled="y"
  sequence="100">
 </alias>
 ----/ Star Logger /----
 <alias
  script="alias_star_logger_rec"
  match="star logger rec"
  enabled="y"
  sequence="100">
 </alias>
 <alias
  script="alias_star_logger_set_folder"
  match="star logger set folder"
  enabled="y"
  sequence="100">
 </alias>
 <alias
  script="alias_star_logger_set_filename"
  match="star logger set filename"
  enabled="y"
  sequence="100">
 </alias>
 <alias
  script="alias_star_logger_open_folder"
  match="star logger open folder"
  enabled="y"
  sequence="100">
 </alias>
 <alias
  script="alias_star_logger_prev_lines"
  match="star logger prev lines"
  enabled="y"
  sequence="100">
 </alias>

 <alias
  script="create_layout"
  match="adjust windows"
  enabled="y"
  sequence="100">
 </alias>
  
 <alias
  script="settings_menu"
  match="settings"
  enabled="y"
  sequence="100">
 </alias>
 
 <alias
  script="close_settings"
  match="close settings"
  enabled="y"
  sequence="100">
 </alias>

 <alias
  script="msdp_test"
  match="msdp test"
  enabled="y"
  sequence="100">
 </alias>
</aliases>
<!--  Get our standard constants -->
<include name="constants.lua"/>
<!--  Script  -->
<script>
<![CDATA[
--------/////*\\\\\--------[ VARIABLES ]--------/////*\\\\\--------

----/ default first time window visibility, must be opposite for toggles /----
CHAT_HIDDEN = false
CHAT_VISIBILITY = false
PROMPT_BARS_VISIBILITY = false

------------/ Sidebar & Adjustable Window Positions  /------------
AVATAR_LEFT_POSITION = 25
SIDEBAR_LEFT_POSITION = 160
TITLEBAR_LEFT_POSITION = 0
MINIMAP_LEFT_POSITION = 0
SPELLS_LEFT_POSITION = 14
SPELLSCOOLDOWN_LEFT_POSITION = 3
CHATS_LEFT_POSITION = 171
CHATS_TOP_POSITION = 0
SB_BG_LEFT_POSITION = 0

------------/  Communications Window  /------------
BODY_FONT_NAME = "Franklin Gothic"
BODY_FONT_SIZE = 9
SCROLL_BAR_WIDTH = 15
MAX_LINES = 10000 -- how many lines to store in scrollback
sidebar_button_window = "sidebar_button_window"  -- miniwindow ID
TIMESTAMP_TEXT_COLOUR = "white"
TIMESTAMP_BACK_COLOUR = "black"
timestamp = not (GetVariable("timestamp") == "false")
echo = not (GetVariable("echo") == "false")
date_format = GetVariable("date_format")
-- Width & Height of Chat Window --

WINDOW_HEIGHT = 93
sepOne_top = 76
TEXT_INSET = 5
lines = {}  -- table of recent chat lines
rawlines = {}
lineStart = ""
lineEnd = ""
WINDOW_COLUMNS = ""
WINDOW_LINES = ""
Win = GetPluginID()
font_height = ""
line_height = ""
windowinfo = ""
-- Scrollbar stuff
startx = ""
starty = ""
barPos = ""
barSize = ""
totalSteps = ""
keepscrolling = false

------------/  Colors  /------------
colourTFC = ColourNameToRGB("lightgray")
colourGold = ColourNameToRGB("gold")
colourSilver = ColourNameToRGB("silver")
colourBlack = ColourNameToRGB("black")
colourWhite = ColourNameToRGB("white")

------------/  Window IDs  /------------
sidebar_bg = "sidebar_bg"
background_window = "world_background_image"
titlebar_window = "titlebar_image"
avatar_window = "avatar_window"
bars_window = "bars_image"
minimap_window = "minimap_image"
health_window = "health_bar"
mana_window = "mana_bar"
movement_window = "movement_bar"
exp_window = "exp_bar"
line_sepOne = "line_sepOne"
line_sepTwo = "line_sepTwo"

------------/  MSDP stuff  /------------
msdp = {}
MSDP = 69
using_msdp = false

------------/  Menu setting default colors /------------
bgColour = tonumber(GetVariable ("bgColour")) or ColourNameToRGB("black")
health_color = tonumber(GetVariable("health_color")) or 0x0000CC
health_colorB = tonumber(GetVariable("health_colorB")) or ColourNameToRGB("black")
mana_color = tonumber(GetVariable("mana_color")) or 0xCC0000
mana_colorB = tonumber(GetVariable("mana_colorB")) or ColourNameToRGB("black")
move_color = tonumber(GetVariable("move_color")) or 0x00CC00
move_colorB = tonumber(GetVariable("move_colorB")) or ColourNameToRGB("black")
enemy_color = tonumber(GetVariable("enemy_color")) or 0x00CCCC
enemy_colorB = tonumber(GetVariable("enemy_colorB")) or ColourNameToRGB("black")
bar_text_color = tonumber(GetVariable("bar_text_color")) or ColourNameToRGB("white")
customBar_top_color = tonumber(GetVariable ("custom_bar_color_highlight_top")) or ColourNameToRGB("black")
customBar_bottom_color = tonumber(GetVariable ("custom_bar_color_highlight_bottom")) or ColourNameToRGB("red")
terrain_color = GetVariable("terrain_color") or ColourNameToRGB("white")
cColorLight = GetVariable("cColorLight") or ColourNameToRGB("white")
cColorDark = GetVariable("cColorDark") or ColourNameToRGB("dimgray")
cColorLighto = GetVariable("cColorLighto") or ColourNameToRGB("lime")
cColorDarko = GetVariable("cColorDarko") or ColourNameToRGB("green")
cColorLightc = GetVariable("cColorLightc") or ColourNameToRGB("red")
cColorDarkc = GetVariable("cColorDarkc") or ColourNameToRGB("darkred")
SBtopC = GetVariable("SBtopC") or ColourNameToRGB ("black")
SBbotC = GetVariable("SBbotC") or ColourNameToRGB ("black")
SBbarC = GetVariable("SBbarC") or ColourNameToRGB ("red")
SBbarCe = GetVariable("SBbarCe") or ColourNameToRGB ("black")
SBsolid = GetVariable("SBsolid") or ColourNameToRGB ("black")
GRthree = GetVariable("GRthree") or ColourNameToRGB ("black")
GRfour = GetVariable("GRfour") or ColourNameToRGB ("red")
GRfive = GetVariable("GRfive") or ColourNameToRGB ("red")
GRsix = GetVariable("GRsix") or ColourNameToRGB ("black")
GRseven = GetVariable("GRseven") or ColourNameToRGB ("black")
GReight = GetVariable("GReight") or ColourNameToRGB ("darkred")
if GetVariable("SBsolid") == nil then
 SetVariable("SBsolid", ColourNameToRGB("black"))
end
if GetVariable("SBtransparent") ~= "true" then
 SetVariable("SBtransparent", "false")
else
 SetVariable("SBtransparent", "true")
end -- SBtransparent
if GetVariable("SBbarC") == nil then
 SetVariable("SBbarC", ColourNameToRGB("red"))
end
if GetVariable("SBbarCe") == nil then
 SetVariable("SBbarCe", ColourNameToRGB("black"))
end
if GetVariable("SBtopC") == nil then
 SetVariable("SBtopC", ColourNameToRGB("black"))
end
if GetVariable("SBbotC") == nil then
 SetVariable("SBbotC", ColourNameToRGB("black"))
end
if GetVariable("GRthree") == nil then
 SetVariable("GRthree", ColourNameToRGB("black"))
end
if GetVariable("GRfour") == nil then
 SetVariable("GRfour", ColourNameToRGB("red"))
end
if GetVariable("GRfive") == nil then
 SetVariable("GRfive", ColourNameToRGB("red"))
end
if GetVariable("GRsix") == nil then
 SetVariable("GRsix", ColourNameToRGB("black"))
end
if GetVariable("GRseven") == nil then
 SetVariable("GRseven", ColourNameToRGB("black"))
end
if GetVariable("GReight") == nil then
 SetVariable("GReight", ColourNameToRGB("darkred"))
end
if GetVariable("cSelected") == nil then
 SetVariable("cSelected", "four")
end
if GetVariable("castle_checked") == nil then
 SetVariable("castle_checked", "browse")
 SetVariable("filename", GetInfo (66) .. "Generic/layout/72270_comp.png")
end
------------/  Msdp room exits  /------------
RoomExit = {}
RoomType = {}
ExitCount = 0

------------/  Msdp spell icons  /------------
AffectName = {}
AffectDuration = {}
AffectMax = 0

------------/  Equipment stat calculator  /------------
stats = {
 str = '0',
 hr = '0',
 int = '0',
 dmg = '0',
 wis = '0',
 chr = '0',
 dex = '0',
 luc = '0',
 con = '0',
 svs = '0',
 da = '0',
 mr = '0',
 hp = '0',
 ma = '0'
}

------------/  Requires  /------------
require "copytable"
require "getstyle"
require "wait"

theme = {
    WINDOW_BORDER = ColourNameToRGB("#000000"), -- for miniwindow body
    HIGHLIGHT=GetVariable("SBbarC"), -- for 3D surfaces
    FACE=0x000000, -- for 3D surfaces
    INNERSHADOW=ColourNameToRGB("#000000"), -- for 3D surfaces
    OUTERSHADOW = GetVariable("SBbarC"), -- for 3D surfaces
    BACK_FACE = 0x000000, -- for contrasting details
    DETAIL = GetVariable("SBbarC"), -- for contrasting details
    TITLE_HEIGHT = 17, -- for miniwindow title area
    SUBTITLE_HEIGHT = 17, -- for miniwindow title area
    TITLE_FONT_NAME = "Dina", -- for miniwindow title area
    TITLE_FONT_SIZE = 8 -- for miniwindow title area
}  -- end theme table

----/ Custom Themed RectOp functions /----
function DrawThemed3DRect(Window, left, top, right, bottom)
 WindowRectOp(Window, miniwin.rect_fill, left, top, right, bottom, theme.FACE)
 WindowLine(Window, left, top, right, top, theme.HIGHLIGHT, 
    miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
 WindowLine(Window, left, top, left, bottom, theme.HIGHLIGHT, 
    miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
 WindowLine(Window, left, bottom-2, right, bottom-2, theme.INNERSHADOW, 
    miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
 WindowLine(Window, right-2, top, right-2, bottom-2, theme.INNERSHADOW, 
    miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
 WindowLine(Window, left, bottom-1, right, bottom-1, theme.OUTERSHADOW, 
    miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
 WindowLine(Window, right-1, top, right-1, bottom-1, theme.OUTERSHADOW, 
    miniwin.pen_solid + miniwin.pen_endcap_flat, 1)    
end -- function Drawthemed3DRectOp

----/ Currently unused function /----
function DrawThemedResizeTag(Window, x1, y1, size)
 local x2, y2 = x1+size, y1+size
 DrawThemed3DRect(Window, x1, y1, x2, y2)
 local m = 2
 local n = 2
 while (x1+m+2 <= x2-3 and y1+n+1 <= y2-4) do
    WindowLine(Window, x1+m+1, y2-4, x2-3, y1+n, theme.HIGHLIGHT, 
        miniwin.pen_solid, 1)
    WindowLine(Window, x1+m+2, y2-4, x2-3, y1+n+1, theme.INNERSHADOW, 
        miniwin.pen_solid, 1)
    m = m+3
    n = n+3
 end -- while loop
end  -- function DrawThemedResizeTag

function OnPluginInstall_repeat()
 PLUGIN_VERSION = GetPluginInfo(GetPluginID(), 19)
 PLUGIN_NAME = GetPluginInfo(GetPluginID(), 1)
 -- Dummy window to get font characteristics
 check (WindowCreate (Win, 0, 0, 1, 1, 12, 2, 0x000000) )
 WindowRectOp (Win, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
 check (WindowFont(Win, "bodyfont"..Win, BODY_FONT_NAME, BODY_FONT_SIZE, true))
 check (WindowFont(Win, "titlefont"..Win, theme.TITLE_FONT_NAME, theme.TITLE_FONT_SIZE))
 font_height = WindowFontInfo (Win, "bodyfont"..Win, 1) -  WindowFontInfo (Win, "bodyfont"..Win, 4) + 1
 line_height = font_height+1
 font_width = WindowTextWidth (Win, "bodyfont"..Win, "W")
 -- check for Echo/Timestamp/date_format/window size (in pixels) variables, if not there, set them
 if date_format == nil then
  date_format = "[%X] "
 end -- if
 if WINDOW_WIDTH == nil then
  WINDOW_WIDTH = (font_width*80)+SCROLL_BAR_WIDTH -- 80 columns
 end -- if
 if WINDOW_HEIGHT == nil then
  WINDOW_HEIGHT = (line_height*6)+2 -- 6 lines
 end -- if
 init(true)
 OnPluginEnable ()  -- do initialization stuff
 create_layout () 
end -- function OnPluginInstall_repeat
  
function OnPluginInstall()
 PLUGIN_VERSION = GetPluginInfo(GetPluginID(), 19)
 PLUGIN_NAME = GetPluginInfo(GetPluginID(), 1)
 -- Dummy window to get font characteristics
 check (WindowCreate (Win, 0, 0, 1, 1, 12, 2, 0x000000) )
 WindowRectOp (Win, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
 check (WindowFont(Win, "bodyfont"..Win, BODY_FONT_NAME, BODY_FONT_SIZE, true))
 check (WindowFont(Win, "titlefont"..Win, theme.TITLE_FONT_NAME, theme.TITLE_FONT_SIZE))
 font_height = WindowFontInfo (Win, "bodyfont"..Win, 1) -  WindowFontInfo (Win, "bodyfont"..Win, 4) + 1
 line_height = font_height+1
 font_width = WindowTextWidth (Win, "bodyfont"..Win, "W")
 -- check for Echo/Timestamp/date_format/window size (in pixels) variables, if not there, set them
 if date_format == nil then
  date_format = "[%X] "
 end -- if
 if WINDOW_WIDTH == nil then
  WINDOW_WIDTH = (font_width*80)+SCROLL_BAR_WIDTH -- 80 columns
 end -- if
 if WINDOW_HEIGHT == nil then
  WINDOW_HEIGHT = (line_height*6)+2 -- 6 lines
 end -- if
 init(true)
 OnPluginEnable ()  -- do initialization stuff
 DoAfterSpecial (0.1, 'create_layout()', sendto.script)  
 ColourNote ("", "", "")
end -- function OnPluginInstall

function init(firstTime)
 -- how many lines and columns will fit?
 WINDOW_LINES = math.ceil((WINDOW_HEIGHT-17)/line_height)
 WINDOW_COLUMNS = math.ceil((WINDOW_WIDTH-SCROLL_BAR_WIDTH)/font_width)
 if firstTime then
  WindowCreate(Win, CHATS_LEFT_POSITION, CHATS_TOP_POSITION, WINDOW_WIDTH + 75, WINDOW_HEIGHT, 4, 6, 0x000000)
  -- catch for right-click menu and line selection
  WindowAddHotspot(Win, "textarea", 0, 0, WINDOW_WIDTH-SCROLL_BAR_WIDTH,0, 
    "", "", "MouseDown", "CancelMouseDown", "MouseUp", "", 
    miniwin.cursor_ibeam, 0)
  -- scroll bar up/down buttons
  WindowAddHotspot(Win, "up", WINDOW_WIDTH-SCROLL_BAR_WIDTH, 0, 0, SCROLL_BAR_WIDTH, 
    "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 
    miniwin.cursor_hand, 0)
  WindowAddHotspot(Win, "down", WINDOW_WIDTH-SCROLL_BAR_WIDTH, WINDOW_HEIGHT-(2*SCROLL_BAR_WIDTH), 0, WINDOW_HEIGHT-SCROLL_BAR_WIDTH, 
    "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 
    miniwin.cursor_hand, 0)
 else
  WindowMoveHotspot(Win, "textarea", 0, 0, WINDOW_WIDTH-SCROLL_BAR_WIDTH, 0)
  WindowMoveHotspot(Win, "up", WINDOW_WIDTH-SCROLL_BAR_WIDTH, 0, 0, SCROLL_BAR_WIDTH)
  WindowMoveHotspot(Win, "down", WINDOW_WIDTH-SCROLL_BAR_WIDTH, WINDOW_HEIGHT-(2*SCROLL_BAR_WIDTH), 0, WINDOW_HEIGHT-SCROLL_BAR_WIDTH)
 end -- firstTime
 WindowShow(Win, true)  
 if (firstTime == true) then
  lines = {}
  for _,styles in ipairs(rawlines) do 
   fillBuffer(styles)
  end  -- for each line
 end -- if
 lineStart = math.max(1, #lines-WINDOW_LINES+2)
 lineEnd = math.max(1, #lines)
 refresh()
end  -- function init

function OnPluginClose ()
 -- if enabled
 if GetPluginInfo (GetPluginID(), 17) then
  OnPluginDisable()
 end -- if enabled
end -- function OnPluginClose

function OnPluginEnable ()
 WindowShow (Win, true)
end -- function OnPluginEnable

function OnPluginSaveState ()
 -- save echo/timestamp status
 SetVariable ("echo", tostring (echo))
 SetVariable ("timestamp", tostring (timestamp))
 SetVariable("date_format", date_format)
 SetVariable("WINDOW_WIDTH", WINDOW_WIDTH)
 SetVariable("WINDOW_HEIGHT", WINDOW_HEIGHT)
 if castle_checked ~= nil then
  SetVariable("castle_checked", tostring (castle_checked))
  elseif filename ~= nil then
  SetVariable("filename", tostring (filename))
 end -- background
end -- function OnPluginSaveState

function OnPluginDisable ()
end -- function OnPluginDisable

function Display_Line (line, styles)
 local left    = TEXT_INSET
 local top     = (line * line_height) + 1
 local bottom  = top + line_height
 local font    = "bodyfont" .. Win
 if backfill then
  WindowRectOp (Win, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
 end -- backfill  
 if (styles) then
  for _, style in ipairs (styles) do
   local width = WindowTextWidth (Win, font, style.text) -- get width of text
   local right = left + width
   WindowRectOp (Win, miniwin.rect_fill, left, top, right, bottom, style.backcolour)  -- draw background
   WindowText (Win, font, style.text, left, top, 0, 0, style.textcolour)  -- draw text
   left = left + width  -- advance horizontally
  end -- for each style run        
 end -- if  styles
end -- Display_Line

function writeLines()
 for count = lineStart, lineEnd do
  Display_Line( count-lineStart, lines[count][1], false )
 end  -- for each line
 Redraw()
end  -- function writeLines

function refresh()
 WindowRectOp (Win, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
 drawStuff()
end  -- function refresh

function drawStuff()
 if #lines >= 1 then
  writeLines()
 end -- if        
 -- Scrollbar base
 WindowRectOp(Win, miniwin.rect_fill, WINDOW_WIDTH-SCROLL_BAR_WIDTH, 0, WINDOW_WIDTH, WINDOW_HEIGHT, theme.BACK_FACE) -- scroll bar background
 WindowRectOp(Win, miniwin.rect_frame, WINDOW_WIDTH-SCROLL_BAR_WIDTH+1, SCROLL_BAR_WIDTH-1, WINDOW_WIDTH+1, WINDOW_HEIGHT-(2*SCROLL_BAR_WIDTH)-1, theme.DETAIL) -- scroll bar background inset rectangle
 DrawThemed3DRect(Win, WINDOW_WIDTH-SCROLL_BAR_WIDTH, 0, WINDOW_WIDTH+2, SCROLL_BAR_WIDTH) -- top scroll button
 DrawThemed3DRect(Win, WINDOW_WIDTH-SCROLL_BAR_WIDTH, WINDOW_HEIGHT-(SCROLL_BAR_WIDTH*2), WINDOW_WIDTH+2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH) -- bottom scroll button
 -- draw triangle in up button
 points = string.format ("%i,%i,%i,%i,%i,%i", (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+3, 8,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, 4,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+11, 8)
 WindowPolygon (Win, points,
    theme.DETAIL, miniwin.pen_solid, 1,   -- pen (solid, width 1)
    theme.DETAIL, miniwin.brush_solid, --brush (solid)
    true, --close
    false)  --alt fill
 -- draw triangle in down button    
 points = string.format ("%i,%i,%i,%i,%i,%i", (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+3, (WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-10,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, (WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-6, (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+11,(WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-10)
 WindowPolygon (Win, points,
    theme.DETAIL, miniwin.pen_solid, 1,   -- pen (solid, width 1)
    theme.DETAIL, miniwin.brush_solid, --brush (solid)
    true, --close
    false) --alt fill  
 -- The scrollbar position indicator
 totalSteps = #lines
 if (totalSteps <= WINDOW_LINES-1) then totalSteps = 1 end
 SCROLL_BAR_HEIGHT = (WINDOW_HEIGHT-(3*SCROLL_BAR_WIDTH))
 if (not dragscrolling) then
  stepNum = lineStart-1
  barPos = SCROLL_BAR_WIDTH + ((SCROLL_BAR_HEIGHT/totalSteps) * stepNum)
  barSize = (SCROLL_BAR_HEIGHT/math.max(WINDOW_LINES-1,totalSteps)) * (WINDOW_LINES-1)
  if barSize < 10 then
   barSize = 10
  end -- barSize
  if barPos+barSize > SCROLL_BAR_WIDTH+SCROLL_BAR_HEIGHT then
   barPos = SCROLL_BAR_WIDTH+SCROLL_BAR_HEIGHT - barSize
  end -- barPos+barSize
  WindowAddHotspot(Win, "scroller", (WINDOW_WIDTH-SCROLL_BAR_WIDTH), barPos, WINDOW_WIDTH, barPos+barSize, 
    "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 
    miniwin.cursor_hand, 0)
  WindowDragHandler(Win, "scroller", "ScrollerMoveCallback", "ScrollerReleaseCallback", 0)
 end  -- if
 DrawThemed3DRect(Win, WINDOW_WIDTH-SCROLL_BAR_WIDTH, barPos, WINDOW_WIDTH+2, barPos+barSize)
 Redraw()
end  -- function drawStuff

function ScrollerMoveCallback(flags, hotspot_id)
 mouseposy = WindowInfo(Win, 18)
 windowtop = WindowInfo(Win, 2)
 barPos = math.max(mouseposy-windowtop+clickdelta, SCROLL_BAR_WIDTH)
 if barPos > WINDOW_HEIGHT-(SCROLL_BAR_WIDTH*2)-barSize then
  barPos = WINDOW_HEIGHT-(SCROLL_BAR_WIDTH*2)-barSize
  lineStart = math.max(1,#lines-WINDOW_LINES+2)
  lineEnd = #lines
 else
  lineStart = math.floor((barPos-SCROLL_BAR_WIDTH)/(SCROLL_BAR_HEIGHT/totalSteps)+1)
  lineEnd = math.min(lineStart + WINDOW_LINES-2, #lines)
 end -- if
 refresh()
end  -- function ScrollerMoveCallback

function ScrollerReleaseCallback(flags, hotspot_id)
 dragscrolling = false
 refresh()
end  -- function ScrollerReleaseCallback

function fillBuffer(rawstyles)
 local avail = 0
 local line_styles
 local beginning = true
 -- keep pulling out styles and trying to fit them on the current line
 local styles = copytable.deep (rawstyles)
 local remove = table.remove
 local insert = table.insert
 while #styles > 0 do
  if avail <= 0 then -- no room available? start new line
   -- remove first line if filled up
   if #lines >= MAX_LINES then
    remove (lines, 1)
   end -- if 
   avail = WINDOW_WIDTH - (TEXT_INSET * 2) - 9
   line_styles = {}
   add_line( line_styles, beginning )
   beginning = false
  end -- line full
  -- get next style, work out how long it is
  local style = remove (styles, 1)
  local width = WindowTextWidth (Win, "bodyfont"..Win, style.text)
  -- if it fits, copy whole style in
  if width <= avail then
   insert (line_styles, style)
   avail = avail - width
  else -- otherwise, have to split style   
   -- look for trailing space (work backwards). remember where space is
   local col = style.length - 1
   local split_col
   -- keep going until out of columns
   while col > 1 do
    width = WindowTextWidth (Win, "bodyfont"..Win, style.text:sub (1, col)) 
    if width <= avail then
     if not split_col then
      split_col = col  -- in case no space found, this is where we can split
     end -- if
     -- see if space here
     if style.text:sub (col, col) == " " then
      split_col = col
      break
     end -- if space
    end -- if will now fit
    col = col - 1
   end -- while
   -- if we found a place to split, use old style, and make it shorter. Also make a copy and put the rest in that
   if split_col then
    insert (line_styles, style)
    local style_copy = copytable.shallow (style)
    style.text = style.text:sub (1, split_col)
    style.length = split_col 
    style_copy.text = style_copy.text:sub (split_col + 1)
    style_copy.length = #style_copy.text
    insert (styles, 1, style_copy)
   elseif next (line_styles) == nil then
    insert (line_styles, style)
   else
    insert (styles, 1, style)
   end -- if    
    avail = 0  -- now we need to wrap     
  end -- if could not fit whole thing in
 end -- while we still have styles over
end  -- function fillBuffer

function chats (name, line, wildcards, styles)
 -- echo in this world as well if the user wants
 if echo then
  for _, v in ipairs (styles) do
    ColourTell (RGBColourToName (v.textcolour),RGBColourToName (v.backcolour),v.text)
  end -- for each style run
  Note ("")  -- wrap up line
 end -- echo wanted
 -- inject timestamp if wanted
 if timestamp then
  local tstamp = os.date (date_format)
  table.insert (styles, 1, {
  text = tstamp,
  textcolour  = ColourNameToRGB (TIMESTAMP_TEXT_COLOUR),
  backcolour = ColourNameToRGB (TIMESTAMP_BACK_COLOUR),
  length = string.len (tstamp),
  style = 0,
  } )
 end -- if    
 -- store the raw lines for use during resizing
 if #rawlines >= MAX_LINES then
  table.remove(rawlines, 1)
 end
 table.insert(rawlines, styles)
 fillBuffer(styles)
 refresh( )
end -- function chats 

function add_line ( line, is_beginning_of_message )
 -- add new line
 table.insert (lines, {line, false} )
 lines[#lines][2] = is_beginning_of_message
 -- advance the count
 if #lines >= WINDOW_LINES then
  lineStart = lineStart + 1
 end -- if
 if #lines > 1 then
  lineEnd = lineEnd + 1
 end -- if
end -- function add_line

function scrollbar(calledBy)
 wait.make (function()
  while keepscrolling == true do
   if calledBy == "up" then
    if (lineStart > 1) then
     lineStart = lineStart - 1
     lineEnd = lineEnd - 1
     WindowRectOp(Win, miniwin.rect_draw_edge, (WINDOW_WIDTH-SCROLL_BAR_WIDTH), 0, 0, SCROLL_BAR_WIDTH, 
         miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all) -- up arrow pushed
     points = string.format ("%i,%i,%i,%i,%i,%i", (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+3, 9,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, 5,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+11, 9)
     WindowPolygon (Win, points,
         theme.DETAIL, miniwin.pen_solid, 1, -- pen (solid, width 1)
         theme.DETAIL, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
    else
     keepscrolling = false
    end
   elseif calledBy == "down" then
    if (lineEnd < #lines) then
     lineStart = lineStart + 1
     lineEnd = lineEnd + 1
     WindowRectOp(Win, miniwin.rect_draw_edge, (WINDOW_WIDTH-SCROLL_BAR_WIDTH), WINDOW_HEIGHT-(SCROLL_BAR_WIDTH*2), 0, WINDOW_HEIGHT-SCROLL_BAR_WIDTH-1, 
         miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all) -- down arrow pushed
     points = string.format ("%i,%i,%i,%i,%i,%i", (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+3, (WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-11,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, (WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-7, (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+11,(WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-11) -- draw triangle in up button
     WindowPolygon (Win, points,
         theme.DETAIL, miniwin.pen_solid, 1, -- pen (solid, width 1)
         theme.DETAIL, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
    else
     keepscrolling = false
    end
   end -- if
   wait.time(0.1)
   refresh()
  end -- while keepscrolling
 end)  -- wait.make
end  -- function scrollbar

function GetLineText (styles)
 local t = {}
 for _, style in ipairs (styles) do
  table.insert (t, style.text)
 end -- for
 return table.concat (t)
end -- function GetLineText

function GetAllBufferedMessages()
 local t = {}
 for _,styles in ipairs(rawlines) do
  table.insert (t, GetLineText (styles))
 end -- for
 SetClipboard(table.concat(t,"\r\n"))
end -- function GetAllBufferedMessages

function GetBufferedMessage(xpos, ypos)
 windowline = math.floor((ypos/line_height)+1)-1
 text = ""
 if (#lines > windowline) then
  local line = windowline+lineStart
  -- go to beginning of message
  while lines[line][2] ~= true and line > 1 do
   line = line - 1
  end -- while
  -- first line
  local styles = copytable.deep(lines[line][1])
  if (line-lineStart+1 > 0) then
   Display_Line (line-lineStart, styles, true)
  end -- if
  text = GetLineText (styles)
  -- remaining lines
  line = line + 1
  while line <= #lines and lines[line][2] ~= true do
   local styles = copytable.deep(lines[line][1])
   if (line-lineStart+1 > 0 and line-lineStart < WINDOW_LINES) then
    Display_Line (line-lineStart, styles, true)
   end
   text = text.. GetLineText (styles)
   line = line + 1
  end -- while
  SetClipboard(text)
 end -- if
 Redraw()   
end  -- function GetBufferedMessage

function MouseOver(flags, hotspot_id)
 keepscrolling = false
end  -- function MouseOver

function CancelMouseOver(flags, hotspot_id)
 keepscrolling = false
end  -- function CancelMouseOver

function MouseDown(flags, hotspot_id)
 if (hotspot_id == "resizer") then
  startx, starty = WindowInfo (Win, 17), WindowInfo (Win, 18)
 elseif (hotspot_id == "scroller") then
  clickdelta = WindowHotspotInfo(Win, "scroller", 2)-WindowInfo (Win, 15)
  dragscrolling = true
 elseif (hotspot_id == "textarea" and flags == miniwin.hotspot_got_lh_mouse) then
  GetBufferedMessage(WindowInfo(Win, 14), WindowInfo(Win,15))
 else
  keepscrolling = true
  scrollbar(hotspot_id)
 end -- if
end  -- function MouseDown

function CancelMouseDown(flags, hotspot_id)
 keepscrolling = false
 refresh()
end  -- function CancelMouseDown

function MouseUp(flags, hotspot_id)
 if (hotspot_id == "textarea" and flags == miniwin.hotspot_got_rh_mouse) then
  -- build menu for current state
  right_click_menu()
 else
  refresh()
 end -- if
 keepscrolling = false
end  -- function MouseUp

function chat_echo (name, line, wildcards)
 if wildcards [1] == false then
  echo = not echo  -- toggle
  SetVariable("wechoon", "false")
 else
  echo = wildcards [1]:lower () == " on"
  SetVariable("wechoon", "true")
 end -- if
 if echo then
  ColourNote ("yellow", "", "Echoing chats in main window ENABLED.")
 else
  ColourNote ("yellow", "", "Echoing chats in main window DISABLED.")
 end -- if
end -- function chat_echo

function right_click_menu ()
 menustring ="Copy All To Clipboard|Change Font|Turn Echo "
 if echo then
  menustring = menustring .. "Off"
 else
  menustring = menustring .. "On"
 end -- if
 menustring = menustring.."|>Timestamp|No Timestamps|30 Aug 13:29:49|30 Aug 01:20:12PM|13:29:08|1:22:06 PM"
 result = WindowMenu (Win, 
            WindowInfo (Win, 14),  -- x position
            WindowInfo (Win, 15),   -- y position
            menustring) -- content
 if result == "Copy All To Clipboard" then
  GetAllBufferedMessages()
  ColourNote ("yellow", "", "All buffered messages copied to clipboard.")
 elseif result == "Change Font" then
  wanted_font = utils.fontpicker (BODY_FONT_NAME, BODY_FONT_SIZE) --font dialog
  if wanted_font then
   BODY_FONT_NAME = wanted_font.name
   BODY_FONT_SIZE = wanted_font.size
   SetVariable ("bodyfont", BODY_FONT_NAME)
   SetVariable ("font_size", BODY_FONT_SIZE)
   OnPluginInstall()
  end
 elseif result == "Turn Echo Off" then
  echo = false
  ColourNote ("yellow", "", "Echoing chats in main window DISABLED.")
 elseif result == "Turn Echo On" then
  echo = true
  ColourNote ("yellow", "", "Echoing chats in main window ENABLED.")
 elseif result == "No Timestamps" then
  timestamp = false
  ColourNote ("yellow", "", "Timestamps in communication window DISABLED.")
 elseif result == "30 Aug 13:29:49" then
  timestamp = true
  date_format = "[%d %b %H:%M:%S] "
  ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '30 Aug 13:29:49'.")
 elseif result == "30 Aug 01:20:12PM" then
  timestamp = true
  date_format = "[%d %b %I:%M:%S%p] "
  ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '30 Aug 01:20:12PM'.")
 elseif result == "13:29:08" then
  timestamp = true
  date_format = "[%H:%M:%S] "
  ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '13:29:08'.")
 elseif result == "1:22:06 PM" then
  timestamp = true
  date_format = "[%I:%M:%S%p] "
  ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '1:22:06 PM'.")
 elseif result == "Hide Window" then
  WindowShow( Win, false )
  ColourNote ("yellow", "", "Chats window now hidden. Type 'chats show' to see it again.")        
 end -- if
end -- function right_click_menu

function show_map_list ()
 WindowShow (avatar_window, false)
end -- show_map_list

function close_map_list ()
 WindowShow (avatar_window, true)
end -- show_map_list

function check_equipment ()
 EnableTrigger("additup", true)
 Send "eq"
 SetVariable("eqstatcheck", "true")
end -- check_equipment

function attrib_trigger_script (name, line, wildcards)
 -- function to handle individual matches
 local function one_attrib (m, t)
  local name = "attrib_" .. string.gsub (t [1], ":", "")
  local value = tonumber (t [2])
  SetVariable (name, tonumber (GetVariable (name) or 0) + value)
 end -- one_herb 
 local re = rex.new (GetTriggerInfo (name, 1))  -- get the match text, make into a regexp
 re:gmatch (line, one_attrib)  -- match repeatedly, call function
 for k, v in pairs (GetVariableList()) do 
  name = string.match (k, "^attrib_(%a+)$")
  if name then
   value = tonumber (v)
   stats [name] = value
  end -- if
 end
end -- attrib_trigger_script  

function start_of_equip_list (name, line, wildcards)
 for k, v in pairs (GetVariableList()) do 
  if string.match (k, "^attrib_") then
   DeleteVariable (k)
  end -- one of the attrib_* variables
 end -- for
 stats = {
  str = '0',
  hr = '0',
  int = '0',
  dmg = '0',
  wis = '0',
  chr = '0',
  dex = '0',
  luc = '0',
  con = '0',
  svs = '0',
  da = '0',
  mr = '0',
  hp = '0',
  ma = '0'
 }
end -- start_of_equip_list

function show_equip_list ()
 ColourNote("white", "black", "Str:", "red", "black", stats.str,
            "white", "black", " Int:", "red", "black", stats.int,
            "white", "black", " Wis:", "red", "black", stats.wis,
            "white", "black", " Dex:", "red", "black", stats.dex,
            "white", "black", " Con:", "red", "black", stats.con,
            "white", "black", " Da:", "red", "black", stats.da,
            "white", "black", " Mr:", "red", "black", stats.mr,
            "white", "black", " Hr:", "red", "black", stats.hr,
            "white", "black", " Dmg:", "red", "black", stats.dmg,
            "white", "black", " Chr:", "red", "black", stats.chr,
            "white", "black", " Luc:", "red", "black", stats.luc,
            "white", "black", " Svs:", "red", "black", stats.svs,
            "white", "black", " Hp:", "red", "black", stats.hp,
            "white", "black", " Ma:", "red", "black", stats.ma)
end -- show_equip_list

function create_layout ()
 WINDOW_WIDTH = GetInfo (281) - 173
 BG_COLOR_HEIGHT, BG_COLOR_WIDTH = GetInfo(263), GetInfo(264)
 HEALTH_BAR_LEFT_POSITION = GetInfo(264) / 2 - 160
 MANA_BAR_LEFT_POSITION = GetInfo(264) / 2 + 130
 MOVE_BAR_LEFT_POSITION = WINDOW_WIDTH - 28
 sepW = GetInfo(264)
 left = 175
 top = 78
 top_map = 73
 right = GetInfo (281) - 320
 bottom = GetInfo (280) - 20
 bars_bottom = GetInfo (280) - 20
 -- if its less than this, we lose the map
 min_width = 50 + GetInfo (213) * 81 -- offset + width for 81 characters
 if right < min_width then
  right = min_width
 end -- if
 -- avoid the plugin crashing if someone makes the window stupidly small
 if bottom < top then
  bottom = top
 end -- if
 
SPELLS_TOP_POSITION = GetInfo(280) - 150
 
 if GetVariable("SIDEBAR_STATUS") == "closed" then
  AVATAR_LEFT_POSITION = tonumber(GetVariable("AVATAR_LEFT_POSITION"))
  SIDEBAR_LEFT_POSITION = tonumber(GetVariable("SIDEBAR_LEFT_POSITION"))
  TITLEBAR_LEFT_POSITION = tonumber(GetVariable("TITLEBAR_LEFT_POSITION"))
  MINIMAP_LEFT_POSITION = tonumber(GetVariable("MINIMAP_LEFT_POSITION"))
  SPELLS_LEFT_POSITION = tonumber(GetVariable("SPELLS_LEFT_POSITION"))
  SPELLSCOOLDOWN_LEFT_POSITION = tonumber(GetVariable("SPELLSCOOLDOWN_LEFT_POSITION"))
  ENEM_BAR_LEFT_POSITION = tonumber(GetVariable("ENEM_BAR_LEFT_POSITION"))
  HEALTH_BAR_LEFT_POSITION = tonumber(GetVariable("HEALTH_BAR_LEFT_POSITION"))
  MANA_BAR_LEFT_POSITION = tonumber(GetVariable("MANA_BAR_LEFT_POSITION"))
  CHATS_LEFT_POSITION = tonumber(GetVariable("CHATS_LEFT_POSITION"))
  WINDOW_WIDTH = tonumber(GetVariable("WINDOW_WIDTH"))
  SB_BG_LEFT_POSITION = tonumber(GetVariable("SB_BG_LEFT_POSITION"))
  left = tonumber(GetVariable("left"))
  if GetVariable("CHAT_VISIBILITY") == "false" then
   CHATS_TOP_POSITION = tonumber(GetVariable("CHATS_TOP_POSITION"))
   top = tonumber(GetVariable("top"))
   sepOne_top = tonumber(GetVariable("sepOne_top"))
   CHAT_VISIBILITY = false
  elseif GetVariable("CHAT_VISIBILITY") == "true" then
   CHATS_TOP_POSITION = tonumber(GetVariable("CHATS_TOP_POSITION"))
   top = tonumber(GetVariable("top"))
   sepOne_top = tonumber(GetVariable("sepOne_top"))
   CHAT_VISIBILITY = true
  end -- CHAT_VISIBILITY
  if GetVariable("PROMPT_BARS_VISIBILITY") == "false" then
   bars_bottom = tonumber(GetVariable("bars_bottom"))
   bottom = tonumber(GetVariable("bottom"))
   PROMPT_BARS_VISIBILITY = false
  elseif GetVariable("PROMPT_BARS_VISIBILITY") == "true" then
   bars_bottom = tonumber(GetVariable("bars_bottom"))
   bottom = tonumber(GetVariable("bottom"))
   PROMPT_BARS_VISIBILITY = true
  end -- PROMPT_BARS_VISIBILITY
  ----/ Create adjustable windows /----
  main_text_area ()
  create_titlebar ()
  build_avatar_window ()
  create_sidebar_button ()
  create_minimap_window ()
  build_prompt_bars ()
  build_chatLine ()
  build_promptLine ()
  sidebar_background ()
  init(true)
 else
  BG_COLOR_HEIGHT, BG_COLOR_WIDTH = GetInfo(263), GetInfo(264)
  WINDOW_WIDTH = GetInfo (281) - 173
  HEALTH_BAR_LEFT_POSITION = GetInfo(264) / 2 - 160
  MANA_BAR_LEFT_POSITION = GetInfo(264) / 2 + 130
  MOVE_BAR_LEFT_POSITION = WINDOW_WIDTH - 28
  ENEM_BAR_LEFT_POSITION = 175
  sepW = GetInfo(281) - 175
  left = 175
  right = GetInfo (281) - 175
  if GetVariable("CHAT_VISIBILITY") == "true" then
   CHATS_TOP_POSITION = tonumber(GetVariable("CHATS_TOP_POSITION"))
   top = tonumber(GetVariable("top"))
   sepOne_top = tonumber(GetVariable("sepOne_top"))
   CHAT_VISIBILITY = true
  elseif GetVariable("CHAT_VISIBILITY") == "false" then
   CHATS_TOP_POSITION = tonumber(GetVariable("CHATS_TOP_POSITION"))
   top = tonumber(GetVariable("top"))
   sepOne_top = tonumber(GetVariable("sepOne_top"))
   CHAT_VISIBILITY = false
  end -- CHAT_VISIBILITY
  if GetVariable("PROMPT_BARS_VISIBILITY") == "true" then
   bars_bottom = tonumber(GetVariable("bars_bottom"))
   bottom = tonumber(GetVariable("bottom"))
   PROMPT_BARS_VISIBILITY = true
  elseif GetVariable("PROMPT_BARS_VISIBILITY") == "false" then
   bars_bottom = tonumber(GetVariable("bars_bottom"))
   bottom = tonumber(GetVariable("bottom"))
   PROMPT_BARS_VISIBILITY = false
  end -- PROMPT_BARS_VISIBILITY
  ----/ Create adjustable windows /----
  main_text_area ()
  create_titlebar ()
  build_avatar_window ()
  create_sidebar_button ()
  create_minimap_window ()
  build_prompt_bars ()
  build_chatLine ()
  build_promptLine ()
  sidebar_background ()
  init(true)
 end -- SIDEBAR_STATUS

 ----/ Set the background /----
 if GetVariable("castle_checked") == "browse" then
  SetBackgroundImage(GetVariable("filename"), 0)
 elseif GetVariable("castle_checked") == "two" then
  SetBackgroundImage(GetInfo (66) .. "Generic/layout/outer_background_two.png", 0)
 elseif GetVariable("castle_checked") == "three" then
  SetBackgroundImage(GetInfo (66) .. "Generic/layout/outer_background_three.png", 0)
 elseif GetVariable("castle_checked") == "one" then
  SetBackgroundImage(GetInfo (66) .. "Generic/layout/outer_background.png", 0)
 elseif GetVariable("bgColour") ~= nil then
  SetBackgroundImage("", 0)
  SetBackgroundColour(bgColour)
 else
  SetBackgroundImage(GetInfo (66) .. "Generic/layout/outer_background.png", 0)
 end -- filename
 -- draw the energy bars
 draw_energy_bars ()
end -- create_layout

function checkItem (which)
  menu [which] = "+" .. menu [which]
end -- checkItem

function settings_click_menu ()
 menu = {
  [1] = "! >0",
  [2] = "0",
  [3] = "-",
  [4] = "0",
  [5] = "<",
  [6] = ">0",
  [7] = "0",
  [8] = "0",
  [9] = "0",
  [10] = "-",
  [11] = "0",
  [12] = "-",
  [13] = "0",
  [14] = "<",
  [15] = ">0",
  [16] = "0",
  [17] = "-",
  [18] = "0",
  [19] = "-",
  [20] = "0",
  [21] = "0",
  [22] = "-",
  [23] = "0", 
  [24] = "0",
  [25] = "-",
  [26] = ">0",
  [27] = "0", 
  [28] = "0",
  [29] = "-",
  [30] = "0", 
  [31] = "0",
  [32] = "-",
  [33] = "0", 
  [34] = "0",
  [35] = "-",
  [36] = "0", 
  [37] = "0",
  [38] = "<",
  [39] = "<",
  [40] = ">Compass",
  [41] = "Default [reset]",
  [42] = "-",
  [43] = ">Main colors",
  [44] = "Set Primary",
  [45] = "Set Secondary",
  [46] = "<",
  [47] = ">Open room colors",
  [48] = "Set Primary",
  [49] = "Set Secondary",
  [50] = "<",
  [51] = ">Closed room colors",
  [52] = "Set Primary",
  [53] = "Set Secondary",
  [54] = "<",
  [55] = "<",
  [56] = "-",
  [57] = ">Star Logger",
  [58] = "Record [Start logging]",
  [59] = "-",
  [60] = "Log previous lines",
  [61] = "Remove prompt",
  [62] = "-",
  [63] = ">Set Timestamp",
  [64] = "No Timestamp",
  [65] = "-",
  [66] = ">12 Hour",
  [67] = "Jan 25 2016 [08:00:15AM]",
  [68] = "Jan 25 16 [08:00:15AM]",
  [69] = "Jan 25 [08:00:15AM]",
  [70] = "-",
  [71] = "01 25 2016 [08:00:15AM]",
  [72] = "01 25 16 [08:00:15AM]",
  [73] = "01 25 [08:00:15AM]",
  [74] = "-",
  [75] = "2016 25 Jan [08:00:15AM]",
  [76] = "16 25 Jan [08:00:15AM]",
  [77] = "25 Jan [08:00:15AM]",
  [78] = "-",
  [79] = "2016 25 01 [08:00:15AM]",
  [80] = "16 25 01 [08:00:15AM]",
  [81] = "25 01 [08:00:15AM]",
  [82] = "-",
  [83] = "[08:00:15AM]",
  [84] = "<",
  [85] = ">24 Hour",
  [86] = "Jan 25 2016 [18:00:15]",
  [87] = "Jan 25 16 [18:00:15]",
  [88] = "Jan 25 [18:00:15]",
  [89] = "-",
  [90] = "01 25 2016 [18:00:15]",
  [91] = "01 25 16 [18:00:15]",
  [92] = "01 25 [18:00:15]",
  [93] = "-",
  [94] = "2016 25 Jan [18:00:15]",
  [95] = "16 25 Jan [18:00:15]",
  [96] = "25 Jan [18:00:15]",
  [97] = "-",
  [98] = "2016 25 01 [18:00:15]",
  [99] = "16 25 01 [18:00:15]",
  [100] = "25 01 [18:00:15]",
  [101] = "-",
  [102] = "[18:00:15]",
  [103] = "<",
  [104] = "<",
  [105] = ">Set Filename",
  [106] = "Custom",
  [107] = "-",
  [108] = ">Timestamp 12 Hour",
  [109] = "Jan 25 2016 [08_00_15AM]",
  [110] = "Jan 25 16 [08_00_15AM]",
  [111] = "Jan 25 [08_00_15AM]",
  [112] = "-",
  [113] = "01 25 2016 [08_00_15AM]",
  [114] = "01 25 16 [08_00_15AM]",
  [115] = "01 25 [08_00_15AM]",
  [116] = "-",
  [117] = "2016 25 Jan [08_00_15AM]",
  [118] = "16 25 Jan [08_00_15AM]",
  [119] = "25 Jan [08_00_15AM]",
  [120] = "-",
  [121] = "2016 25 01 [08_00_15AM]",
  [122] = "16 25 01 [08_00_15AM]",
  [123] = "25 01 [08_00_15AM]",
  [124] = "-",
  [125] = "[08_00_15AM]",
  [126] = "<",
  [127] = ">Timestamp 24 Hour",
  [128] = "Jan 25 2016 [18_00_15]",
  [129] = "Jan 25 16 [18_00_15]",
  [130] = "Jan 25 [18_00_15]",
  [131] = "-",
  [132] = "01 25 2016 [18_00_15AM]",
  [133] = "01 25 16 [18_00_15AM]",
  [134] = "01 25 [18_00_15AM]",
  [135] = "-",
  [136] = "2016 25 Jan [18_00_15]",
  [137] = "16 25 Jan [18_00_15]",
  [138] = "25 Jan [18_00_15]",
  [139] = "-",
  [140] = "2016 25 01 [18_00_15AM]",
  [141] = "16 25 01 [18_00_15AM]",
  [142] = "25 01 [18_00_15AM]",
  [143] = "-",
  [144] = "[18_00_15]",
  [145] = "<",
  [146] = "<",
  [147] = "-",
  [148] = "Set Logs Folder",
  [149] = "Open Logs Folder",
  [150] = "<",
  [151] = "-",
  [152] = "Report an issue",
  [153] = "-",
  [154] = "0",
  [155] = "-",
  [156] = ">0",
  [157] = ">0",
  [158] = "0",
  [159] = "0",
  [160] = "-",
  [161] = "0",
  [162] = "0",
  [163] = "0",
  [164] = ">0",
  [165] = "0",
  [166] = "0",
  [167] = "0",
  [168] = "0",
  [169] = "0",
  [170] = "0",
  [171] = "0",
  [172] = "0",  
  [173] = "<",
  [174] = "-",
  [175] = "0",
  [176] = "<",
  [177] = "-",
  [178] = ">0",
  [179] = "0",
  [180] = "0",
  [181] = "<",
  [182] = "<",
 }

 if GetVariable("starLog_isRec") == "true" then
  menu [58] = "Recording [Stop logging]"
  checkItem (58)
 end -- starLog_isRec
 if GetVariable("starLog_recPrev") == "true" then
  checkItem (60)
 end -- starLog_recPrev
 if GetVariable("starLog_tsType") == "%b %d %Y [%I:%M:%S%p] " then
  checkItem (67)
 elseif GetVariable("starLog_tsType") == "%b %d %y [%I:%M:%S%p] " then
  checkItem (68)
 elseif GetVariable("starLog_tsType") == "%b %d [%I:%M:%S%p] " then
  checkItem (69)
 elseif GetVariable("starLog_tsType") == "%m %d %Y [%I:%M:%S%p] " then
  checkItem (71)
 elseif GetVariable("starLog_tsType") == "%m %d %y [%I:%M:%S%p] " then
  checkItem (72)
 elseif GetVariable("starLog_tsType") == "%m %d [%I:%M:%S%p] " then
  checkItem (73)
 elseif GetVariable("starLog_tsType") == "%Y %d %b [%I:%M:%S%p] " then
  checkItem (75)
 elseif GetVariable("starLog_tsType") == "%y %d %b [%I:%M:%S%p] " then
  checkItem (76)
 elseif GetVariable("starLog_tsType") == "%d %b [%I:%M:%S%p] " then
  checkItem (77)
 elseif GetVariable("starLog_tsType") == "%Y %d %m [%I:%M:%S%p] " then
  checkItem (79)
 elseif GetVariable("starLog_tsType") == "%y %d %m [%I:%M:%S%p] " then
  checkItem (80)
 elseif GetVariable("starLog_tsType") == "%d %m [%I:%M:%S%p] " then
  checkItem (81)
 elseif GetVariable("starLog_tsType") == "[%I:%M:%S%p] " then
  checkItem (83)
 elseif GetVariable("starLog_tsType") == "%b %d %Y [%H:%M:%S] " then
  checkItem (86)
 elseif GetVariable("starLog_tsType") == "%b %d %y [%H:%M:%S] " then
  checkItem (87)
 elseif GetVariable("starLog_tsType") == "%b %d [%H:%M:%S] " then
  checkItem (88)
 elseif GetVariable("starLog_tsType") == "%m %d %Y [%H:%M:%S] " then
  checkItem (90)
 elseif GetVariable("starLog_tsType") == "%m %d %y [%H:%M:%S] " then
  checkItem (91)
 elseif GetVariable("starLog_tsType") == "%m %d [%H:%M:%S] " then
  checkItem (92)
 elseif GetVariable("starLog_tsType") == "%Y %d %b [%H:%M:%S] " then
  checkItem (94)
 elseif GetVariable("starLog_tsType") == "%y %d %b [%H:%M:%S] " then
  checkItem (95)
 elseif GetVariable("starLog_tsType") == "%d %b [%H:%M:%S] " then
  checkItem (96)
 elseif GetVariable("starLog_tsType") == "%Y %d %m [%H:%M:%S] " then
  checkItem (98)
 elseif GetVariable("starLog_tsType") == "%y %d %m [%H:%M:%S] " then
  checkItem (99)
 elseif GetVariable("starLog_tsType") == "%d %m [%H:%M:%S] " then
  checkItem (100)
 elseif GetVariable("starLog_tsType") == "[%H:%M:%S] " then
  checkItem (102)
 else
  checkItem (64)
 end -- starLog_tsType
 if GetVariable("starLog_fnTs") == "%b %d %Y [%I_%M_%S%p]" then
  checkItem (109)
 elseif GetVariable("starLog_fnTs") == "%b %d %y [%I_%M_%S%p]" then
  checkItem (110)
 elseif GetVariable("starLog_fnTs") == "%b %d [%I_%M_%S%p]" then
  checkItem (111)
 elseif GetVariable("starLog_fnTs") == "%m %d %Y [%I_%M_%S%p]" then
  checkItem (113)
 elseif GetVariable("starLog_fnTs") == "%m %d %y [%I_%M_%S%p]" then
  checkItem (114)
 elseif GetVariable("starLog_fnTs") == "%m %d [%I_%M_%S%p]" then
  checkItem (115)
 elseif GetVariable("starLog_fnTs") == "%Y %d %b [%I_%M_%S%p]" then
  checkItem (117)
 elseif GetVariable("starLog_fnTs") == "%y %d %b [%I_%M_%S%p]" then
  checkItem (118)
 elseif GetVariable("starLog_fnTs") == "%d %b [%I_%M_%S%p]" then
  checkItem (119)
 elseif GetVariable("starLog_fnTs") == "%Y %d %m [%I_%M_%S%p]" then
  checkItem (121)
 elseif GetVariable("starLog_fnTs") == "%y %d %m [%I_%M_%S%p]" then
  checkItem (122)
 elseif GetVariable("starLog_fnTs") == "%d %m [%I_%M_%S%p]" then
  checkItem (123)
 elseif GetVariable("starLog_fnTs") == "[%I_%M_%S%p]" then
  checkItem (125)
 elseif GetVariable("starLog_fnTs") == "%b %d %Y [%H_%M_%S]" then
  checkItem (128)
 elseif GetVariable("starLog_fnTs") == "%b %d %y [%H_%M_%S]" then
  checkItem (129)
 elseif GetVariable("starLog_fnTs") == "%b %d [%H_%M_%S]" then
  checkItem (130)
 elseif GetVariable("starLog_fnTs") == "%m %d %Y [%H_%M_%S]" then
  checkItem (132)
 elseif GetVariable("starLog_fnTs") == "%m %d %y [%H_%M_%S]" then
  checkItem (133)
 elseif GetVariable("starLog_fnTs") == "%m %d [%H_%M_%S]" then
  checkItem (134)
 elseif GetVariable("starLog_fnTs") == "%Y %d %b [%H_%M_%S]" then
  checkItem (136)
 elseif GetVariable("starLog_fnTs") == "%y %d %b [%H_%M_%S]" then
  checkItem (137)
 elseif GetVariable("starLog_fnTs") == "%d %b [%H_%M_%S]" then
  checkItem (138)
 elseif GetVariable("starLog_fnTs") == "%Y %d %m [%H_%M_%S]" then
  checkItem (140)
 elseif GetVariable("starLog_fnTs") == "%y %d %m [%H_%M_%S]" then
  checkItem (141)
 elseif GetVariable("starLog_fnTs") == "%d %m [%H_%M_%S]" then
  checkItem (142)
 elseif GetVariable("starLog_fnTs") == "[%H_%M_%S]" then
  checkItem (144)
 else
  if GetVariable("starLog_fnTs") == nil then
   checkItem (67)
  end -- starLog_fnTs
  if GetVariable("result_filename") ~= nil then
   checkItem (106)
   menu [106] = menu [106] .. " [ " .. GetVariable("starLog_fnTs") .. " ]"
  end -- result_filename
 end -- starLog_fnTs
 if GetVariable("starLog_remPrompt") == "true" then
  checkItem (61)
 end -- starLog_remPrompt
 result = WindowMenu (titlebar_window, 65, 15, table.concat (menu, "|"))
 if result == "1" then
 elseif result == "2" then
 elseif result == "3" then
 elseif result == "4" then
 elseif result == "5" then
 elseif result == "6" then
 elseif result == "7" then
 elseif result == "8" then
 elseif result == "9" then
 elseif result == "10" then
 elseif result == "11" then
 elseif result == "12" then
 elseif result == "13" then	 
 elseif result == "14" then
 elseif result == "15" then
 elseif result == "16" then
 elseif result == "17" then
 elseif result == "18" then
 elseif result == "19" then
 elseif result == "20" then
 elseif result == "21" then
 elseif result == "22" then
  --compass reset
  DeleteVariable("cColorLight")
  DeleteVariable("cColorDark")
  DeleteVariable("cColorLighto")
  DeleteVariable("cColorDarko")
  DeleteVariable("cColorLightc")
  DeleteVariable("cColorDarkc")
  create_minimap_window ()
 elseif result == "23" then
 --compass main color primary
  cColorLight = getColour(cColorLight)
  SetVariable("cColorLight", cColorLight)
  create_minimap_window ()
 elseif result == "24" then
 --compass main color secondary
  cColorDark = getColour(cColorDark)
  SetVariable("cColorDark", cColorDark)
  create_minimap_window ()
 elseif result == "25" then
 --compass open room primary
  cColorLighto = getColour(cColorLighto)
  SetVariable("cColorLighto", cColorLighto)
  create_minimap_window ()
 elseif result == "26" then
 --compass open room secondary
  cColorDarko = getColour(cColorDarko)
  SetVariable("cColorDarko", cColorDarko)
  create_minimap_window ()
 elseif result == "27" then
 --compass closed room primary
  cColorLightc = getColour(cColorLightc)
  SetVariable("cColorLightc", cColorLightc)
  create_minimap_window ()
 elseif result == "28" then
 --compass closed room secondary
  cColorDarkc = getColour(cColorDarkc)
  SetVariable("cColorDarkc", cColorDarkc)
  create_minimap_window () 
 elseif result == "29" then
  if GetVariable("starLog_isRec") == nil then
   starLog_isRec = false
   SetVariable("starLog_isRec", "false")
  end -- starLog_isRec  
  starLog_isRec = not starLog_isRec  
  if starLog_isRec then
   SetVariable("starLog_isRec", "true")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Activated")
   if GetVariable("starLog_recPrev") == "true" then
    starLog_prev ()
   end -- starLog_recPrev  
   EnableTrigger("starlogger", true)
  else
   EnableTrigger("starlogger", false)
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "red", "", "Deactivated")
   if GetVariable("starlog_folder") ~= nil then
    if GetVariable("starLog_fnTs") ~= nil then
     SaveNotepad ("Star_Log_Test", GetVariable("starlog_folder") .. "\\" .. os.date(GetVariable("starLog_fnTs")) .. ".txt")
     CloseNotepad ("Star_Log_Test", 0)
     ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Log file saved to ", "red", "", GetVariable("starlog_folder") .. "\\" .. os.date(GetVariable("starLog_fnTs")) .. ".txt")	 
    else
     SaveNotepad ("Star_Log_Test", GetVariable("starlog_folder") .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
     CloseNotepad ("Star_Log_Test", 0)
     ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "silver", "", "Filename has not been set, saving file with default format name.")
     ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Log file saved to ", "red", "", GetVariable("starlog_folder") .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
    end -- starlog_folder
   else
    SaveNotepad ("Star_Log_Test", GetInfo (58) .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
    CloseNotepad ("Star_Log_Test", 0)
    ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "silver", "", "Folder and Filename has not been set, saving file at default location with default name.")
    ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Log file saved to ", "red", "", GetInfo (58) .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
   end -- starlog_folder
   SetVariable("starLog_isRec", "false")
  end -- starLog_isRec
 elseif result == "30" then
  if GetVariable("starLog_recPrev") == "true" then
   starLog_recPrev = true
  elseif GetVariable("starLog_recPrev") == "false" then
   starLog_recPrev = false
  else
   starLog_recPrev = false
   SetVariable("starLog_recPrev", "false")
  end -- starLog_recPrev
  starLog_recPrev = not starLog_recPrev
  if starLog_recPrev then
   SetVariable("starLog_recPrev", "true")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Previous lines will now be logged.")
  else
   SetVariable("starLog_recPrev", "false")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "red", "", "Previous lines will no longer be logged.")
  end -- starLog_recPrev
 elseif result == "31" then
  if GetVariable("starLog_remPrompt") == "true" then
   starLog_remPrompt = true
  elseif GetVariable("starLog_remPrompt") == "false" then
   starLog_remPrompt = false
  else
   starLog_remPrompt = false
   SetVariable("starLog_remPrompt", "false")
  end -- starLog_remPrompt
  starLog_remPrompt = not starLog_remPrompt
  if starLog_remPrompt then
   SetVariable("starLog_remPrompt", "true")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Prompt will now be removed from logs.")
  else
   SetVariable("starLog_remPrompt", "false")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "red", "", "Prompt will no longer be removed from logs.")
  end -- starLog_remPrompt
 elseif result == "32" then
  DeleteVariable("starLog_tsType")
 elseif result == "33" then
  SetVariable("starLog_tsType", "%b %d %Y [%I:%M:%S%p] ")
 elseif result == "34" then
  SetVariable("starLog_tsType", "%b %d %y [%I:%M:%S%p] ")
 elseif result == "35" then
  SetVariable("starLog_tsType", "%b %d [%I:%M:%S%p] ")
 elseif result == "36" then
  SetVariable("starLog_tsType", "%m %d %Y [%I:%M:%S%p] ")
 elseif result == "37" then
  SetVariable("starLog_tsType", "%m %d %y [%I:%M:%S%p] ")
 elseif result == "38" then
  SetVariable("starLog_tsType", "%m %d [%I:%M:%S%p] ")
 elseif result == "39" then
  SetVariable("starLog_tsType", "%Y %d %b [%I:%M:%S%p] ")
 elseif result == "40" then
  SetVariable("starLog_tsType", "%y %d %b [%I:%M:%S%p] ")
 elseif result == "41" then
  SetVariable("starLog_tsType", "%d %b [%I:%M:%S%p] ")
 elseif result == "42" then
  SetVariable("starLog_tsType", "%Y %d %m [%I:%M:%S%p] ")
 elseif result == "43" then
  SetVariable("starLog_tsType", "%y %d %m [%I:%M:%S%p] ")
 elseif result == "44" then
  SetVariable("starLog_tsType", "%d %m [%I:%M:%S%p] ")
 elseif result == "45" then
  SetVariable("starLog_tsType", "[%I:%M:%S%p] ")
 elseif result == "46" then
  SetVariable("starLog_tsType", "%b %d %Y [%H:%M:%S] ")
 elseif result == "47" then
  SetVariable("starLog_tsType", "%b %d %y [%H:%M:%S] ")
 elseif result == "48" then
  SetVariable("starLog_tsType", "%b %d [%H:%M:%S] ")
 elseif result == "49" then
  SetVariable("starLog_tsType", "%m %d %Y [%H:%M:%S] ")
 elseif result == "50" then
  SetVariable("starLog_tsType", "%m %d %y [%H:%M:%S] ")
 elseif result == "51" then
  SetVariable("starLog_tsType", "%m %d [%H:%M:%S] ")
 elseif result == "52" then
  SetVariable("starLog_tsType", "%Y %d %b [%H:%M:%S] ")
 elseif result == "53" then
  SetVariable("starLog_tsType", "%y %d %b [%H:%M:%S] ")
 elseif result == "54" then
  SetVariable("starLog_tsType", "%d %b [%H:%M:%S] ")
 elseif result == "55" then
  SetVariable("starLog_tsType", "%Y %d %m [%H:%M:%S] ")
 elseif result == "56" then
  SetVariable("starLog_tsType", "%y %d %m [%H:%M:%S] ")
 elseif result == "57" then
  SetVariable("starLog_tsType", "%d %m [%H:%M:%S] ")
 elseif result == "58" then
  SetVariable("starLog_tsType", "[%H:%M:%S] ")
 elseif result == "59" then
  result_filename = utils.inputbox ("What would you like the filename to be?", "Star Logger", "The Final Challenge Log", "Courier", 9)
  if result_filename ~= nil then
   SetVariable("result_filename", result_filename)
   SetVariable("starLog_fnTs", result_filename)
  else
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "red", "", "Custom filename has been canceled.")
  end -- result_filename
 elseif result == "60" then
  SetVariable("starLog_fnTs", "%b %d %Y [%I_%M_%S%p]")
 elseif result == "61" then
  SetVariable("starLog_fnTs", "%b %d %y [%I_%M_%S%p]")
 elseif result == "62" then
  SetVariable("starLog_fnTs", "%b %d [%I_%M_%S%p]")
 elseif result == "63" then
  SetVariable("starLog_fnTs", "%m %d %Y [%I_%M_%S%p]")
 elseif result == "64" then
  SetVariable("starLog_fnTs", "%m %d %y [%I_%M_%S%p]")
 elseif result == "65" then
  SetVariable("starLog_fnTs", "%m %d [%I_%M_%S%p]")
 elseif result == "66" then
  SetVariable("starLog_fnTs", "%Y %d %b [%I_%M_%S%p]")
 elseif result == "67" then
  SetVariable("starLog_fnTs", "%y %d %b [%I_%M_%S%p]")
 elseif result == "68" then
  SetVariable("starLog_fnTs", "%d %b [%I_%M_%S%p]")
 elseif result == "69" then
  SetVariable("starLog_fnTs", "%Y %d %m [%I_%M_%S%p]")
 elseif result == "70" then
  SetVariable("starLog_fnTs", "%y %d %m [%I_%M_%S%p]")
 elseif result == "71" then
  SetVariable("starLog_fnTs", "%d %m [%I_%M_%S%p]")
 elseif result == "72" then
  SetVariable("starLog_fnTs", "[%I_%M_%S%p]")
 elseif result == "73" then
  SetVariable("starLog_fnTs", "%b %d %Y [%H_%M_%S]")
 elseif result == "74" then
  SetVariable("starLog_fnTs", "%b %d %y [%H_%M_%S]")
 elseif result == "75" then
  SetVariable("starLog_fnTs", "%b %d [%H_%M_%S]")
 elseif result == "76" then
  SetVariable("starLog_fnTs", "%m %d %Y [%H_%M_%S]")
 elseif result == "77" then
  SetVariable("starLog_fnTs", "%m %d %y [%H_%M_%S]")
 elseif result == "78" then
  SetVariable("starLog_fnTs", "%m %d [%H_%M_%S]")
 elseif result == "79" then
  SetVariable("starLog_fnTs", "%Y %d %b [%H_%M_%S]")
 elseif result == "80" then
  SetVariable("starLog_fnTs", "%y %d %b [%H_%M_%S]")
 elseif result == "81" then
  SetVariable("starLog_fnTs", "%d %b [%H_%M_%S]")
 elseif result == "82" then
  SetVariable("starLog_fnTs", "%Y %d %m [%H_%M_%S]")
 elseif result == "83" then
  SetVariable("starLog_fnTs", "%y %d %m [%H_%M_%S]")
 elseif result == "84" then
  SetVariable("starLog_fnTs", "%d %m [%H_%M_%S]")
 elseif result == "85" then
  SetVariable("starLog_fnTs", "[%H_%M_%S]")
 elseif result == "86" then
  directoryname = utils.directorypicker ("Folder to put logs into", GetInfo (58))
  if directoryname ~= nil then
   SetVariable("starlog_folder", directoryname)
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Logs will now save to ", "red", "", directoryname)
  else
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "red", "", "Custom folder has been canceled.")
  end -- directoryname
 elseif result == "87" then
  if GetVariable("starlog_folder") then
   os.execute ("explorer " .. GetVariable("starlog_folder") )
  else
   os.execute ("explorer " .. GetInfo (58) )
  end -- starlog_folder
 elseif result == "88" then
  OpenBrowser ("https://github.com/TFC-Fumino/MUSHclient_Plugins/issues")
 elseif result == "89" then 
 elseif result == "90" then
 elseif result == "91" then
 elseif result == "92" then
 end -- result
 DrawThemed3DRect(titlebar_window, 65, 0, 104, 13)
 outlined_text (colourWhite, titlebar_window, "settings", 5, 68, 2, 0)
 Redraw()
 Activate()
end -- function settings_click_menu

function MouseDown_button(flags, hotspot_id)
 WindowRectOp(titlebar_window, miniwin.rect_draw_edge, 65, 0, 104, 13, 
    miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
 outlined_text (colourTFC, titlebar_window, "settings", 5, 68, 2, 0)
 Redraw()
 settings_click_menu()
end  -- function MouseDown_button
function MouseUp_button(flags, hotspot_id)
DrawThemed3DRect(titlebar_window, 65, 0, 104, 13)
 outlined_text (colourWhite, titlebar_window, "settings", 5, 68, 2, 0)
Redraw()
end  -- function MouseUp_button

function MouseDown_buttonNew(flags, hotspot_id)
 WindowRectOp(titlebar_window, miniwin.rect_draw_edge, 105, 0, 163, 13, 
    miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
 outlined_text (colourTFC, titlebar_window, "new settings", 5, 108, 2, 0)
 Redraw()
 settings_menu()
end  -- function MouseDown_buttonNew
function MouseUp_buttonNew(flags, hotspot_id)
 DrawThemed3DRect(titlebar_window, 105, 0, 163, 13)
 outlined_text (colourWhite, titlebar_window, "new settings", 5, 108, 2, 0)
 Redraw()
end  -- function MouseUp_buttonNew

function getColour(c)
 local newColour = PickColour (c)
 if newcolour ~= -1 then
  c = newColour
 end
 return c
end --getColour

function OnPluginWorldOutputResized ()
end -- function

----/ Create the health, mana, movement and enemy bars at the bottom /----
function build_prompt_bars ()
 -- make a miniwindow under the text
 WindowCreate (health_window,   -- window ID
    HEALTH_BAR_LEFT_POSITION,            -- left
    bars_bottom - 3,            -- top
    200,           -- width
    20,            -- depth
    12,            -- center it (ignored anyway) 
    2,             -- draw underneath (1) + absolute location (2)
    colourBlack)  -- background colour
 -- show the window
 WindowShow (health_window, true)
 -- make a miniwindow under the text
 WindowCreate (mana_window,   -- window ID
    MANA_BAR_LEFT_POSITION,            -- left
    bars_bottom - 3,           -- top
    200,           -- width
    20,            -- depth
    12,            -- center it (ignored anyway) 
    2,             -- draw underneath (1) + absolute location (2)
    colourBlack)  -- background colour
 -- show the window
 WindowShow (mana_window, true)
 -- make a miniwindow under the text
 WindowCreate (movement_window,   -- window ID
    MOVE_BAR_LEFT_POSITION,            -- left
    bars_bottom - 3,           -- top
    200,           -- width
    20,            -- depth
    12,            -- center it (ignored anyway) 
    2,             -- draw underneath (1) + absolute location (2)
    colourBlack)  -- background colour
 -- show the window
 WindowShow (movement_window, true)
 -- make a miniwindow under the text
 WindowCreate (exp_window,   -- window ID
    ENEM_BAR_LEFT_POSITION,            -- left
    bars_bottom - 3,           -- top
    200,           -- width
    20,            -- depth
    12,            -- center it (ignored anyway) 
    2,             -- draw underneath (1) + absolute location (2)
    colourBlack)  -- background colour
 -- show the window
 WindowShow (exp_window, true)
end -- build_prompt_bars

function init_rooms (data)
 ExitCount = 0
 index = 0
 startpos = 1
 max = 0
 for i=startpos,string.len(data),1 do
  if string.byte(data,i) == 1 or i == string.len(data) then
   if string.byte(data,i) == 1 then
    endpos = 1
   else
    endpos = 0
   end -- if
   variable = string.sub(data,startpos,i-endpos)
   startpos = i+1
   index = index + 1
   pos1 = string.find(variable, "\002")
   if pos1 ~= nil then
    RoomExit[index] = string.sub(variable, 1, pos1-1)
    RoomType[index] = string.sub(variable, pos1+1)
    ExitCount = ExitCount + 1
   end -- if
  end -- if
 end -- for
end -- function

function draw_room (x, y, type_room)
 terrain_image = "terrain_dark"
 if type_room == "O" then
  terrain_image = "terrain_city"
 end -- if
 if GetVariable("terrain_type") == "nomoon" then
  if type_room == "C" then
   -- WindowDrawImage (minimap_window, terrain_image, x-12, y-6, x+20, y+20, 3)  -- draw the door
   -- draw filled triangle door color here
  end -- type_room
 else
  -- WindowDrawImage (minimap_window, terrain_image, x-12, y-6, x+20, y+20, 3)  -- draw the terrain
  -- draw filled triangle normal room here
 end -- terrain_type
end -- draw_room

function draw_minimap ()
 data = msdp["ROOM_EXITS"]
 if data ~= nil then
  init_rooms (data)
 end -- if
 mapCentre = 45
 -- clean the background and redraw the central room
 if GetVariable("bgColour") ~= nil then
  WindowRectOp (minimap_window, 2, 0, 0, 0, 0, tonumber(GetVariable ("bgColour")))
 else
  WindowRectOp (minimap_window, 2, 0, 0, 0, 0, 0x000000)
 end -- bgColour
 cColorLight = GetVariable("cColorLight") or ColourNameToRGB("white")
 cColorDark = GetVariable("cColorDark") or ColourNameToRGB("dimgray")
 outlined_text (cColorLight, minimap_window, "*", 10, 77, 44, 0) 
 WindowCircleOp (minimap_window, 4, 75, 44, 88, 57,
    cColorLight, 0, 2, ColourNameToRGB("cyan"), 1, 
    0, 0, 0, 0) 
 -- north arrow right half
 points = string.format ("%i,%i,%i,%i,%i,%i", 81, 43, 81, 8, 86, 43)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- north arrow left half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 76, 43, 81, 8, 81, 43)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- south arrow left half
 points = string.format ("%i,%i,%i,%i,%i,%i", 76, 57, 81, 90, 81, 57)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- south arrow right half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 81, 57, 81, 90, 86, 57)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- east arrow bottom half
 points = string.format ("%i,%i,%i,%i,%i,%i", 88, 50, 116, 50, 88, 55)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- east arrow top half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 88, 45, 116, 50, 88, 50)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- west arrow top half
 points = string.format ("%i,%i,%i,%i,%i,%i", 74, 45, 46, 50, 74, 50)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- west arrow bottom half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 74, 50, 46, 50, 74, 55)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 --/ up ladder /--
 -- ladder steps
 WindowLine (minimap_window, 108, 11, 116, 11, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 15, 116, 15, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 19, 116, 19, cColorLight, miniwin.pen_solid, 1)
 -- ladder sides
 WindowLine (minimap_window, 108, 8, 108, 23, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 115, 8, 115, 23, cColorLight, miniwin.pen_solid, 1)
 --/ down ladder /--
 -- ladder steps
 WindowLine (minimap_window, 108, 78, 116, 78, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 82, 116, 82, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 86, 116, 86, cColorLight, miniwin.pen_solid, 1)
 -- ladder sides
 WindowLine (minimap_window, 108, 75, 108, 90, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 115, 75, 115, 90, cColorLight, miniwin.pen_solid, 1)
 if ExitCount > 0 and curRoom_exits ~= nil then
  if GetVariable("terrain_color") == nil then
   colourMap = ColourNameToRGB("white")
  else
   colourMap = GetVariable("terrain_color")
  end -- terrain_color
  for i=1,ExitCount,1 do
   for k, v in pairs (curRoom_exits) do
    if RoomExit[i] == "north" then
	 if RoomType[i] == "C" then
      cColorLight = GetVariable("cColorLightc") or ColourNameToRGB("red")
	  cColorDark = GetVariable("cColorDarkc") or ColourNameToRGB("darkred")
	  -- north arrow right half
      points = string.format ("%i,%i,%i,%i,%i,%i", 81, 43, 81, 8, 86, 43)
      WindowPolygon (minimap_window, points,
            cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
            cColorLight, miniwin.brush_solid, -- brush (solid)
            true, -- close
            false) -- alt fill
      -- north arrow left half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 76, 43, 81, 8, 81, 43)
      WindowPolygon (minimap_window, points,
            cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
            cColorDark, miniwin.brush_solid, -- brush (solid)
            true, -- close
            false) -- alt fill
	 end -- RoomType
	 if v == "north" then
	  cColorLight = GetVariable("cColorLighto") or ColourNameToRGB("lime")
	  cColorDark = GetVariable("cColorDarko") or ColourNameToRGB("green")
	  -- north arrow right half
      points = string.format ("%i,%i,%i,%i,%i,%i", 81, 43, 81, 8, 86, 43)
      WindowPolygon (minimap_window, points,
        cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
        cColorLight, miniwin.brush_solid, -- brush (solid)
        true, -- close
        false) -- alt fill
      -- north arrow left half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 76, 43, 81, 8, 81, 43)
      WindowPolygon (minimap_window, points,
        cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
        cColorDark, miniwin.brush_solid, -- brush (solid)
        true, -- close
        false) -- alt fill
	 end -- v north
    elseif RoomExit[i] == "south" then
	 if RoomType[i] == "C" then
      cColorLight = GetVariable("cColorLightc") or ColourNameToRGB("red")
	  cColorDark = GetVariable("cColorDarkc") or ColourNameToRGB("darkred")
      -- south arrow left half
      points = string.format ("%i,%i,%i,%i,%i,%i", 76, 57, 81, 90, 81, 57)
      WindowPolygon (minimap_window, points,
         cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorLight, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
      -- south arrow right half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 81, 57, 81, 90, 86, 57)
      WindowPolygon (minimap_window, points,
         cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorDark, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
     end -- RoomType
	 if v == "south" then
      cColorLight = GetVariable("cColorLighto") or ColourNameToRGB("lime")
	  cColorDark = GetVariable("cColorDarko") or ColourNameToRGB("green")
      -- south arrow left half
      points = string.format ("%i,%i,%i,%i,%i,%i", 76, 57, 81, 90, 81, 57)
      WindowPolygon (minimap_window, points,
         cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorLight, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
      -- south arrow right half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 81, 57, 81, 90, 86, 57)
      WindowPolygon (minimap_window, points,
         cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorDark, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill	  
     end -- v south
	elseif RoomExit[i] == "east" then
	 if RoomType[i] == "C" then
      cColorLight = GetVariable("cColorLightc") or ColourNameToRGB("red")
	  cColorDark = GetVariable("cColorDarkc") or ColourNameToRGB("darkred")
      -- east arrow bottom half
      points = string.format ("%i,%i,%i,%i,%i,%i", 88, 50, 116, 50, 88, 55)
      WindowPolygon (minimap_window, points,
         cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorLight, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
      -- east arrow top half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 88, 45, 116, 50, 88, 50)
      WindowPolygon (minimap_window, points,
         cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorDark, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
	 end -- RoomType
	 if v == "east" then
      cColorLight = GetVariable("cColorLighto") or ColourNameToRGB("lime")
	  cColorDark = GetVariable("cColorDarko") or ColourNameToRGB("green")
      -- east arrow bottom half
      points = string.format ("%i,%i,%i,%i,%i,%i", 88, 50, 116, 50, 88, 55)
      WindowPolygon (minimap_window, points,
         cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorLight, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
      -- east arrow top half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 88, 45, 116, 50, 88, 50)
      WindowPolygon (minimap_window, points,
         cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorDark, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
     end -- v east	  
    elseif RoomExit[i] == "west" then
	 if RoomType[i] == "C" then
      cColorLight = GetVariable("cColorLightc") or ColourNameToRGB("red")
	  cColorDark = GetVariable("cColorDarkc") or ColourNameToRGB("darkred")
      -- west arrow top half
      points = string.format ("%i,%i,%i,%i,%i,%i", 74, 45, 46, 50, 74, 50)
      WindowPolygon (minimap_window, points,
         cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorLight, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
      -- west arrow bottom half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 74, 50, 46, 50, 74, 55)
      WindowPolygon (minimap_window, points,
         cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorDark, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
	 end -- RoomType
	 if v == "west" then
      cColorLight = GetVariable("cColorLighto") or ColourNameToRGB("lime")
	  cColorDark = GetVariable("cColorDarko") or ColourNameToRGB("green")
      -- west arrow top half
      points = string.format ("%i,%i,%i,%i,%i,%i", 74, 45, 46, 50, 74, 50)
      WindowPolygon (minimap_window, points,
         cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorLight, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
      -- west arrow bottom half shadow
      points = string.format ("%i,%i,%i,%i,%i,%i", 74, 50, 46, 50, 74, 55)
      WindowPolygon (minimap_window, points,
         cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
         cColorDark, miniwin.brush_solid, -- brush (solid)
         true, -- close
         false) -- alt fill
	 end -- v west
    elseif RoomExit[i] == "up" then
	 if RoomType[i] == "C" then
      cColorLight = GetVariable("cColorLightc") or ColourNameToRGB("red")
      --/ up ladder /--
      -- ladder steps
      WindowLine (minimap_window, 108, 11, 116, 11, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 15, 116, 15, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 19, 116, 19, cColorLight, miniwin.pen_solid, 1)
      -- ladder sides
      WindowLine (minimap_window, 108, 8, 108, 23, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 115, 8, 115, 23, cColorLight, miniwin.pen_solid, 1)
	 end -- RoomType
	 if v == "up" then
	  cColorLight = GetVariable("cColorLighto") or ColourNameToRGB("lime")
      --/ up ladder /--
      -- ladder steps
      WindowLine (minimap_window, 108, 11, 116, 11, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 15, 116, 15, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 19, 116, 19, cColorLight, miniwin.pen_solid, 1)
      -- ladder sides
      WindowLine (minimap_window, 108, 8, 108, 23, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 115, 8, 115, 23, cColorLight, miniwin.pen_solid, 1)
   	 end -- v up
    elseif RoomExit[i] == "down" then
	 if RoomType[i] == "C" then
	  cColorLight = GetVariable("cColorLightc") or ColourNameToRGB("lime")
      --/ down ladder /--
      -- ladder steps
      WindowLine (minimap_window, 108, 78, 116, 78, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 82, 116, 82, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 86, 116, 86, cColorLight, miniwin.pen_solid, 1)
      -- ladder sides
      WindowLine (minimap_window, 108, 75, 108, 90, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 115, 75, 115, 90, cColorLight, miniwin.pen_solid, 1)
	 end -- RoomType
	 if v == "down" then
	  cColorLight = GetVariable("cColorLighto") or ColourNameToRGB("lime")
      --/ down ladder /--
      -- ladder steps
      WindowLine (minimap_window, 108, 78, 116, 78, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 82, 116, 82, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 108, 86, 116, 86, cColorLight, miniwin.pen_solid, 1)
      -- ladder sides
      WindowLine (minimap_window, 108, 75, 108, 90, cColorLight, miniwin.pen_solid, 1)
      WindowLine (minimap_window, 115, 75, 115, 90, cColorLight, miniwin.pen_solid, 1)
     end -- v down	  
    end -- RoomExit north
   end -- for k v
  end -- for i
 end -- if ExitCount and curRoom_exits
end -- draw_minimap

function draw_energy_bars ()
 -- HEALTH
 current_health = msdp["HEALTH"]
 max_health = msdp["HEALTH_MAX"]
 -- initialise with empty bars
 if current_health == nil then
  current_health = 0
  max_health = 0
 end -- if
 if current_health ~= nil and max_health ~= nil then
  type_bar = "Health"
  colour = GetVariable("health_color") or 0x0000CC
  colour2 = GetVariable("health_colorB") or 0x000033
  draw_energy_bar(type_bar, colour, colour2, health_window, current_health, max_health)
 end -- if
 -- MANA
 current_mana = msdp["MANA"]
 max_mana = msdp["MANA_MAX"]
 -- initialise with empty bars
 if current_mana == nil then
  current_mana = 0
  max_mana = 0
 end -- if
 if current_mana ~= nil and max_mana ~= nil then
  type_bar = "Mana"
  colour = GetVariable("mana_color") or 0xCC0000
  colour2 = GetVariable("mana_colorB") or 0x330000
  draw_energy_bar(type_bar, colour, colour2, mana_window, current_mana, max_mana)
 end -- if
 -- MOVEMENT
 current_movement = msdp["MOVEMENT"]
 max_movement = msdp["MOVEMENT_MAX"]
 -- initialise with empty bars
 if current_movement == nil then
  current_movement = 0
  max_movement = 0
 end -- if
 if current_movement ~= nil and max_movement ~= nil then
  type_bar = "Move"
  colour = GetVariable("move_color") or 0x00CC00
  colour2 = GetVariable("move_colorB") or 0x003300
  draw_energy_bar(type_bar, colour, colour2, movement_window, current_movement, max_movement)
 end -- if
 -- EXP
 current_exp = msdp["OPPONENT_HEALTH"]
 max_exp = 100
 -- initialise with empty bars
 if current_exp == nil then
  current_exp = 0
  max_exp = 0
 end -- if
 if current_exp ~= nil and max_exp ~= nil then
  type_bar = "Enemy"
  colour = GetVariable("enemy_color") or 0x00CCCC
  colour2 = GetVariable("enemy_colorB") or 0x003333
  draw_energy_bar(type_bar, colour, colour2, exp_window, current_exp, max_exp)
 end -- if
end -- draw_energy_bars

function draw_energy_bar (type_bar, colour, colour2, window, current_value, max_value)
 -- convert the strings to numbers
 current = tonumber(current_value)
 max = tonumber(max_value)
 -- Calculate health
 if current < 0 then
  current = 0
 elseif current > max then
  current = max
 end -- if
 custom_bar_color_highlight_top = GetVariable("custom_bar_color_highlight_top")
 custom_bar_color_highlight_bottom = GetVariable("custom_bar_color_highlight_bottom")  
 if custom_bar_color_highlight_top == nil then
  custom_bar_color_highlight_top = ColourNameToRGB("black")
  SetVariable("prompt_checked", "default")
 end -- custom color check   
 if custom_bar_color_highlight_bottom == nil then
  custom_bar_color_highlight_bottom = ColourNameToRGB("black")
 end -- custom color check  
 -- clear the bars
 WindowGradient (window, 0, -1, 200, 10, custom_bar_color_highlight_top, colour2, 2)
 WindowGradient (window, 0, 10, 200, 21, colour2, custom_bar_color_highlight_bottom, 2)
 -- calculate the filled part
 if max > 0 then
  filled = current * 200 / max
 else -- avoid division by zero
  filled = 0
 end -- if
 -- redraw the bars
 if current > 0 then
  WindowGradient (window, 0, -1, filled, 10, custom_bar_color_highlight_top, colour, 2)
  WindowGradient (window, 0, 10, filled, 21, colour, custom_bar_color_highlight_bottom, 2)
 end -- if
 -- write the information inside
 barPer = filled / 2
 colour_cust = GetVariable("bar_text_color") or ColourNameToRGB("white")
 outlined_text (colour_cust, window, type_bar, 9, 3, 3, 0)
 outlined_text (colour_cust, window, math.ceil(barPer)..'%', 9, 55, 3, 0)
end -- draw_energy_bar

function init_affects (data)
 index = 0
 startpos = 1
 max = 0
 for i=startpos,string.len(data),1 do
  if string.byte(data,i) == 1 or i == string.len(data) then
   if string.byte(data,i) == 1 then
    endpos = 1
   else
    endpos = 0
   end -- if
   variable = string.sub(data,startpos,i-endpos)
   startpos = i+1
   index = index + 1
   pos1 = string.find(variable, "\002")
   if pos1 ~= nil then
    AffectName[index] = string.sub(variable, 1, pos1-1)
    AffectDuration[index] = string.sub(variable, pos1+1)
   end -- if
  end -- if
 end -- for
 -- AffectMax is the highest EVER number - we need to keep track of all created icons
 if index < AffectMax then
  for i=index+1,AffectMax,1 do
   AffectName[i] = nil
   win = "affect_window_"..i
   WindowShow (win, false)
  end -- for
  AffectMax = index
 elseif index > AffectMax then
  AffectMax = index
 end -- if
end -- function

function list_affects ()
 print(affects)
end -- list_affects

function build_avatar_window ()
 WindowCreate (avatar_window,   -- window ID
    AVATAR_LEFT_POSITION,   -- left
    85,     -- top
    117,-- width
    117, -- depth
    12,         -- center it (ignored anyway) 
    6,          -- draw underneath (1) + absolute location (2)
    0x000000)  -- background colour
 -- load the avatar image
 if GetVariable("avatar_checked") == "one" then
  WindowLoadImage (avatar_window, "avatar", GetInfo (66) .. "Generic/avatars/Default.png")
 elseif GetVariable("avatar_checked") == "browse" then
  WindowLoadImage (avatar_window, "avatar", GetVariable("avatar_filename"))
 else
  WindowLoadImage (avatar_window, "avatar", GetInfo (66) .. "Generic/avatars/Default.png")
 end -- avatar check
 WindowDrawImage (avatar_window, "avatar", 0, 0, 117, 117, 2)  -- draw it  
 WindowShow (avatar_window, true)
end -- function build_avatar_window

function draw_affects ()
 affects = msdp["AFFECTS"]
 if affects == nil or affects == "None" then
  for i=1,AffectMax,1 do
   WindowShow ("affect_window_"..i, false)
  end -- for
  AffectMax = 0
  return
 end -- if
 init_affects (affects)
 offset_x = 0
 offset_y = 0
 for i=1,AffectMax,1 do
  if AffectName[i] ~= nil then
   win = "affect_window_"..i
   affect = "affect_"..i
   -- draw the icons left to right, top to bottom
   if i > 1 then
    if offset_x == 0 then
     offset_x = 36
    elseif offset_x == 36 then
     offset_x = 72
    elseif offset_x == 72 then
     offset_x = 108
    else
     offset_x = 0
     offset_y = offset_y + 36      
    end -- if
   end -- if
   colour = colourWhite
   -- make a miniwindow under the text
   WindowCreate (win,   -- window ID
        SPELLS_LEFT_POSITION+offset_x,  -- left
        SPELLS_TOP_POSITION+offset_y, -- top
        34,           -- width
        34,           -- depth
        12,           -- center it (ignored anyway) 
        2,            -- draw underneath (1) + absolute location (2)
        colourBlack)      -- background colour
    -- load the icon
    if WindowLoadImage (win, affect, GetInfo (66) .. "Generic/affects/" .. AffectName[i] .. ".png") == eOK then
     WindowDrawImage (win, affect, 1, 1, 33, 33, 2)  -- draw the icon
    elseif WindowLoadImage (win, affect, GetInfo (66) .. "Generic/affects/default.png") == eOK then
     WindowDrawImage (win, affect, 1, 1, 33, 33, 2)  -- draw the default icon instead
    else -- even the default spell icon is missing
     Note( "Missing spell icons.")
     return
    end -- if
    -- create the pie-shape - based on an example by Nick Gammon
    timer = tonumber(AffectDuration[i])
    -- for drawing cooldowns (window not visible)
    backgroundColour = ColourNameToRGB ("black")
    tempwin = GetPluginID() .. ":temp"
    WindowCreate (tempwin, 
        SPELLSCOOLDOWN_LEFT_POSITION, 3,   -- left, top 
        28,     -- width
        28,     -- height
        12,     -- position mode
        0,      -- flags
        backgroundColour) 
   if timer > 1 and timer < 10 then
    percent = timer / 10.0
    -- calculate pie end point
    endy = (math.cos(math.rad (percent * 360 + 90)) * 28) + 14
    endx = (-1 * math.sin(math.rad (percent * 360 + 90)) * 28) + 14
    -- clear temporary window
    WindowRectOp (tempwin, 2, 0, 0, 0, 0, 0xFFFFFF)  -- fill with white
    -- draw the pie showing amount of cooldown
    WindowCircleOp (tempwin, 5, -10, -10, 38, 38,   -- pie
        0xFFFFFF, 5, 0,   -- no pen
        0x000000, 0,      -- solid brush, black
        14, 0,            -- from 12 o'clock position
        endy, endx)
    -- turn pie shape into an image
    WindowImageFromWindow(win, "mask", tempwin)
    -- blend in (darken mode) with 100% opacity
    WindowBlendImage(win, "mask", 
        3, 3, 31, 31,  -- rectangle
        1, 0.5)       -- mode and opacity
   elseif timer > 0 and timer < 2 then
    percent = timer / 10.0
    -- calculate pie end point
    endy = (math.cos(math.rad (percent * 360 + 90)) * 28) + 14
    endx = (-1 * math.sin(math.rad (percent * 360 + 90)) * 28) + 14
    -- clear temporary window
    WindowRectOp (tempwin, 2, 0, 0, 0, 0, 0x0000FF)  -- fill with red
    -- draw the pie showing amount of cooldown
    WindowCircleOp (tempwin, 5, -10, -10, 38, 38,   -- pie
        0x000000, 5, 0,   -- no pen
        0x000000, 0,      -- solid brush, black
        14, 0,            -- from 12 o'clock position
        endy, endx)
    -- turn pie shape into an image
    WindowImageFromWindow(win, "mask", tempwin)
    -- blend in (darken mode) with 100% opacity
    WindowBlendImage(win, "mask", 
        3, 3, 31, 31,  -- rectangle
        1, 0.5)       -- mode and opacity
   elseif timer == 0 then
    percent = timer + 60
    -- calculate pie end point
    endy = (math.cos(math.rad (percent * 360 + 90)) * 28) + 14
    endx = (-1 * math.sin(math.rad (percent * 360 + 90)) * 28) + 14
    -- clear temporary window
    WindowRectOp (tempwin, 2, 0, 0, 0, 0, 0x0000FF)  -- fill with red
    -- draw the pie showing amount of cooldown
    WindowCircleOp (tempwin, 5, -10, -10, 38, 38,   -- pie
        0x000000, 5, 0,   -- no pen
        0x000000, 0,      -- solid brush, black
        14, 0,            -- from 12 o'clock position
        endy, endx)
    -- turn pie shape into an image
    WindowImageFromWindow(win, "mask", tempwin)
    -- blend in (darken mode) with 100% opacity
    WindowBlendImage(win, "mask", 
        3, 3, 31, 31,  -- rectangle
        1, 0.5)       -- mode and opacity
   end -- if
   if tonumber(AffectDuration[i]) < 10 then
    offset = 9
   elseif tonumber(AffectDuration[i]) < 100 then
    offset = 5
   else -- two digits
    offset = 1
   end -- if
   if tonumber(AffectDuration[i]) < 0 then
    -- draw an infinity symbol
    outlined_text (colour, win, "O", 6, 4, 21, 0)
    outlined_text (colour, win, "O", 6, 9, 21, 0)
    -- go over the first 'O' again, removing the outline from the second 'O'
    WindowFont(win,'f','Times New Roman',6,1,0,0,0)
    WindowText(win,'f',"O",4,21,0,0,colour,0)
   else -- write the duration
    outlined_text (colour, win, AffectDuration[i], 6, 4, 21, 0)
   end -- if
   -- show the window
   WindowShow (win, true)
   -- create a hotspot over the timer
   WindowAddHotspot(win, "hs_affect_"..i, 0, 0, 34, 34, "", "", "", "", "MouseUp_aff", AffectName[i], 1, 0)
  end -- if
 end -- for
end -- draw_affects

function MouseUp_aff(flags, hotspot_id)
 print("Sorry! Clicking the icon does nothing for now..")
end -- function MouseUp_aff

function outlined_text (colour, window, text, size, x, y, centre_width)
 outlineColour = colourBlack
 -- write the information inside
 WindowFont(window,'f','Verdana',size,1,0,0,0)
 if centre_width > 0 then
  width = WindowTextWidth (window, 'f', text)
  x = x + ((centre_width-width) / 2)
 end -- if
 -- smear black text around the location to create an outline
 WindowText(window,'f',text,x+1,y+1,0,0,outlineColour,0)
 WindowText(window,'f',text,x+1,y,0,0,outlineColour,0)
 WindowText(window,'f',text,x+1,y-1,0,0,outlineColour,0)
 WindowText(window,'f',text,x,y+1,y,0,outlineColour,0)
 WindowText(window,'f',text,x,y-1,y,0,outlineColour,0)
 WindowText(window,'f',text,x-1,y+1,0,0,outlineColour,0)
 WindowText(window,'f',text,x-1,y,0,0,outlineColour,0)
 WindowText(window,'f',text,x-1,y-1,0,0,outlineColour,0)
 -- display the text
 WindowText(window,'f',text,x,y,0,0,colour,0)
 return width
end -- function outlined_text

function main_text_area () 
 -- tell the client where to draw the text
 if GetVariable("bgColour") ~= nil then
  TextRectangle(left+4,  
    top,   
    right+197,
    bottom - 4,  
    0,  -- BorderOffset, 
    colourWhite,    -- BorderColour, 
    0,  -- BorderWidth, 
    tonumber(GetVariable ("bgColour")),  -- OutsideFillColour, 
    0) -- OutsideFillStyle (fine hatch)
 else
  TextRectangle(left+4,  
    top,   
    right+197,
    bottom - 4,  
    0,  -- BorderOffset, 
    colourWhite,    -- BorderColour, 
    0,  -- BorderWidth, 
    colourWhite,  -- OutsideFillColour, 
    8) -- OutsideFillStyle (fine hatch)
 end -- bgColour
end -- function main_text_area

function create_titlebar ()
 -- make a miniwindow to the left of the text
 WindowCreate (titlebar_window,   -- window ID
    TITLEBAR_LEFT_POSITION,   -- left
    3,   -- top
    161, -- width
    85, -- depth
    12,  -- center it (ignored anyway) 
    6,          -- draw underneath (1) + absolute location (2) + transparent (4)
    0x000000)  -- background colour
	

 DrawThemed3DRect(titlebar_window, 65, 0, 104, 13)
 outlined_text (colourWhite, titlebar_window, "settings", 5, 68, 2, 0)
 WindowAddHotspot(titlebar_window, "bgbutton", 65, 0, 104, 13, 
    "", "", "MouseDown_button", "", "MouseUp_button", "", 
    0, 0)
 
 DrawThemed3DRect(titlebar_window, 105, 0, 163, 13)
 outlined_text (colourWhite, titlebar_window, "new settings", 5, 108, 2, 0)
 WindowAddHotspot(titlebar_window, "bgbuttonNew", 105, 0, 163, 13, 
    "", "", "MouseDown_buttonNew", "", "MouseUp_buttonNew", "", 
    0, 0)
	
 -- load the titlebar image
 WindowLoadImage (titlebar_window, "titlebar", GetInfo (66) .. "Generic/layout/Generic_title_small.png")
 -- draw it
 WindowDrawImage (titlebar_window, "titlebar", 57, 25, 0, 0, 3)  -- draw it 
if CHAT_VISIBILITY == false then 
 WindowRectOp(titlebar_window, miniwin.rect_draw_edge, 5, 60, 64, 76, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
 outlined_text (colourTFC, titlebar_window, "Chat Window", 5, 8, 62, 0)
else
 DrawThemed3DRect(titlebar_window, 5, 60, 64, 76)
 outlined_text (colourWhite, titlebar_window, "Chat Window", 5, 8, 62, 0)
end -- CHAT_VISIBILITY
 WindowAddHotspot(titlebar_window, "chbutton", 5, 60, 64, 76, 
    "", "", "MouseDown_ch", "", "MouseUp_ch", "", 
    0, 0)
if PROMPT_BARS_VISIBILITY == false then
 WindowRectOp(titlebar_window, miniwin.rect_draw_edge, 107, 60, 161, 76, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
 outlined_text (colourTFC, titlebar_window, "Prompt Bars", 5, 110, 62, 0)
else
 DrawThemed3DRect(titlebar_window, 107, 60, 161, 76)
 outlined_text (colourWhite, titlebar_window, "Prompt Bars", 5, 110, 62, 0)
end -- PROMPT_BARS_VISIBILITY
 WindowAddHotspot(titlebar_window, "barsbutton", 107, 60, 161, 76, 
    "", "", "MouseDown_bars", "", "MouseUp_bars", "", 
    0, 0)
 -- show the window
 WindowShow (titlebar_window, true)
end -- function create_titlebar

function create_minimap_window ()
 -- make a miniwindow for the map
 WindowCreate (minimap_window,   -- window ID
    MINIMAP_LEFT_POSITION,         -- left
    top_map+167,    -- top
    120,        -- width
    120,        -- depth
    12,         -- center it (ignored anyway) 
    6,          -- draw underneath (1) + absolute location (2)
    0x000000)  -- background colour
 cColorLight = GetVariable("cColorLight") or ColourNameToRGB("white")
 cColorDark = GetVariable("cColorDark") or ColourNameToRGB("dimgray")
 cColorLighto = GetVariable("cColorLighto") or ColourNameToRGB("lime")
 cColorDarko = GetVariable("cColorDarko") or ColourNameToRGB("green")
 cColorLightc = GetVariable("cColorLightc") or ColourNameToRGB("red")
 cColorDarkc = GetVariable("cColorDarkc") or ColourNameToRGB("darkred")
 outlined_text (cColorLight, minimap_window, "*", 10, 77, 44, 0)
 WindowCircleOp (minimap_window, 4, 75, 44, 88, 57,
    cColorLight, 0, 2, ColourNameToRGB("cyan"), 1, 
    0, 0, 0, 0) 
 -- north arrow right half
 points = string.format ("%i,%i,%i,%i,%i,%i", 81, 43, 81, 8, 86, 43)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- north arrow left half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 76, 43, 81, 8, 81, 43)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- south arrow left half
 points = string.format ("%i,%i,%i,%i,%i,%i", 76, 57, 81, 90, 81, 57)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- south arrow right half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 81, 57, 81, 90, 86, 57)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- east arrow bottom half
 points = string.format ("%i,%i,%i,%i,%i,%i", 88, 50, 116, 50, 88, 55)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- east arrow top half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 88, 45, 116, 50, 88, 50)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- west arrow top half
 points = string.format ("%i,%i,%i,%i,%i,%i", 74, 45, 46, 50, 74, 50)
 WindowPolygon (minimap_window, points,
    cColorLight, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorLight, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 -- west arrow bottom half shadow
 points = string.format ("%i,%i,%i,%i,%i,%i", 74, 50, 46, 50, 74, 55)
 WindowPolygon (minimap_window, points,
    cColorDark, miniwin.pen_solid, 1, -- pen (solid, width 1)
    cColorDark, miniwin.brush_solid, -- brush (solid)
    true, -- close
    false) -- alt fill
 --/ up ladder /--
 -- ladder steps
 WindowLine (minimap_window, 108, 11, 116, 11, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 15, 116, 15, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 19, 116, 19, cColorLight, miniwin.pen_solid, 1)
 -- ladder sides
 WindowLine (minimap_window, 108, 8, 108, 23, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 115, 8, 115, 23, cColorLight, miniwin.pen_solid, 1)
 --/ down ladder /--
 -- ladder steps
 WindowLine (minimap_window, 108, 78, 116, 78, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 82, 116, 82, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 108, 86, 116, 86, cColorLight, miniwin.pen_solid, 1)
 -- ladder sides
 WindowLine (minimap_window, 108, 75, 108, 90, cColorLight, miniwin.pen_solid, 1)
 WindowLine (minimap_window, 115, 75, 115, 90, cColorLight, miniwin.pen_solid, 1)
 WindowShow (minimap_window, true)
end -- function create_minimap_window

function create_sidebar_button ()
 bt_height = GetInfo(280) / 2
 -- make a miniwindow to the left of the text
 WindowCreate (sidebar_button_window,   -- window ID
    SIDEBAR_LEFT_POSITION + 3,   -- left
    bt_height - 27.5,   -- top
    23, -- width
    55, -- depth
    12,  -- center it (ignored anyway) 
    6,          -- draw underneath (1) + absolute location (2) + transparent (4)
    0x000000)  -- background colour
 if which_sidebar_image or GetVariable("SIDEBAR_STATUS") == "closed" then
  WindowLoadImage (sidebar_button_window, "open_button", GetInfo (66) .. "Generic/layout/open.png")
  WindowDrawImage (sidebar_button_window, "open_button", 0, 0, 0, 0, 1)  -- draw it
  WindowAddHotspot(sidebar_button_window, "open_it", 0, 0, 23, 55, 
    "", "", "MouseDown_sidebar_button_op", "", "MouseUp_sidebar_button_op", "", 
    1, 0)
 else
  WindowLoadImage (sidebar_button_window, "close_button", GetInfo (66) .. "Generic/layout/close.png")
  WindowDrawImage (sidebar_button_window, "close_button", 0 - 1, 0, 0, 0, 1)  -- draw it
  WindowAddHotspot(sidebar_button_window, "close_it", 0, 0, 23, 55, 
    "", "", "MouseDown_sidebar_button", "", "MouseUp_sidebar_button", "", 
    1, 0)
 end -- which_sidebar_image
 WindowShow (sidebar_button_window, true)
end -- function create_sidebar_button

function MouseUp_sidebar_button(flags, hotspot_id)
 sidebar_closing = true
 while sidebar_closing do
  if SIDEBAR_LEFT_POSITION < 0 then
   sidebar_closing = false
   which_sidebar_image = true
   create_sidebar_button ()
   WindowShow( titlebar_window, false )
   SetVariable("AVATAR_LEFT_POSITION", AVATAR_LEFT_POSITION)
   SetVariable("SIDEBAR_LEFT_POSITION", SIDEBAR_LEFT_POSITION)
   SetVariable("TITLEBAR_LEFT_POSITION", TITLEBAR_LEFT_POSITION)
   SetVariable("MINIMAP_LEFT_POSITION", MINIMAP_LEFT_POSITION)
   SetVariable("SPELLS_LEFT_POSITION", SPELLS_LEFT_POSITION)
   SetVariable("SPELLSCOOLDOWN_LEFT_POSITION", SPELLSCOOLDOWN_LEFT_POSITION)
   SetVariable("ENEM_BAR_LEFT_POSITION", ENEM_BAR_LEFT_POSITION)
   SetVariable("HEALTH_BAR_LEFT_POSITION", HEALTH_BAR_LEFT_POSITION)
   SetVariable("MANA_BAR_LEFT_POSITION", MANA_BAR_LEFT_POSITION)
   SetVariable("CHATS_LEFT_POSITION", CHATS_LEFT_POSITION)
   SetVariable("WINDOW_WIDTH", WINDOW_WIDTH)
   SetVariable("SB_BG_LEFT_POSITION", SB_BG_LEFT_POSITION)
   SetVariable("left", left)
   SetVariable("sepW", sepW)
   SetVariable("SIDEBAR_STATUS", "closed")
  else
   AVATAR_LEFT_POSITION = AVATAR_LEFT_POSITION - 10
   build_avatar_window ()
   SIDEBAR_LEFT_POSITION = SIDEBAR_LEFT_POSITION - 10
   create_sidebar_button ()
   TITLEBAR_LEFT_POSITION = TITLEBAR_LEFT_POSITION - 10
   create_titlebar ()
   MINIMAP_LEFT_POSITION = MINIMAP_LEFT_POSITION - 10
   create_minimap_window ()   
   SPELLS_LEFT_POSITION = SPELLS_LEFT_POSITION - 10
   SPELLSCOOLDOWN_LEFT_POSITION = SPELLSCOOLDOWN_LEFT_POSITION - 10
   draw_affects ()
   left = left - 10
   main_text_area ()
   HEALTH_BAR_LEFT_POSITION = HEALTH_BAR_LEFT_POSITION - 5
   ENEM_BAR_LEFT_POSITION = ENEM_BAR_LEFT_POSITION - 10
   MANA_BAR_LEFT_POSITION = MANA_BAR_LEFT_POSITION - 5
   build_prompt_bars ()
   draw_energy_bars ()
   CHATS_LEFT_POSITION = CHATS_LEFT_POSITION - 10
   WINDOW_WIDTH = WINDOW_WIDTH + 10
   init(true)
   sepW = sepW + 10
   build_chatLine ()
   build_promptLine ()
   if CHAT_HIDDEN ~= false then
    WindowShow( Win, false )
   end -- chat_closing
   SB_BG_LEFT_POSITION = SB_BG_LEFT_POSITION - 10
   sidebar_background()
   Repaint()
  end -- SIDEBAR_LEFT_POSITION 
 end  -- while loop sidebar_closing 
end -- function MouseUp_sidebar_button

function MouseUp_sidebar_button_op(flags, hotspot_id)
 sidebar_closing = true
 WindowShow( titlebar_window, true )
 while sidebar_closing do
  if SIDEBAR_LEFT_POSITION > 155 then
   sidebar_closing = false
   which_sidebar_image = false
   build_avatar_window ()
   SetVariable("SIDEBAR_STATUS", "opened")
   create_sidebar_button ()
  else
   AVATAR_LEFT_POSITION = AVATAR_LEFT_POSITION + 10
   build_avatar_window ()
   SIDEBAR_LEFT_POSITION = SIDEBAR_LEFT_POSITION + 10
   create_sidebar_button ()
   TITLEBAR_LEFT_POSITION = TITLEBAR_LEFT_POSITION + 10
   create_titlebar ()
   MINIMAP_LEFT_POSITION = MINIMAP_LEFT_POSITION + 10
   create_minimap_window ()  
   SPELLS_LEFT_POSITION = SPELLS_LEFT_POSITION + 10
   SPELLSCOOLDOWN_LEFT_POSITION = SPELLSCOOLDOWN_LEFT_POSITION + 10
   draw_affects ()
   left = left + 10
   main_text_area ()
   HEALTH_BAR_LEFT_POSITION = HEALTH_BAR_LEFT_POSITION + 5
   ENEM_BAR_LEFT_POSITION = ENEM_BAR_LEFT_POSITION + 10
   MANA_BAR_LEFT_POSITION = MANA_BAR_LEFT_POSITION + 5
   build_prompt_bars ()
   draw_energy_bars ()
   CHATS_LEFT_POSITION = CHATS_LEFT_POSITION + 10
   WINDOW_WIDTH = WINDOW_WIDTH - 10
   init(true)
   sepW = sepW - 10
   build_chatLine ()
   build_promptLine ()
   if CHAT_HIDDEN ~= false then
    WindowShow( Win, false )
   end -- chat_closing
   SB_BG_LEFT_POSITION = SB_BG_LEFT_POSITION + 10
   sidebar_background()
   Repaint()
  end -- SIDEBAR_LEFT_POSITION 
 end  -- while
end -- function MouseUp_sidebar_button_op

function MouseUp_ch()
 CHAT_VISIBILITY = not CHAT_VISIBILITY
 if CHAT_VISIBILITY == true then
  DrawThemed3DRect(titlebar_window, 5, 60, 64, 76)
  outlined_text (colourWhite, titlebar_window, "Chat Window", 5, 8, 62, 0)
 else
  WindowRectOp(titlebar_window, miniwin.rect_draw_edge, 5, 60, 64, 76, 
    miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
  outlined_text (colourTFC, titlebar_window, "Chat Window", 5, 8, 62, 0)
 end -- CHAT_VISIBILITY
 Redraw()
 if CHAT_VISIBILITY == true then
  chat_closing = true
  while chat_closing do
   if CHATS_TOP_POSITION < -75 then
    chat_closing = false
    WindowShow( Win, false )
    CHAT_HIDDEN = true
	SetVariable("CHATS_TOP_POSITION", CHATS_TOP_POSITION)
	SetVariable("CHAT_VISIBILITY", tostring(CHAT_VISIBILITY))
	SetVariable("top", top)
	SetVariable("sepOne_top", sepOne_top)
   else
    CHATS_TOP_POSITION = CHATS_TOP_POSITION - 5
    init(true)
    top = top - 5
    main_text_area ()
    sepOne_top = sepOne_top - 5
    build_chatLine ()
    Repaint()
   end -- CHATS_TOP_POSITION 
  end  -- while loop sidebar_closing
 end -- CHAT_VISIBILITY
 if CHAT_VISIBILITY == false then
  chat_closing = true
  WindowShow( Win, true )
  while chat_closing do
   if CHATS_TOP_POSITION > -3 then
    chat_closing = false
    CHAT_HIDDEN = false
	SetVariable("CHATS_TOP_POSITION", CHATS_TOP_POSITION)
	SetVariable("CHAT_VISIBILITY", tostring(CHAT_VISIBILITY))
	SetVariable("top", top)
	SetVariable("sepOne_top", sepOne_top)
   else
    CHATS_TOP_POSITION = CHATS_TOP_POSITION + 5
    init(true)
    top = top + 5
    main_text_area ()
    sepOne_top = sepOne_top + 5
    build_chatLine ()
    Repaint()
   end -- CHATS_TOP_POSITION 
  end  -- while loop sidebar_closing
 end -- CHAT_VISIBILITY
end -- function MouseUp_ch

function MouseUp_bars()
 PROMPT_BARS_VISIBILITY = not PROMPT_BARS_VISIBILITY
 if PROMPT_BARS_VISIBILITY == true then
  DrawThemed3DRect(titlebar_window, 107, 60, 161, 76)
  outlined_text (colourWhite, titlebar_window, "Prompt Bars", 5, 110, 62, 0)
 else
  WindowRectOp(titlebar_window, miniwin.rect_draw_edge, 107, 60, 161, 76, 
    miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
  outlined_text (colourTFC, titlebar_window, "Prompt Bars", 5, 110, 62, 0)
 end -- PROMPT_BARS_VISIBILITY
 Redraw()
 bars_orig = GetInfo (280) + 2
 if PROMPT_BARS_VISIBILITY == true then
  bars_closing = true
  while bars_closing do
   if bars_bottom > bars_orig then
    bars_closing = false
    main_text_area ()
	SetVariable("bars_bottom", bars_bottom)
	SetVariable("bottom", bottom)
	SetVariable("PROMPT_BARS_VISIBILITY", tostring(PROMPT_BARS_VISIBILITY))
   else
    bars_bottom = bars_bottom + 3
    build_prompt_bars ()
    draw_energy_bars ()
    bottom = bottom + 3
    main_text_area ()
    build_promptLine ()
    Repaint()
   end -- bars_bottom 
  end  -- while loop bars_closing
 end -- PROMPT_BARS_VISIBILITY
 bars_orig = GetInfo (280) - 17
 if PROMPT_BARS_VISIBILITY == false then
  bars_closing = true
  while bars_closing do
   if bars_bottom < bars_orig then
    bars_closing = false
    main_text_area ()
	SetVariable("bars_bottom", bars_bottom)
	SetVariable("bottom", bottom)
	SetVariable("PROMPT_BARS_VISIBILITY", tostring(PROMPT_BARS_VISIBILITY))
   else
    bars_bottom = bars_bottom - 3
    build_prompt_bars ()
    draw_energy_bars ()
    bottom = bottom - 3
    main_text_area ()
    build_promptLine ()
    Repaint()
   end -- bars_bottom 
  end  -- while loop bars_closing
 end -- PROMPT_BARS_VISIBILITY
end -- function MouseUp_bars

function build_chatLine ()
 WindowCreate(line_sepOne, ENEM_BAR_LEFT_POSITION, sepOne_top, sepW, 4, 4, 6, 0x000000)
 WindowLine (line_sepOne, 0, 2, sepW, 2, GetVariable("SBbarC"), miniwin.pen_solid, 1)
 WindowShow( line_sepOne, true)
end -- function build_chatLine

function build_promptLine ()
 WindowCreate(line_sepTwo, ENEM_BAR_LEFT_POSITION, bars_bottom - 4, sepW, 1, 4, 6, 0x000000)
 WindowLine (line_sepTwo, 0, 0, sepW, 0, GetVariable("SBbarC"), miniwin.pen_solid, 1)
 WindowShow( line_sepTwo, true)
end -- function build_promptLine

function OnPluginTelnetRequest (type_msdp, data)
 if type_msdp == MSDP and data == "WILL" then
  using_msdp = true
  return true
 elseif type_msdp == MSDP and data == "SENT_DO" then
  -- IAC SB MSDP response IAC SE 
  SendPkt ("\255\250\69\1REPORT\2AREA_NAME\2PRACTICE\2MONEY\2SERVER_TIME\2SNIPPET_VERSION\2SERVER_ID\2CHARACTER_NAME\2RACE\2CLASS\2CLASS2\2CLASS3\2HEALTH_MAX\2HEALTH\2MANA_MAX\2MANA\2MOVEMENT_MAX\2MOVEMENT\2EXPERIENCE\2EXPERIENCE_TNL\2LEVEL\2ALIGNMENT\2AFFECTS\2WIMPY\2OPPONENT_HEALTH_MAX\2OPPONENT_HEALTH\2OPPONENT_LEVEL\2OPPONENT_NAME\2ROOM_EXITS\2ROOM_NAME\2ROOM_VNUM\2WORLD_TIME\2\255\240")
  return true
 else -- another protocol
  return false
 end -- if
end -- function OnPluginTelnetRequest

function OnPluginTelnetSubnegotiation (type_msdp, data)
 if type_msdp == MSDP then
  endpos = string.len(data)
  bName = false
  bValue = false
  bTable = false
  bIgnore = false
  variable = nil
  value = nil
  --Note('Raw data: ['..data..']')
  for i=1,endpos,1 do
   if string.byte(data,i) == 1 and bTable == false then
    if variable ~= nil and value ~= nil then
     StoreVariable(variable, value)
     variable = nil
     value = nil
    end -- if
    bName = true
    bValue = false
   elseif string.byte(data,i) == 2 and bTable == false then
    if value ~= nil then
     value = value.." "
    end -- if
    bName = false
    bValue = true
   elseif string.byte(data,i) == 3 then
    bTable = true
    bIgnore = true
   elseif string.byte(data,i) == 4 then
    bTable = false
   elseif bIgnore == true then
    bIgnore = false -- Just ignore one character.
   elseif bName == true then
    if variable == nil then
     variable = ""
    end -- if
    variable = variable..string.sub(data,i,i)
   elseif bValue == true then
    if value == nil then
     value = ""
    end -- if
    value = value..string.sub(data,i,i)
   end -- if
  end -- for
  if variable ~= nil then
   if value == nil then
    value = ""
   end -- if
   StoreVariable(variable, value)
  end -- if
  --  redraw the map
  draw_minimap ()
  -- redraw the energy bars
  draw_energy_bars ()
  -- redraw the spell affect icons
  draw_affects ()
  sidebar_background()
  Redraw()
 end -- if
end -- function OnPluginTelnetSubnegotiation

function StoreVariable (MSDP_var, MSDP_val)
 --Note('Variable: '..MSDP_var..' = ['..MSDP_val..']')
 if MSDP_var == "SERVER_ID" then
  create_layout ()
  SendPkt ("\255\250\69\1PLUGIN_ID\2Generic MUSHclient plugin (version 1.1)\255\240")
 else -- store the variable
  msdp[MSDP_var] = MSDP_val
 end -- if
end -- function StoreVariable

function update_plugin()
 raw = "https://raw.githubusercontent.com/TFC-Fumino/MUSHclient_Plugins/master/MSDP-Sidebar/Generic/worlds/plugins/TFC_Msdp_Sidebar.xml"
 async_ok, async = pcall (require, "async")
 if async_ok then
  plugin_page = async.doAsyncRemoteRequest(raw, raw_get, "HTTPS")
  SetVariable("plugin_updating", "async")
 else
  ColourNote("white", "blue", "Error on plugin update!")
  SetVariable("plugin_updating", "false")
 end -- async
end -- function update_plugin

function raw_get(retval, page, status, headers, full_status, request_url)
 PLUGIN_VERSION = GetPluginInfo(GetPluginID(), 19)
 if status == 200 then
  raw_version = tonumber(string.match(page, '%s%s%s+version="([0-9%.]+)"'))
  SetVariable("plugin_updating", "status")
  SetVariable("lat_page", page)
  settings_menu ()
 else
  Note("error: ", status)
  SetVariable("plugin_updating", "false")
  settings_menu ()
 end -- status
end -- function raw_get

function dc_log (name, line, wildcards, styles)
 if GetVariable("starLog_tsType") ~= nil then
  if GetVariable("starLog_remPrompt") == "true" then
   if string.find(line, "<") and string.find(line, ">") then
   else
    AppendToNotepad ("Star_Log_Test", os.date(GetVariable("starLog_tsType")) .. line)
	AppendToNotepad ("Star_Log_Test", "\r\n")
   end -- line string match
  else
   AppendToNotepad ("Star_Log_Test", os.date(GetVariable("starLog_tsType")) .. line)
   AppendToNotepad ("Star_Log_Test", "\r\n")
  end -- starLog_remPrompt
 else
  if GetVariable("starLog_remPrompt") == "true" then
   if string.find(line, "<") and string.find(line, ">") then
   else
    AppendToNotepad ("Star_Log_Test", line)
	AppendToNotepad ("Star_Log_Test", "\r\n")
   end -- line string match
  else
   AppendToNotepad ("Star_Log_Test", line)
   AppendToNotepad ("Star_Log_Test", "\r\n")
  end -- starLog_remPrompt
 end -- starLog_tsType
 Activate()
end  -- function dc_log

function starLog_prev ()
 local line, total_lines
 total_lines = GetLinesInBufferCount ()
 for line = 1, total_lines do
  if GetVariable("starLog_tsType") ~= nil then
   if GetVariable("starLog_remPrompt") == "true" then
    if string.find(GetLineInfo (line, 1), "<") and string.find(GetLineInfo (line, 1), ">") then
    else
     AppendToNotepad ("Star_Log_Test", os.date(GetVariable("starLog_tsType"), GetLineInfo(line,9)) .. GetLineInfo (line, 1))
     AppendToNotepad ("Star_Log_Test", "\r\n")
	end -- line string match
   else
    AppendToNotepad ("Star_Log_Test", os.date(GetVariable("starLog_tsType"), GetLineInfo(line,9)) .. GetLineInfo (line, 1))
    AppendToNotepad ("Star_Log_Test", "\r\n")
   end -- starLog_remPrompt
  else
   if GetVariable("starLog_remPrompt") == "true" then
    if string.find(GetLineInfo (line, 1), "<") and string.find(GetLineInfo (line, 1), ">") then
    else
     AppendToNotepad ("Star_Log_Test", GetLineInfo (line, 1))
	 AppendToNotepad ("Star_Log_Test", "\r\n")
    end -- line string match
   else
    AppendToNotepad ("Star_Log_Test", GetLineInfo (line, 1))
	AppendToNotepad ("Star_Log_Test", "\r\n")
   end -- starLog_remPrompt
  end -- starLog_tsType 
 end -- for
 Activate()
end -- function starLog_prev

function alias_star_logger_rec ()
  if GetVariable("starLog_isRec") == nil then
   starLog_isRec = false
   SetVariable("starLog_isRec", "false")
  end -- starLog_isRec  
  starLog_isRec = not starLog_isRec  
  if starLog_isRec then
   SetVariable("starLog_isRec", "true")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Activated")
   if GetVariable("starLog_recPrev") == "true" then
    starLog_prev ()
   end -- starLog_recPrev  
   EnableTrigger("starlogger", true)
  else
   EnableTrigger("starlogger", false)
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "red", "", "Deactivated")
   if GetVariable("starlog_folder") ~= nil then
    if GetVariable("starLog_fnTs") ~= nil then
     SaveNotepad ("Star_Log_Test", GetVariable("starlog_folder") .. "\\" .. os.date(GetVariable("starLog_fnTs")) .. ".txt")
     CloseNotepad ("Star_Log_Test", 0)
     ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Log file saved to ", "red", "", GetVariable("starlog_folder") .. "\\" .. os.date(GetVariable("starLog_fnTs")) .. ".txt")	 
    else
     SaveNotepad ("Star_Log_Test", GetVariable("starlog_folder") .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
     CloseNotepad ("Star_Log_Test", 0)
     ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "silver", "", "Filename has not been set, saving file with default format name.")
     ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Log file saved to ", "red", "", GetVariable("starlog_folder") .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
    end -- starlog_folder
   else
    SaveNotepad ("Star_Log_Test", GetInfo (58) .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
    CloseNotepad ("Star_Log_Test", 0)
    ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "silver", "", "Folder and Filename has not been set, saving file at default location with default name.")
    ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Log file saved to ", "red", "", GetInfo (58) .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
   end -- starlog_folder
   SetVariable("starLog_isRec", "false")
  end -- starLog_isRec
end -- function alias_star_logger_rec

function alias_star_logger_set_folder()
  directoryname = utils.directorypicker ("Folder to put logs into", GetInfo (58))
  SetVariable("starlog_folder", directoryname)
  ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Logs will now save to ", "red", "", directoryname)
end -- function alias_star_logger_set_folder()

function alias_star_logger_set_filename()
  result_filename = utils.inputbox ("What would you like the filename to be?", "Star Logger", "The Final Challenge Log", "Courier", 9)
  SetVariable("result_filename", result_filename)
  SetVariable("starLog_fnTs", result_filename)
  ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Logs will now save as ", "red", "", result_filename)
end -- function alias_star_logger_set_filename

function alias_star_logger_open_folder()
  if GetVariable("starlog_folder") then
   os.execute ("explorer " .. GetVariable("starlog_folder") )
  else
   os.execute ("explorer " .. GetInfo (58) )
  end -- starlog_folder
end -- function alias_star_logger_open_folder

function alias_star_logger_prev_lines()
  if GetVariable("starLog_recPrev") == "true" then
   starLog_recPrev = true
  elseif GetVariable("starLog_recPrev") == "false" then
   starLog_recPrev = false
  else
   starLog_recPrev = false
   SetVariable("starLog_recPrev", "false")
  end -- starLog_recPrev
  starLog_recPrev = not starLog_recPrev
  if starLog_recPrev then
   SetVariable("starLog_recPrev", "true")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Previous lines will now be logged.")
  else
   SetVariable("starLog_recPrev", "false")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "red", "", "Previous lines will no longer be logged.")
  end -- starLog_recPrev
end -- alias_star_logger_prev_lines

function sidebar_background()
 bt_height = GetInfo(280) / 2
 sidebar_bgBar = "sidebar_bgBar"
 
if GetVariable("cSelected") == "trans" then
 WindowCreate (sidebar_bg, SB_BG_LEFT_POSITION, 0, 166, BG_COLOR_HEIGHT, 7, 6, 0x000000)
 WindowCreate (sidebar_bgBar, SB_BG_LEFT_POSITION + 166, 0, 8, BG_COLOR_HEIGHT, 7, 6, 0x000000)
 WindowGradient (sidebar_bgBar, 0, 0, 0, bt_height - 26,
                 GetVariable("SBbarC"),
                 GetVariable("SBbarCe"), 
                 1)
 WindowGradient (sidebar_bgBar, 0, bt_height + 26, 0, 0,
                 GetVariable("SBbarC"),
                 GetVariable("SBbarCe"), 
                 1)

elseif GetVariable("cSelected") == "solid" then
  if SBsolid ~= nil then
   -- for a solid color background
   WindowCreate (sidebar_bg, SB_BG_LEFT_POSITION, 0, 166, BG_COLOR_HEIGHT, 7, 2, SBsolid)
   WindowCreate (sidebar_bgBar, SB_BG_LEFT_POSITION + 166, 0, 8, BG_COLOR_HEIGHT, 7, 6, 0x000000)
   WindowGradient (sidebar_bgBar, 0, 0, 0, bt_height - 26,
                 GetVariable("SBbarC"),
                 GetVariable("SBbarCe"), 
                 1)
   WindowGradient (sidebar_bgBar, 0, bt_height + 26, 0, 0,
                 GetVariable("SBbarC"),
                 GetVariable("SBbarCe"), 
                 1)
  end -- SBsolid
elseif GetVariable("cSelected") == "one" then
   WindowCreate (sidebar_bg, SB_BG_LEFT_POSITION, 0, 166, BG_COLOR_HEIGHT, 7, 2, SBsolid)
   WindowCreate (sidebar_bgBar, SB_BG_LEFT_POSITION + 166, 0, 8, BG_COLOR_HEIGHT, 7, 6, 0x000000)
   WindowGradient (sidebar_bgBar, 0, 0, 0, bt_height - 26,
                 GetVariable("SBbarC"),
                 GetVariable("SBbarCe"), 
                 1)
   WindowGradient (sidebar_bgBar, 0, bt_height + 26, 0, 0,
                 GetVariable("SBbarC"),
                 GetVariable("SBbarCe"), 
                 1)
  WindowRectOp (sidebar_bg, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
  if SBtopC ~= nil and SBbotC ~= nil then
   WindowGradient (sidebar_bg, 0, 0, 0, 0,  
                 GetVariable("SBtopC"),
				 GetVariable("SBbotC"),
                 2)
  end -- SBtopC and SBbotC
elseif GetVariable("cSelected") == "two" then
   WindowCreate (sidebar_bg, SB_BG_LEFT_POSITION, 0, 166, BG_COLOR_HEIGHT, 7, 2, SBsolid)
   WindowCreate (sidebar_bgBar, SB_BG_LEFT_POSITION + 166, 0, 8, BG_COLOR_HEIGHT, 7, 6, 0x000000)
   WindowGradient (sidebar_bgBar, 0, 0, 0, bt_height - 26,
                 GetVariable("SBbarC"),
                 GetVariable("SBbarCe"), 
                 1)
   WindowGradient (sidebar_bgBar, 0, bt_height + 26, 0, 0,
                 GetVariable("SBbarC"),
                 GetVariable("SBbarCe"), 
                 1)
  WindowRectOp (sidebar_bg, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
  if SBtopC ~= nil and SBbotC ~= nil then
   WindowGradient (sidebar_bg, 0, 0, 0, BG_COLOR_HEIGHT / 2 - 100,  
                 GetVariable("SBtopC"),
				 GetVariable("SBbotC"),
                 2)
  end -- SBtopC and SBbotC
  if GRthree ~= nil and GRfour ~= nil then
   WindowGradient (sidebar_bg, 0, BG_COLOR_HEIGHT / 2, 0, 0,  
                GetVariable("GRthree"),
				GetVariable("GRfour"),
                 2)
  end -- GRthree and GRfour
elseif GetVariable("cSelected") == "three" then
   WindowCreate (sidebar_bg, SB_BG_LEFT_POSITION, 0, 166, BG_COLOR_HEIGHT, 7, 2, SBsolid)
   WindowCreate (sidebar_bgBar, SB_BG_LEFT_POSITION + 166, 0, 8, BG_COLOR_HEIGHT, 7, 6, 0x000000)
   WindowGradient (sidebar_bgBar, 0, 0, 0, bt_height - 26,
                 GetVariable("SBbarC"),
                 GetVariable("SBbarCe"), 
                 1)
   WindowGradient (sidebar_bgBar, 0, bt_height + 26, 0, 0,
                 GetVariable("SBbarC"),
                 GetVariable("SBbarCe"), 
                 1)
  WindowRectOp (sidebar_bg, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
  if SBtopC ~= nil and SBbotC ~= nil then
   WindowGradient (sidebar_bg, 0, 0, 0, 60,  
                 GetVariable("SBtopC"),
				 GetVariable("SBbotC"),
                 2)
  end -- SBtopC and SBbotC
  if GRthree ~= nil and GRfour ~= nil then
   WindowGradient (sidebar_bg, 0, 60, 0, 202,  
                 GetVariable("GRthree"),
				 GetVariable("GRfour"),
                 2)
  end -- GRthree and GRfour
  if GRfive ~=nil and GRsix ~= nil then
   WindowGradient (sidebar_bg, 0, 246, 0, 0,  
                 GetVariable("GRfive"),
				 GetVariable("GRsix"),
                 2)
  end -- GRfive and GRsix
elseif GetVariable("cSelected") == "four" then
   WindowCreate (sidebar_bg, SB_BG_LEFT_POSITION, 0, 166, BG_COLOR_HEIGHT, 7, 2, SBsolid)
   WindowCreate (sidebar_bgBar, SB_BG_LEFT_POSITION + 166, 0, 8, BG_COLOR_HEIGHT, 7, 6, 0x000000)
   WindowGradient (sidebar_bgBar, 0, 0, 0, bt_height - 26,
                 GetVariable("SBbarC"),
                 GetVariable("SBbarCe"), 
                 1)
   WindowGradient (sidebar_bgBar, 0, bt_height + 26, 0, 0,
                 GetVariable("SBbarC"),
                 GetVariable("SBbarCe"), 
                 1)
  WindowRectOp (sidebar_bg, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
     if SBtopC ~= nil and SBbotC ~= nil then
      WindowGradient (sidebar_bg, 0, 0, 0, 147,  
                  GetVariable("SBtopC"),
				  GetVariable("SBbotC"),
                  2)
     end -- SBtopC and SBbotC
     if GRthree ~= nil and GRfour ~= nil then
      WindowGradient (sidebar_bg, 0, 147, 0, 202,  
                  GetVariable("GRthree"),
	 			  GetVariable("GRfour"),
                  2)
     end -- GRthree and GRfour
     if GRfive ~= nil and GRsix ~= nil then
      WindowGradient (sidebar_bg, 0, 246, 0, 330,  
                  GetVariable("GRfive"),
	 			  GetVariable("GRsix"),
                  2)
     end -- GRfive and GRsix
     if GRseven ~= nil and GReight ~= nil then
      WindowGradient (sidebar_bg, 0, 330, 0, 0,  
                  GetVariable("GRseven"),
   	   			  GetVariable("GReight"),
                  2)
     end -- GRseven and GReight
 end -- cSelected
 
    WindowRectOp(sidebar_bg, miniwin.rect_draw_edge, 1, 203, 164, 245, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all) 
	WindowFont (sidebar_bg, font, "BolsterBold", 10)  
	WindowText (sidebar_bg, font, "St", 41, 204, 0, 0, ColourNameToRGB  "yellow")
	WindowText (sidebar_bg, font, "ar", 57, 204, 0, 0, ColourNameToRGB  "goldenrod")
	WindowText (sidebar_bg, font, "Logger", 80, 204, 0, 0, ColourNameToRGB  "silver")
	WindowText (sidebar_bg, font, "Record:", 10, 222, 0, 0, ColourNameToRGB  "white")
	  WindowCircleOp (sidebar_bg, 4, 63, 222, 80, 239,  -- round rectangle
                     ColourNameToRGB("yellow"), 0, 2, ColourNameToRGB("red"), 0, 0, 0, 0)
	  WindowAddHotspot (sidebar_bg, "starL_rec", 63, 222, 80, 239, 
                    "mouseover_starL", -- MouseOver 
                    "cancel_mouseover_starL", -- CancelMouseOver 
                    "mousedown_starL", -- MouseDown 
                    "cancel_mousedown_starL", -- CancelMouseDown 
                    "mouseup_starL", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag	
  DrawThemed3DRect(sidebar_bg, 100, 225, 140, 239)
  outlined_text (colourWhite, sidebar_bg, "Aliases", 5, 104, 227, 0)
	  WindowAddHotspot (sidebar_bg, "starL_ali", 100, 225, 140, 239, 
                    "mouseover_starL_ali", -- MouseOver 
                    "cancel_mouseover_starL_ali", -- CancelMouseOver 
                    "mousedown_starL_ali", -- MouseDown 
                    "cancel_mousedown_starL_ali", -- CancelMouseDown 
                    "mouseup_starL_ali", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag	
  if GetVariable("starLog_isRec") == nil then
   starLog_isRec = false
   SetVariable("starLog_isRec", "false")
  end -- starLog_isRec  
  if starLog_isRec then
   WindowCircleOp (sidebar_bg, 4, 63, 222, 80, 239,  -- round rectangle
          ColourNameToRGB("yellow"), 0, 2, ColourNameToRGB("lime"), 0, 0, 0, 0)
  end -- starLog_recPrev 
 
 MONEY = msdp["MONEY"] or "0"
 WindowFont (sidebar_bg, font, "BolsterBold", 10)  
 WindowText (sidebar_bg, font, "Gold: " .. MONEY, 30, 335, 0, 0, ColourNameToRGB  "goldenrod")
 
 WindowSetZOrder (sidebar_bg, -1)
 WindowSetZOrder (sidebar_bgBar, -1)
 WindowShow(sidebar_bg, true)
 WindowShow(sidebar_bgBar, true)
end -- sidebar_background


----/ (First Prototype) New settings menu. Currently messy, unfinished, and a bit laggy  /----

if GetVariable("avatar_filename") == nil then
 SetVariable("avatar_filename", "default")
end

if GetVariable("castle_checked") == nil then
 SetVariable("castle_checked", "one")
end

font = "f"
infofont = "if"
settings_men_Lpos = 270
sidebar_bgBar_prev = "sidebar_bgBar_prev"
function settings_menu ()
 settings_menu_win = "settings_menu_win"
 WindowCreate (settings_menu_win, settings_men_Lpos, 80, 600, 500, 12, 2, 0x000000)    
 WindowFont (settings_menu_win, font, "BolsterBold", 10)  
 WindowFont (settings_menu_win, infofont, "Franklin Gothic", 8)
 font_height = WindowFontInfo (settings_menu_win, font, 1)  -- height
 WindowLoadImage (settings_menu_win, "setmenubg", GetInfo (66) .. "Generic/layout/outer_background.png")
 WindowLoadImage (settings_menu_win, "setmenubgtwo", GetInfo (66) .. "Generic/layout/outer_background_two.png")
 WindowLoadImage (settings_menu_win, "setmenubgthree", GetInfo (66) .. "Generic/layout/outer_background_three.png")
 if GetVariable("castle_checked") == "browse" then
  WindowLoadImage (settings_menu_win, "setmenubgbrowse", GetVariable("filename"))
 end -- castle_checked
 WindowRectOp (settings_menu_win, 2, 0, 0, 0, 0, GetVariable("SBbarC"))
 if GetVariable("castle_checked") == "one" then
  WindowImageOp (settings_menu_win, 2, 0, 15, 0, 0,    -- rectangle 
              ColourNameToRGB("blue"), 5, 1, 
              ColourNameToRGB("cyan"), "setmenubg")
 end -- castle_checked
 if GetVariable("castle_checked") == "two" then
  WindowImageOp (settings_menu_win, 2, 0, 15, 0, 0,    -- rectangle 
              ColourNameToRGB("blue"), 5, 1, 
              ColourNameToRGB("cyan"), "setmenubgtwo") 
 end -- castle_checked
 if GetVariable("castle_checked") == "three" then
  WindowImageOp (settings_menu_win, 2, 0, 15, 0, 0,    -- rectangle 
              ColourNameToRGB("blue"), 5, 1, 
              ColourNameToRGB("cyan"), "setmenubgthree") 
 end -- castle_checked
  if GetVariable("castle_checked") == "browse" then
  WindowImageOp (settings_menu_win, 2, 0, 15, 0, 0,    -- rectangle 
              ColourNameToRGB("blue"), 5, 1, 
              ColourNameToRGB("cyan"), "setmenubgbrowse") 
 end -- castle_checked
 if GetVariable("castle_checked") == "none" then
  if GetVariable("bgColour") ~= nil then
   WindowRectOp (settings_menu_win, 2, 0, 15, 0, 0, tonumber(GetVariable("bgColour")))
  end -- bgColour
 end -- castle_checked
 WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 10, 115, 200, 250, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
 WindowRectOp (settings_menu_win, 4, 0, 0, 0, 0, ColourNameToRGB("white"), ColourNameToRGB("white"))
 links = {
 { text = "Avatar", tip = "", page = "avatar_set" },
 { text = "Background", tip = "", page = "background_set" },
 { text = "Sidebar Background", tip = "", page = "sidebar_set" },
 { text = "Prompt Bars", tip = "", page = "promptbar_set" },
 { text = "Compass", tip = "", page = "compass_set" },
 { text = "Star Logger", tip = "", page = "starlogger_set" }, 
 { text = "Report an Issue", tip = "", page = "reportissue_set" },
 { text = "Check and Update Plugin", tip = "", page = "pluginupdate_set" }
  } -- end of links table
  -- position for first hyperlink  
  x = 15    -- all text indented this far in
  y = 115    -- first hyperlink this far down              
  maxTextWidth = 0
  for k, v in ipairs (links) do
    maxTextWidth = math.max (maxTextWidth, WindowTextWidth(settings_menu_win, font, v.text))
  end -- for
  WindowText (settings_menu_win, font, "[X]", 573, 20, 0, 0, ColourNameToRGB  "red")
  WindowAddHotspot (settings_menu_win, "close", 573, 20, 600, 28, 
                    "mouseover_close", -- MouseOver 
                    "cancel_mouseover_close", -- CancelMouseOver 
                    "mousedown_close", -- MouseDown 
                    "cancel_mousedown_close", -- CancelMouseDown 
                    "mouseup_close", -- MouseUp 
                    "Close settings menu", 
                    miniwin.cursor_hand,
                    0) --  Flag
  for k, v in ipairs (links) do
    MakeHyperlink (k, v)
  end -- for
 WindowLoadImage (settings_menu_win, "title_set", GetInfo (66) .. "Generic/layout/Generic_title.png")
 WindowDrawImage (settings_menu_win, "title_set", 69, 20, 0, 0, 3)  -- draw it 
 WindowText (settings_menu_win, font, "SETTINGS", 270, 20, 0, 0, ColourNameToRGB  "white")
 
  if pageset ~= "sidebar_set" and pageset ~= nil then
   WindowShow (sidebar_bgBar_prev, false)
  else
   WindowShow (sidebar_bgBar_prev, true)
 end -- pageset
 
 if pageset ~= nil then
 ----/  AVATAR SETTINGS  /----
 SetVariable("plugin_updating", "false")
   if pageset == "avatar_set" then
    WindowText (settings_menu_win, font, "Avatar Settings", 45, 270, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 235, 250, 555, 480, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
    if GetVariable("avatar_checked") == "one" then
     WindowLoadImage (settings_menu_win, "avatar", GetInfo (66) .. "Generic/avatars/Default.png")
	end -- avatar_checked
    if GetVariable("avatar_checked") == "browse" then
     WindowLoadImage (settings_menu_win, "avatar", GetVariable("avatar_filename"))
    end -- avatar check
	WindowDrawImage (settings_menu_win, "avatar", 35, 298, 167, 415, 2)
    WindowText (settings_menu_win, font, "Default Avatar", 245, 270, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 360, 272, 375, 286, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
	if isdefault then
     WindowText (settings_menu_win, infofont, "X", 364, 272, 0, 0, ColourNameToRGB  "white")
	end -- isdefault
	  WindowAddHotspot (settings_menu_win, "default_avatar", 245, 270, 375, 286, 
                    "mouseover_av", -- MouseOver 
                    "cancel_mouseover_av", -- CancelMouseOver 
                    "mousedown_av", -- MouseDown 
                    "cancel_mousedown_av", -- CancelMouseDown 
                    "mouseup_av", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
	WindowText (settings_menu_win, font, "Select Custom Image:", 245, 300, 0, 0, ColourNameToRGB  "white")
	DrawThemed3DRect(settings_menu_win, 245, 320, 300, 335)
	WindowText (settings_menu_win, infofont, "Browse..", 248, 320, 0, 0, ColourNameToRGB  "white")
	  WindowAddHotspot (settings_menu_win, "setbrowse", 245, 320, 300, 335, 
                    "mouseover_br", -- MouseOver 
                    "cancel_mouseover_br", -- CancelMouseOver 
                    "mousedown_br", -- MouseDown 
                    "cancel_mousedown_br", -- CancelMouseDown 
                    "mouseup_br", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
	WindowRectOp (settings_menu_win, 2, 305, 320, 530, 335, ColourNameToRGB("white"))
	if GetVariable("avatar_checked") == "one" then
	 WindowText (settings_menu_win, infofont, "No file selected...", 307, 321, 0, 0, ColourNameToRGB  "black")
	else
	 WindowText (settings_menu_win, infofont, GetVariable("avatar_filename"), 307, 321, 0, 0, ColourNameToRGB  "black")
	end -- avatar_checked

   elseif pageset == "background_set" then
   ----/  BACKGROUND SETTINGS  /----
   SetVariable("plugin_updating", "false")
    WindowText (settings_menu_win, font, "Background Settings", 30, 270, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 235, 250, 555, 480, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)

    WindowText (settings_menu_win, font, "Castle 1", 245, 270, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 310, 272, 325, 286, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
			 
 if GetVariable("castle_checked") == "one" then
   	 WindowDrawImage (settings_menu_win, "setmenubg", 35, 298, 167, 415, 2)  -- draw it 
     WindowText (settings_menu_win, infofont, "X", 314, 272, 0, 0, ColourNameToRGB  "white")
 end -- castle_checked
 if GetVariable("castle_checked") == "two" then
   	 WindowDrawImage (settings_menu_win, "setmenubgtwo", 35, 298, 167, 415, 2)  -- draw it 
     WindowText (settings_menu_win, infofont, "X", 314, 301, 0, 0, ColourNameToRGB  "white")
 end -- castle_checked
 if GetVariable("castle_checked") == "three" then
  WindowDrawImage (settings_menu_win, "setmenubgthree", 35, 298, 167, 415, 2)  -- draw it
  WindowText (settings_menu_win, infofont, "X", 314, 331, 0, 0, ColourNameToRGB  "white")
 end -- castle_checked
 if GetVariable("castle_checked") == "browse" then
  WindowDrawImage (settings_menu_win, "setmenubgbrowse", 35, 298, 167, 415, 2)  -- draw it
 end -- castle_checked

	  WindowAddHotspot (settings_menu_win, "default_castleone", 245, 270, 325, 286, 
                    "mouseover_castle", -- MouseOver 
                    "cancel_mouseover_castle", -- CancelMouseOver 
                    "mousedown_castle", -- MouseDown 
                    "cancel_mousedown_castle", -- CancelMouseDown 
                    "mouseup_castle", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag

    WindowText (settings_menu_win, font, "Castle 2", 245, 300, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 310, 300, 325, 315, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
	  WindowAddHotspot (settings_menu_win, "default_castletwo", 245, 300, 325, 315, 
                    "mouseover_castlet", -- MouseOver 
                    "cancel_mouseover_castlet", -- CancelMouseOver 
                    "mousedown_castlet", -- MouseDown 
                    "cancel_mousedown_castlet", -- CancelMouseDown 
                    "mouseup_castlet", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
					
    WindowText (settings_menu_win, font, "Castle 3", 245, 330, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 310, 330, 325, 345, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
	  WindowAddHotspot (settings_menu_win, "default_castlethree", 245, 330, 325, 345, 
                    "mouseover_castleth", -- MouseOver 
                    "cancel_mouseover_castleth", -- CancelMouseOver 
                    "mousedown_castleth", -- MouseDown 
                    "cancel_mousedown_castleth", -- CancelMouseDown 
                    "mouseup_castleth", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
					
	WindowText (settings_menu_win, font, "Select Custom Image:", 245, 360, 0, 0, ColourNameToRGB  "white")
	DrawThemed3DRect(settings_menu_win, 245, 380, 300, 395)
	WindowText (settings_menu_win, infofont, "Browse..", 248, 380, 0, 0, ColourNameToRGB  "white")
	  WindowAddHotspot (settings_menu_win, "setbrowsebg", 245, 380, 300, 395, 
                    "mouseover_brbg", -- MouseOver 
                    "cancel_mouseover_brbg", -- CancelMouseOver 
                    "mousedown_brbg", -- MouseDown 
                    "cancel_mousedown_brbg", -- CancelMouseDown 
                    "mouseup_brbg", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
	WindowRectOp (settings_menu_win, 2, 305, 380, 530, 395, ColourNameToRGB("white"))
	if GetVariable("castle_checked") == "browse" then
	 WindowText (settings_menu_win, infofont, GetVariable("filename"), 307, 381, 0, 0, ColourNameToRGB  "black")
	else
	 WindowText (settings_menu_win, infofont, "No image file selected..", 307, 381, 0, 0, ColourNameToRGB  "black")
	end -- castle_checked
	
	WindowText (settings_menu_win, font, "Select Solid Color:", 245, 410, 0, 0, ColourNameToRGB  "white")
	DrawThemed3DRect(settings_menu_win, 245, 430, 300, 445)
	WindowText (settings_menu_win, infofont, "Select..", 248, 430, 0, 0, ColourNameToRGB  "white")
	  WindowAddHotspot (settings_menu_win, "setcbg", 245, 430, 300, 445, 
                    "mouseover_cbg", -- MouseOver 
                    "cancel_mouseover_cbg", -- CancelMouseOver 
                    "mousedown_cbg", -- MouseDown 
                    "cancel_mousedown_cbg", -- CancelMouseDown 
                    "mouseup_cbg", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
	if GetVariable("castle_checked") == "none" then
	 if GetVariable("bgColour") ~= nil then
	  WindowRectOp (settings_menu_win, 2, 305, 430, 530, 445, ColourNameToRGB("white"))
	  WindowText (settings_menu_win, infofont, RGBColourToName(GetVariable("bgColour")), 307, 431, 0, 0, ColourNameToRGB  "black")
	 end -- bgColour
	else
	 WindowRectOp (settings_menu_win, 2, 305, 430, 530, 445, ColourNameToRGB("white"))
	 WindowText (settings_menu_win, infofont, "No color selected..", 307, 431, 0, 0, ColourNameToRGB  "black")
	end -- castle_checked
	
	
	
   elseif pageset == "sidebar_set" then
   ----/  SIDEBAR BACKGROUND SETTINGS  /----
   SetVariable("plugin_updating", "false")
    WindowText (settings_menu_win, font, "Sidebar Background Settings", 12, 270, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 235, 250, 555, 480, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
	sb_prevB ()
	if GetVariable("cSelected") == "solid" then
     WindowCreate (sidebar_bg_prev, settings_men_Lpos + 85, 395, 45, 115, 7, 2, 0x000000)
     WindowGradient (sidebar_bg_prev, 0, 0, 0, 0,
                 GetVariable("SBsolid"),
                 GetVariable("SBsolid"), 
                 1)
     WindowShow ("sidebar_bg_prev", true)
	elseif GetVariable("cSelected") == "one" then
     if SBtopC ~= nil and SBbotC ~= nil then
      WindowGradient (sidebar_bg_prev, 0, 0, 0, 0,  
                 GetVariable("SBtopC"),
				 GetVariable("SBbotC"),
                 2)
     end -- SBtopC
     WindowShow (sidebar_bg_prev, true)
	elseif GetVariable("cSelected") == "two" then
     if SBbotC ~=nil and SBtopC ~= nil then
      WindowGradient (sidebar_bg_prev, 0, 0, 0, 40,  
                 GetVariable("SBtopC"),
				 GetVariable("SBbotC"),
                 2)
      end -- SBbotC and SBtopC
     if GRthree ~= nil and GRfour ~= nil then
      WindowGradient (sidebar_bg_prev, 0, 60, 0, 0,  
                 GetVariable("GRthree"),
				 GetVariable("GRfour"),
                 2)
     end -- GRthree and GRfour
     WindowShow (sidebar_bg_prev, true)
	elseif GetVariable("cSelected") == "three" then
     if SBtopC ~= nil and SBbotC ~= nil then
      WindowGradient (sidebar_bg_prev, 0, 0, 0, 16,  
                 GetVariable("SBtopC"),
				 GetVariable("SBbotC"),
                 2)
     end -- SBtopC and SBbotC
     if GRthree ~= nil and GRfour ~= nil then
      WindowGradient (sidebar_bg_prev, 0, 16, 0, 33,  
                 GetVariable("GRthree"),
				 GetVariable("GRfour"),
                 2)
     end -- GRthree and GRfour
     if GRfive ~= nil and GRsix ~= nil then
      WindowGradient (sidebar_bg_prev, 0, 45, 0, 0,  
                 GetVariable("GRfive"),
				 GetVariable("GRsix"),
                 2)
     end -- GRfive and GRsix
     WindowShow (sidebar_bg_prev, true)
	elseif GetVariable("cSelected") == "four" then
     if SBtopC ~= nil and SBbotC ~= nil then
      WindowGradient (sidebar_bg_prev, 0, 0, 0, 16,  
                  GetVariable("SBtopC"),
				  GetVariable("SBbotC"),
                  2)
     end -- SBtopC and SBbotC
     if GRthree ~= nil and GRfour ~= nil then
      WindowGradient (sidebar_bg_prev, 0, 16, 0, 33,  
                  GetVariable("GRthree"),
	 			  GetVariable("GRfour"),
                  2)
     end -- GRthree and GRfour
     if GRfive ~= nil and GRsix ~= nil then
      WindowGradient (sidebar_bg_prev, 0, 45, 0, 60,  
                  GetVariable("GRfive"),
	 			  GetVariable("GRsix"),
                  2)
     end -- GRfive and GRsix
     if GRseven ~= nil and GReight ~= nil then
      WindowGradient (sidebar_bg_prev, 0, 60, 0, 0,  
                  GetVariable("GRseven"),
   	   			  GetVariable("GReight"),
                  2)
     end -- GRseven and GReight
     WindowShow (sidebar_bg_prev, true)
	end -- cSelected
    WindowText (settings_menu_win, font, "Solid Color:", 245, 270, 0, 0, ColourNameToRGB  "white")
	if GetVariable("SBsolid") ~= nil then
	 WindowCircleOp (settings_menu_win, 4, 325, 272, 340, 286,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GetVariable("SBsolid"), 0, 0, 0, 0)	
	else
	 WindowCircleOp (settings_menu_win, 4, 325, 272, 340, 286,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GetVariable("SBsolid"), 5, 0, 0, 0)
	end -- SBsolid	 
	  WindowAddHotspot (settings_menu_win, "sbbg_solid", 245, 270, 340, 286, 
                    "mouseover_sb_solid", -- MouseOver 
                    "cancel_mouseover_sb_solid", -- CancelMouseOver 
                    "mousedown_sb_solid", -- MouseDown 
                    "cancel_mousedown_sb_solid", -- CancelMouseDown 
                    "mouseup_solid", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
			 
	WindowText (settings_menu_win, font, "Transparent", 365, 270, 0, 0, ColourNameToRGB  "white")
	if GetVariable("SBtransparent") == "true" then
     WindowText (settings_menu_win, infofont, "X", 464, 272, 0, 0, ColourNameToRGB  "white")
	end -- SBtransparent
     WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 460, 272, 475, 286, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
	  WindowAddHotspot (settings_menu_win, "sbbg_trans", 365, 270, 475, 286, 
                    "mouseover_sb_trans", -- MouseOver 
                    "cancel_mouseover_sb_trans", -- CancelMouseOver 
                    "mousedown_sb_trans", -- MouseDown 
                    "cancel_mousedown_sb_trans", -- CancelMouseDown 
                    "mouseup_sb_trans", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
			 
    WindowText (settings_menu_win, font, "Gradients:", 245, 300, 0, 0, ColourNameToRGB  "white")
	WindowText (settings_menu_win, font, "1", 327, 300, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 340, 300, 355, 315, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
	if GetVariable("cSelected") == "one" then
	 WindowText (settings_menu_win, infofont, "X", 344, 301, 0, 0, ColourNameToRGB  "white")
	end -- cSelected
	  WindowAddHotspot (settings_menu_win, "sbbg_grOne", 327, 300, 355, 315, 
                    "mouseover_sb_grOne", -- MouseOver 
                    "cancel_mouseover_sb_grOne", -- CancelMouseOver 
                    "mousedown_sb_grOne", -- MouseDown 
                    "cancel_mousedown_sb_grOne", -- CancelMouseDown 
                    "mouseup_sb_grOne", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
	WindowText (settings_menu_win, font, "2", 372, 300, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 385, 300, 400, 315, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
	if GetVariable("cSelected") == "two" then
	 WindowText (settings_menu_win, infofont, "X", 389, 301, 0, 0, ColourNameToRGB  "white")
	end -- cSelected
	  WindowAddHotspot (settings_menu_win, "sbbg_grTwo", 372, 300, 400, 315, 
                    "mouseover_sb_grTwo", -- MouseOver 
                    "cancel_mouseover_sb_grTwo", -- CancelMouseOver 
                    "mousedown_sb_grTwo", -- MouseDown 
                    "cancel_mousedown_sb_grTwo", -- CancelMouseDown 
                    "mouseup_sb_grTwo", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
	WindowText (settings_menu_win, font, "3", 417, 300, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 430, 300, 445, 315, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
	if GetVariable("cSelected") == "three" then
	 WindowText (settings_menu_win, infofont, "X", 434, 301, 0, 0, ColourNameToRGB  "white")
	end -- cSelected
	  WindowAddHotspot (settings_menu_win, "sbbg_grThree", 417, 300, 445, 315, 
                    "mouseover_sb_grThree", -- MouseOver 
                    "cancel_mouseover_sb_grThree", -- CancelMouseOver 
                    "mousedown_sb_grThree", -- MouseDown 
                    "cancel_mousedown_sb_grThree", -- CancelMouseDown 
                    "mouseup_sb_grThree", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
	WindowText (settings_menu_win, font, "4", 462, 300, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 475, 300, 490, 315, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
	if GetVariable("cSelected") == "four" then
	 WindowText (settings_menu_win, infofont, "X", 479, 301, 0, 0, ColourNameToRGB  "white")
	end -- cSelected			 
	  WindowAddHotspot (settings_menu_win, "sbbg_grFour", 462, 300, 490, 315, 
                    "mouseover_sb_grFour", -- MouseOver 
                    "cancel_mouseover_sb_grFour", -- CancelMouseOver 
                    "mousedown_sb_grFour", -- MouseDown 
                    "cancel_mousedown_sb_grFour", -- CancelMouseDown 
                    "mouseup_sb_grFour", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
    WindowText (settings_menu_win, font, "Gradient Colors:", 245, 330, 0, 0, ColourNameToRGB  "white")
	
	if SBtopC ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 245, 350, 260, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, SBtopC, 0, 0, 0, 0)
	else
	  WindowCircleOp (settings_menu_win, 4, 245, 350, 260, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2,  GetVariable("SBtopC"), 0, 0, 0, 0)
	end -- SBtopC
	  WindowAddHotspot (settings_menu_win, "sbbg_grCa", 245, 350, 260, 365, 
                    "mouseover_sb_grCa", -- MouseOver 
                    "cancel_mouseover_sb_grCa", -- CancelMouseOver 
                    "mousedown_sb_grCa", -- MouseDown 
                    "cancel_mousedown_sb_grCa", -- CancelMouseDown 
                    "mouseup_sb_grCa", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
	if SBbotC ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 265, 350, 280, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, SBbotC, 0, 0, 0, 0)
	else
	  WindowCircleOp (settings_menu_win, 4, 265, 350, 280, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GetVariable("SBbotC"), 0, 0, 0, 0)
	end -- SBbotC
	  WindowAddHotspot (settings_menu_win, "sbbg_grCb", 265, 350, 280, 365, 
                    "mouseover_sb_grCb", -- MouseOver 
                    "cancel_mouseover_sb_grCb", -- CancelMouseOver 
                    "mousedown_sb_grCb", -- MouseDown 
                    "cancel_mousedown_sb_grCb", -- CancelMouseDown 
                    "mouseup_sb_grCb", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
					
	if GRthree ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 315, 350, 330, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GRthree, 0, 0, 0, 0)
	else
	  WindowCircleOp (settings_menu_win, 4, 315, 350, 330, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GetVariable("GRthree"), 0, 0, 0, 0)
	end -- GRthree
	  WindowAddHotspot (settings_menu_win, "sbbg_grCc", 315, 350, 330, 365, 
                    "mouseover_sb_grCc", -- MouseOver 
                    "cancel_mouseover_sb_grCc", -- CancelMouseOver 
                    "mousedown_sb_grCc", -- MouseDown 
                    "cancel_mousedown_sb_grCc", -- CancelMouseDown 
                    "mouseup_sb_grCc", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
	if GRfour ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 335, 350, 350, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GRfour, 0, 0, 0, 0)	
	else
	  WindowCircleOp (settings_menu_win, 4, 335, 350, 350, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GetVariable("GRfour"), 0, 0, 0, 0)	
	end -- GRfour
	  WindowAddHotspot (settings_menu_win, "sbbg_grCd", 335, 350, 350, 365, 
                    "mouseover_sb_grCd", -- MouseOver 
                    "cancel_mouseover_sb_grCd", -- CancelMouseOver 
                    "mousedown_sb_grCd", -- MouseDown 
                    "cancel_mousedown_sb_grCd", -- CancelMouseDown 
                    "mouseup_sb_grCd", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
    if GRfive ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 385, 350, 400, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GRfive, 0, 0, 0, 0)
	else
	  WindowCircleOp (settings_menu_win, 4, 385, 350, 400, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GetVariable("GRfive"), 0, 0, 0, 0)
	end -- GRfive
	  WindowAddHotspot (settings_menu_win, "sbbg_grCe", 385, 350, 400, 365, 
                    "mouseover_sb_grCe", -- MouseOver 
                    "cancel_mouseover_sb_grCe", -- CancelMouseOver 
                    "mousedown_sb_grCe", -- MouseDown 
                    "cancel_mousedown_sb_grCe", -- CancelMouseDown 
                    "mouseup_sb_grCe", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
	if GRsix ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 405, 350, 420, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GRsix, 0, 0, 0, 0)
	else
	  WindowCircleOp (settings_menu_win, 4, 405, 350, 420, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
	end -- GRsix
	  WindowAddHotspot (settings_menu_win, "sbbg_grCf", 405, 350, 420, 365, 
                    "mouseover_sb_grCf", -- MouseOver 
                    "cancel_mouseover_sb_grCf", -- CancelMouseOver 
                    "mousedown_sb_grCf", -- MouseDown 
                    "cancel_mousedown_sb_grCf", -- CancelMouseDown 
                    "mouseup_sb_grCf", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
	if GRseven ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 455, 350, 470, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GRseven, 0, 0, 0, 0)
	else
	  WindowCircleOp (settings_menu_win, 4, 455, 350, 470, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GetVariable("GRseven"), 0, 0, 0, 0)
	end -- GRseven
	  WindowAddHotspot (settings_menu_win, "sbbg_grCg", 455, 350, 470, 365, 
                    "mouseover_sb_grCg", -- MouseOver 
                    "cancel_mouseover_sb_grCg", -- CancelMouseOver 
                    "mousedown_sb_grCg", -- MouseDown 
                    "cancel_mousedown_sb_grCg", -- CancelMouseDown 
                    "mouseup_sb_grCg", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
	if GReight ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 475, 350, 490, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GReight, 0, 0, 0, 0)
	else
	  WindowCircleOp (settings_menu_win, 4, 475, 350, 490, 365,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GetVariable("GReight"), 0, 0, 0, 0)
	end -- GReight
	  WindowAddHotspot (settings_menu_win, "sbbg_grCh", 475, 350, 490, 365, 
                    "mouseover_sb_grCh", -- MouseOver 
                    "cancel_mouseover_sb_grCh", -- CancelMouseOver 
                    "mousedown_sb_grCh", -- MouseDown 
                    "cancel_mousedown_sb_grCh", -- CancelMouseDown 
                    "mouseup_sb_grCh", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag

    WindowText (settings_menu_win, font, "Side Border Colors:", 245, 380, 0, 0, ColourNameToRGB  "white")
    if GetVariable("SBbarC") ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 385, 380, 400, 395,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GetVariable("SBbarC"), 0, 0, 0, 0)	
	else
	  WindowCircleOp (settings_menu_win, 4, 385, 380, 400, 395,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, ColourNameToRGB("red"), 0, 0, 0, 0)
    end -- SBbarC
	  WindowAddHotspot (settings_menu_win, "sbbg_brCa", 385, 380, 400, 395, 
                    "mouseover_sb_brCa", -- MouseOver 
                    "cancel_mouseover_sb_brCa", -- CancelMouseOver 
                    "mousedown_sb_brCa", -- MouseDown 
                    "cancel_mousedown_sb_brCa", -- CancelMouseDown 
                    "mouseup_sb_brCa", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
	if GetVariable("SBbarCe") ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 405, 380, 420, 395,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, GetVariable("SBbarCe"), 0, 0, 0, 0)	
	else
	  WindowCircleOp (settings_menu_win, 4, 405, 380, 420, 395,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, ColourNameToRGB("black"), 0, 0, 0, 0)
	end -- SBbarCe
	  WindowAddHotspot (settings_menu_win, "sbbg_brCb", 405, 380, 420, 395, 
                    "mouseover_sb_brCb", -- MouseOver 
                    "cancel_mouseover_sb_brCb", -- CancelMouseOver 
                    "mousedown_sb_brCb", -- MouseDown 
                    "cancel_mousedown_sb_brCb", -- CancelMouseDown 
                    "mouseup_sb_brCb", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag	
					
   elseif pageset == "promptbar_set" then
   ----/  PROMPT BAR SETTINGS  /----
   SetVariable("plugin_updating", "false")
    WindowText (settings_menu_win, font, "Prompt Bar Settings", 27, 270, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 235, 250, 555, 480, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
			 
    WindowText (settings_menu_win, font, "Default colors:", 245, 270, 0, 0, ColourNameToRGB  "white")
     WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 350, 270, 365, 285, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
	if GetVariable("prompt_checked") == "default" then
	 WindowText (settings_menu_win, infofont, "X", 354, 271, 0, 0, ColourNameToRGB  "white")
	else
	end -- prompt_checked
	  WindowAddHotspot (settings_menu_win, "prmtB_default", 245, 270, 365, 285, 
                    "mouseover_prompt_set", -- MouseOver 
                    "cancel_mouseover_prompt_set", -- CancelMouseOver 
                    "mousedown_prompt_set", -- MouseDown 
                    "cancel_mousedown_prompt_set", -- CancelMouseDown 
                    "mouseup_prompt_set", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag
			 
    WindowText (settings_menu_win, font, "Font Color:", 245, 300, 0, 0, ColourNameToRGB  "white")
	 if bar_text_color ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 325, 300, 340, 315,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, bar_text_color, 0, 0, 0, 0)	 
	 else
	  WindowCircleOp (settings_menu_win, 4, 325, 300, 340, 315,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
	 end -- bar_text_color
	  WindowAddHotspot (settings_menu_win, "prmtB_font", 245, 300, 340, 315, 
                    "mouseover_prompt_ft", -- MouseOver 
                    "cancel_mouseover_prompt_ft", -- CancelMouseOver 
                    "mousedown_prompt_ft", -- MouseDown 
                    "cancel_mousedown_prompt_ft", -- CancelMouseDown 
                    "mouseup_prompt_ft", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag		

    WindowText (settings_menu_win, font, "Edge Colors:", 375, 300, 0, 0, ColourNameToRGB  "white")
	 if custom_bar_color_highlight_top ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 465, 300, 480, 315,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, custom_bar_color_highlight_top, 0, 0, 0, 0)
	 else
	  WindowCircleOp (settings_menu_win, 4, 465, 300, 480, 315,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
	 end -- custom_bar_color_highlight_top
	  WindowAddHotspot (settings_menu_win, "prmtB_edgO", 465, 300, 480, 315, 
                    "mouseover_prompt_edgO", -- MouseOver 
                    "cancel_mouseover_prompt_edgO", -- CancelMouseOver 
                    "mousedown_prompt_edgO", -- MouseDown 
                    "cancel_mousedown_prompt_edgO", -- CancelMouseDown 
                    "mouseup_prompt_edgO", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag		
	 if custom_bar_color_highlight_bottom ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 485, 300, 500, 315,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, custom_bar_color_highlight_bottom, 0, 0, 0, 0)
	 else
	  WindowCircleOp (settings_menu_win, 4, 485, 300, 500, 315,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
	 end -- custom_bar_color_highlight_bottom
	  WindowAddHotspot (settings_menu_win, "prmtB_edgT", 485, 300, 500, 315, 
                    "mouseover_prompt_edgT", -- MouseOver 
                    "cancel_mouseover_prompt_edgT", -- CancelMouseOver 
                    "mousedown_prompt_edgT", -- MouseDown 
                    "cancel_mousedown_prompt_edgT", -- CancelMouseDown 
                    "mouseup_prompt_edgT", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag		

 
    WindowText (settings_menu_win, font, "Bars Center Colors", 320, 330, 0, 0, ColourNameToRGB  "white")
	WindowLine (settings_menu_win, 245, 345, 540, 345, colourWhite, miniwin.pen_solid, 1)
	
    WindowText (settings_menu_win, font, "Full", 345, 350, 0, 0, ColourNameToRGB  "white")
	WindowText (settings_menu_win, font, "Empty", 385, 350, 0, 0, ColourNameToRGB  "white")
	WindowLine (settings_menu_win, 379, 373, 379, 432, colourWhite, miniwin.pen_solid, 1)
	WindowText (settings_menu_win, font, "Enemy:", 245, 370, 0, 0, ColourNameToRGB  "white")
	 if enemy_color ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 350, 370, 365, 385,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, enemy_color, 0, 0, 0, 0) 
	 else
	  WindowCircleOp (settings_menu_win, 4, 350, 370, 365, 385,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
	 end -- enemy_color
	  WindowAddHotspot (settings_menu_win, "prmtB_EbarF", 350, 370, 365, 385, 
                    "mouseover_prompt_EbarF", -- MouseOver 
                    "cancel_mouseover_prompt_EbarF", -- CancelMouseOver 
                    "mousedown_prompt_EbarF", -- MouseDown 
                    "cancel_mousedown_prompt_EbarF", -- CancelMouseDown 
                    "mouseup_prompt_EbarF", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag	
	 if enemy_colorB ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 395, 370, 410, 385,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, enemy_colorB, 0, 0, 0, 0) 
	 else
	  WindowCircleOp (settings_menu_win, 4, 395, 370, 410, 385,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
	 end -- enemy_colorB
	  WindowAddHotspot (settings_menu_win, "prmtB_EbarE", 395, 370, 410, 385, 
                    "mouseover_prompt_EbarE", -- MouseOver 
                    "cancel_mouseover_prompt_EbarE", -- CancelMouseOver 
                    "mousedown_prompt_EbarE", -- MouseDown 
                    "cancel_mousedown_prompt_EbarE", -- CancelMouseDown 
                    "mouseup_prompt_EbarE", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag	
	WindowText (settings_menu_win, font, "Health:", 245, 385, 0, 0, ColourNameToRGB  "white")
	 if health_color ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 350, 385, 365, 400,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, health_color, 0, 0, 0, 0) 	 
	 else
	  WindowCircleOp (settings_menu_win, 4, 350, 385, 365, 400,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0) 
	 end -- health_color
	  WindowAddHotspot (settings_menu_win, "prmtB_HbarF", 350, 385, 365, 400, 
                    "mouseover_prompt_HbarF", -- MouseOver 
                    "cancel_mouseover_prompt_HbarF", -- CancelMouseOver 
                    "mousedown_prompt_HbarF", -- MouseDown 
                    "cancel_mousedown_prompt_HbarF", -- CancelMouseDown 
                    "mouseup_prompt_HbarF", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag	
	 if health_colorB ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 395, 385, 410, 400,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, health_colorB, 0, 0, 0, 0) 
	 else
	  WindowCircleOp (settings_menu_win, 4, 395, 385, 410, 400,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
	 end -- health_colorB
	  WindowAddHotspot (settings_menu_win, "prmtB_HbarE", 395, 385, 410, 400, 
                    "mouseover_prompt_HbarE", -- MouseOver 
                    "cancel_mouseover_prompt_HbarE", -- CancelMouseOver 
                    "mousedown_prompt_HbarE", -- MouseDown 
                    "cancel_mousedown_prompt_HbarE", -- CancelMouseDown 
                    "mouseup_prompt_HbarE", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag	
	WindowText (settings_menu_win, font, "Mana:", 245, 400, 0, 0, ColourNameToRGB  "white")
	 if mana_color ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 350, 400, 365, 415,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, mana_color, 0, 0, 0, 0) 	 
	 else
	  WindowCircleOp (settings_menu_win, 4, 350, 400, 365, 415,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0) 
	 end -- mana_color
	  WindowAddHotspot (settings_menu_win, "prmtB_MbarF", 350, 400, 365, 415, 
                    "mouseover_prompt_MbarF", -- MouseOver 
                    "cancel_mouseover_prompt_MbarF", -- CancelMouseOver 
                    "mousedown_prompt_MbarF", -- MouseDown 
                    "cancel_mousedown_prompt_MbarF", -- CancelMouseDown 
                    "mouseup_prompt_MbarF", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag	
	 if mana_colorB ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 395, 400, 410, 415,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, mana_colorB, 0, 0, 0, 0)	 
	 else
	  WindowCircleOp (settings_menu_win, 4, 395, 400, 410, 415,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
	 end -- mana_colorB
	  WindowAddHotspot (settings_menu_win, "prmtB_MbarE", 395, 400, 410, 415, 
                    "mouseover_prompt_MbarE", -- MouseOver 
                    "cancel_mouseover_prompt_MbarE", -- CancelMouseOver 
                    "mousedown_prompt_MbarE", -- MouseDown 
                    "cancel_mousedown_prompt_MbarE", -- CancelMouseDown 
                    "mouseup_prompt_MbarE", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag	
	WindowText (settings_menu_win, font, "Move:", 245, 415, 0, 0, ColourNameToRGB  "white")
	 if move_color ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 350, 415, 365, 430,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, move_color, 0, 0, 0, 0)  
	 else
	  WindowCircleOp (settings_menu_win, 4, 350, 415, 365, 430,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0) 
	 end -- move_color
	  WindowAddHotspot (settings_menu_win, "prmtB_movebarF", 350, 415, 365, 430, 
                    "mouseover_prompt_movebarF", -- MouseOver 
                    "cancel_mouseover_prompt_movebarF", -- CancelMouseOver 
                    "mousedown_prompt_movebarF", -- MouseDown 
                    "cancel_mousedown_prompt_movebarF", -- CancelMouseDown 
                    "mouseup_prompt_movebarF", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag	
	 if move_colorB ~= nil then
	  WindowCircleOp (settings_menu_win, 4, 395, 415, 410, 430,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, move_colorB, 0, 0, 0, 0) 
	 else
	  WindowCircleOp (settings_menu_win, 4, 395, 415, 410, 430,  -- round rectangle
                     ColourNameToRGB("white"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
	 end -- move_colorB
	  WindowAddHotspot (settings_menu_win, "prmtB_movebarE", 395, 415, 410, 430, 
                    "mouseover_prompt_movebarE", -- MouseOver 
                    "cancel_mouseover_prompt_movebarE", -- CancelMouseOver 
                    "mousedown_prompt_movebarE", -- MouseDown 
                    "cancel_mousedown_prompt_movebarE", -- CancelMouseDown 
                    "mouseup_prompt_movebarE", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag						 
  
   elseif pageset == "compass_set" then
   ----/  COMPASS SETTINGS  /----
   SetVariable("plugin_updating", "false")
    WindowText (settings_menu_win, font, "Compass Settings", 37, 270, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 235, 250, 555, 480, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
    WindowText (settings_menu_win, font, "Default colors:", 245, 270, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 350, 270, 365, 285, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
			 
    WindowText (settings_menu_win, font, "Compass Colors", 330, 310, 0, 0, ColourNameToRGB  "white")
	WindowLine (settings_menu_win, 245, 325, 540, 325, colourWhite, miniwin.pen_solid, 1)
    WindowText (settings_menu_win, font, "Light", 345, 330, 0, 0, ColourNameToRGB  "white")
	WindowText (settings_menu_win, font, "Dark", 385, 330, 0, 0, ColourNameToRGB  "white")
	WindowLine (settings_menu_win, 379, 353, 379, 402, colourWhite, miniwin.pen_solid, 1)
	WindowText (settings_menu_win, font, "Main Face:", 245, 350, 0, 0, ColourNameToRGB  "white")
	  WindowCircleOp (settings_menu_win, 4, 350, 350, 365, 365,  -- round rectangle
                     ColourNameToRGB("black"), 0, 2, ColourNameToRGB("white"), 0, 0, 0, 0)
	  WindowCircleOp (settings_menu_win, 4, 395, 350, 410, 365,  -- round rectangle
                     ColourNameToRGB("black"), 0, 2, ColourNameToRGB("white"), 0, 0, 0, 0)
	WindowText (settings_menu_win, font, "Open Room:", 245, 365, 0, 0, ColourNameToRGB  "white")
	  WindowCircleOp (settings_menu_win, 4, 350, 365, 365, 380,  -- round rectangle
                     ColourNameToRGB("black"), 0, 2, ColourNameToRGB("white"), 0, 0, 0, 0) 
	  WindowCircleOp (settings_menu_win, 4, 395, 365, 410, 380,  -- round rectangle
                     ColourNameToRGB("black"), 0, 2, ColourNameToRGB("white"), 0, 0, 0, 0)
	WindowText (settings_menu_win, font, "Closed Room:", 245, 380, 0, 0, ColourNameToRGB  "white")
	  WindowCircleOp (settings_menu_win, 4, 350, 380, 365, 395,  -- round rectangle
                     ColourNameToRGB("black"), 0, 2, ColourNameToRGB("white"), 0, 0, 0, 0) 
	  WindowCircleOp (settings_menu_win, 4, 395, 380, 410, 395,  -- round rectangle
                     ColourNameToRGB("black"), 0, 2, ColourNameToRGB("white"), 0, 0, 0, 0)	
					 
    WindowText (settings_menu_win, font, "STILL DESIGNING, NO FUNCTIONALITY", 260, 150, 0, 0, ColourNameToRGB  "white")
	WindowText (settings_menu_win, font, "( UNDER CONSTRUCTION )", 300, 170, 0, 0, ColourNameToRGB  "white")
  
   elseif pageset == "starlogger_set" then
   SetVariable("plugin_updating", "false")
   ----/  STAR LOGGER SETTINGS  /----
    WindowText (settings_menu_win, font, "Star Logger Settings", 27, 270, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 235, 250, 555, 480, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
    WindowText (settings_menu_win, font, "Log Previous Lines:", 245, 270, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 387, 270, 402, 285, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
    WindowText (settings_menu_win, font, "Remove Prompt from Logs:", 245, 290, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 440, 290, 455, 305, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
			 
    WindowText (settings_menu_win, font, "Timestamp Settings", 328, 320, 0, 0, ColourNameToRGB  "white")
	WindowLine (settings_menu_win, 245, 338, 540, 338, colourWhite, miniwin.pen_solid, 1)
	WindowText (settings_menu_win, font, "None:", 245, 343, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 290, 343, 305, 358, 
            miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
    DrawThemed3DRect(settings_menu_win, 320, 343, 365, 358)
	WindowText (settings_menu_win, infofont, "12 Hour", 322, 344, 0, 0, ColourNameToRGB  "white")
	DrawThemed3DRect(settings_menu_win, 370, 343, 415, 358)
	WindowText (settings_menu_win, infofont, "24 Hour", 372, 344, 0, 0, ColourNameToRGB  "white")
    WindowRectOp (settings_menu_win, 2, 422, 343, 530, 358, ColourNameToRGB("white"))
    WindowText (settings_menu_win, infofont, "No timestamp..", 424, 344, 0, 0, ColourNameToRGB  "black")
	
    WindowText (settings_menu_win, font, "Filename Settings", 335, 370, 0, 0, ColourNameToRGB  "white")
	WindowLine (settings_menu_win, 245, 388, 540, 388, colourWhite, miniwin.pen_solid, 1)
	DrawThemed3DRect(settings_menu_win, 245, 393, 300, 408)
	WindowText (settings_menu_win, infofont, "Custom", 253, 394, 0, 0, ColourNameToRGB  "white")
    DrawThemed3DRect(settings_menu_win, 320, 393, 365, 408)
	WindowText (settings_menu_win, infofont, "12 Hour", 322, 394, 0, 0, ColourNameToRGB  "white")
	DrawThemed3DRect(settings_menu_win, 370, 393, 415, 408)
	WindowText (settings_menu_win, infofont, "24 Hour", 372, 394, 0, 0, ColourNameToRGB  "white")
    WindowRectOp (settings_menu_win, 2, 422, 393, 530, 408, ColourNameToRGB("white"))
    WindowText (settings_menu_win, infofont, "No filename..", 424, 394, 0, 0, ColourNameToRGB  "black")
	
    WindowText (settings_menu_win, font, "Folder Settings", 345, 420, 0, 0, ColourNameToRGB  "white")
	WindowLine (settings_menu_win, 245, 438, 540, 438, colourWhite, miniwin.pen_solid, 1)
	DrawThemed3DRect(settings_menu_win, 245, 443, 280, 459)
	WindowText (settings_menu_win, infofont, "Set..", 252, 444, 0, 0, ColourNameToRGB  "white")
    WindowRectOp (settings_menu_win, 2, 285, 443, 467, 458, ColourNameToRGB("white"))
    WindowText (settings_menu_win, infofont, "blah blah blah..", 287, 444, 0, 0, ColourNameToRGB  "black")
	DrawThemed3DRect(settings_menu_win, 474, 443, 540, 459)
	WindowText (settings_menu_win, infofont, "Open Folder", 476, 444, 0, 0, ColourNameToRGB  "white")
	
    WindowText (settings_menu_win, font, "STILL DESIGNING, NO FUNCTIONALITY", 260, 150, 0, 0, ColourNameToRGB  "white")
	WindowText (settings_menu_win, font, "( UNDER CONSTRUCTION )", 300, 170, 0, 0, ColourNameToRGB  "white")
	
  
   elseif pageset == "reportissue_set" then
    SetVariable("plugin_updating", "false")
    WindowText (settings_menu_win, font, "STILL DESIGNING, NO FUNCTIONALITY", 260, 150, 0, 0, ColourNameToRGB  "white")
	WindowText (settings_menu_win, font, "( UNDER CONSTRUCTION )", 300, 170, 0, 0, ColourNameToRGB  "white")
  
   elseif pageset == "pluginupdate_set" then
   ----/  PLUGIN UPDATER SETTINGS  /----
    WindowText (settings_menu_win, font, "Plugin Updater Settings", 27, 270, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 235, 250, 555, 480, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
    WindowText (settings_menu_win, font, "Current Version", 245, 270, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 280, 290, 321, 307, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)

	DrawThemed3DRect(settings_menu_win, 369, 295, 420, 310)
	WindowText (settings_menu_win, infofont, "Check..", 376, 295, 0, 0, ColourNameToRGB  "white")
	  WindowAddHotspot (settings_menu_win, "update_check", 369, 295, 420, 310, 
                    "mouseover_upC", -- MouseOver 
                    "cancel_mouseover_upC", -- CancelMouseOver 
                    "mousedown_upC", -- MouseDown 
                    "cancel_mousedown_upC", -- CancelMouseDown 
                    "mouseup_upC", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag		
   
	if PLUGIN_VERSION ~= nil then
	 WindowText (settings_menu_win, font, "v" .. PLUGIN_VERSION, 285, 290, 0, 0, ColourNameToRGB  "yellow")
	else
	 WindowText (settings_menu_win, font, "v0.0", 285, 290, 0, 0, ColourNameToRGB  "red")
	end -- PLUGIN_VERSION

	WindowText (settings_menu_win, font, "Server Version", 435, 270, 0, 0, ColourNameToRGB  "white")
    WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 465, 290, 507, 307, 
             miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
	if raw_version ~= nil then
  if raw_version == PLUGIN_VERSION then
   WindowText (settings_menu_win, font, "v" .. raw_version, 470, 290, 0, 0, ColourNameToRGB  "yellow")
   WindowText (settings_menu_win, font, "You have the latest version!", 295, 345, 0, 0, ColourNameToRGB  "dodgerblue")
  elseif raw_version > PLUGIN_VERSION then
   WindowText (settings_menu_win, font, "v" .. raw_version, 470, 290, 0, 0, ColourNameToRGB  "green")
   WindowText (settings_menu_win, font, "The server has a newer version!", 274, 345, 0, 0, ColourNameToRGB  "dodgerblue")
	DrawThemed3DRect(settings_menu_win, 369, 375, 420, 390)
	WindowText (settings_menu_win, infofont, "Update", 376, 375, 0, 0, ColourNameToRGB  "white")
	  WindowAddHotspot (settings_menu_win, "update_button", 369, 375, 420, 390, 
                    "mouseover_upB", -- MouseOver 
                    "cancel_mouseover_upB", -- CancelMouseOver 
                    "mousedown_upB", -- MouseDown 
                    "cancel_mousedown_upB", -- CancelMouseDown 
                    "mouseup_upB", -- MouseUp 
                    "", 
                    miniwin.cursor_hand,
                    0) --  Flag	
  elseif raw_version < PLUGIN_VERSION then
   WindowText (settings_menu_win, font, "v" .. raw_version, 470, 290, 0, 0, ColourNameToRGB  "red")
   WindowText (settings_menu_win, font, "Lucky you! You must be a bug tester!", 250, 345, 0, 0, ColourNameToRGB  "dodgerblue")
  end -- if
	else
	 WindowText (settings_menu_win, font, "v0.0", 470, 290, 0, 0, ColourNameToRGB  "red")
	end -- raw_version
   end -- pageset
 end -- pageset
 if pageset ~= "sidebar_set" then
  if sidebar_bgBar_prev ~= nil then
   WindowShow (sidebar_bgBar_prev, false)
   WindowShow (sidebar_bg_prev, false)
  else
   WindowShow ("sidebar_bgBar_prev", false)
   WindowShow ("sidebar_bg_prev", false)
  end -- sidebar_bg_prev
 end -- pageset
 WindowShow (settings_menu_win, true)
end -- function settings_menu

function drawText (which, colour)
  Redraw ()
  return WindowText (settings_menu_win, font, which.text, which.x, which.y, 0, 0, ColourNameToRGB  (colour))
end -- drawText

function mouseup_hyperlink (flags, hotspotid)

end -- mouseup_hyperlink

isdefault = true
function mousedown_av (flags, hotspotid)
 isdefault = true
 SetVariable("avatar_checked", "one")
 WindowLoadImage (avatar_window, "avatar", GetInfo (66) .. "Generic/avatars/Default.png")
 WindowLoadImage (settings_menu_win, "avatar", GetInfo (66) .. "Generic/avatars/Default.png")
 WindowDrawImage (avatar_window, "avatar", 0, 0, 117, 117, 2)
 WindowDrawImage (settings_menu_win, "avatar", 35, 298, 167, 415, 2)  -- draw it
 settings_menu ()
end -- function mousedown_av
function mouseover_av (flags, hotspotid)
 WindowText (settings_menu_win, font, "Default Avatar", 245, 270, 0, 0, ColourNameToRGB  "gray")
  WindowLoadImage (settings_menu_win, "avatar", GetInfo (66) .. "Generic/avatars/Default.png")
  WindowDrawImage (settings_menu_win, "avatar", 35, 298, 167, 415, 2)  -- draw it
 Redraw()
end -- function mouseover_av
function cancel_mouseover_av (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_av

function mousedown_castle (flags, hotspotid)
  filename = nil
  DeleteVariable("bgColour")
  SetVariable("castle_checked", "one")
  SetBackgroundImage(GetInfo (66) .. "Generic/layout/outer_background.png", 0)
 settings_menu ()
end -- function mousedown_castle
function mouseover_castle (flags, hotspotid)
 WindowDrawImage (settings_menu_win, "setmenubg", 35, 298, 167, 415, 2)  -- draw it 
 WindowText (settings_menu_win, font, "Castle 1", 245, 270, 0, 0, ColourNameToRGB  "gray")
 Redraw()
end -- function mouseover_castle
function cancel_mouseover_castle (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_castle

function mousedown_castlet (flags, hotspotid)
  filename = nil
  SetVariable("castle_checked", "two")
  DeleteVariable("bgColour")
  SetBackgroundImage(GetInfo (66) .. "Generic/layout/outer_background_two.png", 0)
 settings_menu ()
end -- function mousedown_castlet
function mouseover_castlet (flags, hotspotid)
 WindowDrawImage (settings_menu_win, "setmenubgtwo", 35, 298, 167, 415, 2)  -- draw it 
 WindowText (settings_menu_win, font, "Castle 2", 245, 300, 0, 0, ColourNameToRGB  "gray")
 Redraw()
end -- function mouseover_castlet
function cancel_mouseover_castlet (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_castlet

function mousedown_castleth (flags, hotspotid)
  filename = nil
  SetVariable("castle_checked", "three")
  DeleteVariable("bgColour")
  print("Background Selected: Castle 3")
  SetBackgroundImage(GetInfo (66) .. "Generic/layout/outer_background_three.png", 0)
 settings_menu ()
end -- function mousedown_castleth
function mouseover_castleth (flags, hotspotid)
 WindowDrawImage (settings_menu_win, "setmenubgthree", 35, 298, 167, 415, 2)  -- draw it 
 WindowText (settings_menu_win, font, "Castle 3", 245, 330, 0, 0, ColourNameToRGB  "gray")
 Redraw()
end -- function mouseover_castleth
function cancel_mouseover_castleth (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_castleth

function mousedown_brbg (flags, hotspotid)
  DeleteVariable("bgColour")
  filter = {  bmp = "Bitmap files", png = "Image files" }
  filename = utils.filepicker (title, name, extension, filter, save)
  if filename == nil then
  else
   SetVariable("filename", filename)
   SetVariable("castle_checked", "browse")
   SetBackgroundImage(GetVariable("filename"), 0)
  end -- filename
 settings_menu ()
end -- function mousedown_brbg
function mouseover_brbg (flags, hotspotid)
 WindowText (settings_menu_win, infofont, "Browse..", 248, 380, 0, 0, ColourNameToRGB  "gray")
 Redraw()
end -- function mouseover_brbg
function cancel_mouseover_brbg (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_brbg

function mousedown_br (flags, hotspotid)
  isdefault = false
  filter = {  bmp = "Bitmap files", png = "Image files" }
  avatar_filename = utils.filepicker (title, name, extension, filter, save)
  if avatar_filename == nil then
  else
   SetVariable("avatar_filename", avatar_filename)
   SetVariable("avatar_checked", "browse")
   WindowLoadImage (avatar_window, "avatar", avatar_filename)
   WindowDrawImage (avatar_window, "avatar", 0, 0, 117, 117, 2)
  end
 settings_menu ()
end -- function mousedown_br
function mouseover_br (flags, hotspotid)
 WindowText (settings_menu_win, infofont, "Browse..", 248, 320, 0, 0, ColourNameToRGB  "gray")
 Redraw()
end -- function mouseover_br
function cancel_mouseover_br(flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_br

function mousedown_cbg (flags, hotspotid)
  bgColour = getColour(bgColour)
  SetVariable("bgColour", bgColour) -- save it for next time they play
  SetVariable("castle_checked", "none") -- so it doesnt mess with first time default 
  filename = nil
  SetBackgroundImage("", 0)
  SetBackgroundColour(tonumber(GetVariable ("bgColour")))
  main_text_area ()
 settings_menu ()
end -- function mousedown_cbg
function mouseover_cbg (flags, hotspotid)
 WindowText (settings_menu_win, infofont, "Select..", 248, 430, 0, 0, ColourNameToRGB  "gray")
 Redraw()
end -- function mouseover_cbg
function cancel_mouseover_cbg (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_cbg

sidebar_bg_prev = "sidebar_bg_prev"
sidebar_bgBar_prev = "sidebar_bgBar_prev"
function mousedown_sb_solid (flags, hotspotid)
 SetVariable("cSelected", "solid")
 SBsolid = getColour(SBsolid)
 SetVariable("SBsolid", SBsolid)
 SetVariable("cSelected", "solid")
 DeleteVariable("SBtransparent")
 sidebar_background ()
 settings_menu ()
end -- function mousedown_sb_solid

sidebar_bgBar_prev = "sidebar_bgBar_prev"
sidebar_bg_prev = "sidebar_bg_prev"
function sb_prevB ()
 sidebar_bgBar_prev = "sidebar_bgBar_prev"
 WindowCreate (sidebar_bgBar_prev, settings_men_Lpos + 130, 395, 4, 115 , 7, 6, 0x000000)
 WindowGradient (sidebar_bgBar_prev, 0, 0, 0, 50,
                 GetVariable("SBbarC"),
                 GetVariable("SBbarCe"), 
                 1)
 WindowGradient (sidebar_bgBar_prev, 0, 60, 0, 0,
                 GetVariable("SBbarC"),
                 GetVariable("SBbarCe"), 
                 1)
 WindowShow ("sidebar_bgBar_prev", true)
end -- sb_prevB


function mouseover_sb_solid (flags, hotspotid)
 WindowText (settings_menu_win, font, "Solid Color:", 245, 270, 0, 0, ColourNameToRGB  "gray")
 if GetVariable("SBsolid") ~= nil then
  WindowCircleOp (settings_menu_win, 4, 325, 272, 340, 286,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, SBsolid, 0, 0, 0, 0) 
  WindowCreate (sidebar_bg_prev, settings_men_Lpos + 85, 395, 45, 115, 7, 2, 0x000000)
  WindowGradient (sidebar_bg_prev, 0, 0, 0, 0,
                 GetVariable("SBsolid"),
                 GetVariable("SBsolid"), 
                 1)
  WindowShow ("sidebar_bg_prev", true)
 else
  WindowCircleOp (settings_menu_win, 4, 325, 272, 340, 286,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, GetVariable("SBsolid"), 0, 0, 0, 0)
  WindowCreate (sidebar_bg_prev, settings_men_Lpos + 85, 395, 45, 115, 7, 2, 0x000000)
  WindowGradient (sidebar_bg_prev, 0, 0, 0, 0,
                 ColourNameToRGB("black"),
                 ColourNameToRGB("black"), 
                 1)
  WindowShow ("sidebar_bg_prev", true)
 end -- SBsolid
 sb_prevB ()  -- redraw sidebar
end -- function mouseover_sb_solid
function cancel_mouseover_sb_solid (flags, hotspotid)
 if SBsolid ~= nil then
  WindowShow (sidebar_bgBar_prev, true)
  WindowShow (sidebar_bg_prev, false)
 else
  WindowShow (sidebar_bg_prev, false)
  WindowShow (sidebar_bgBar_prev, false)
 end -- SBsolid
 settings_menu ()
end -- function cancel_mouseover_sb_solid

function mousedown_sb_trans (flags, hotspotid)
SetVariable("cSelected", "trans")
if GetVariable("SBtransparent") == "true" then
 SBtransparent = true
else
 SBtransparent = false
end -- SBtransparent
 SBtransparent = not SBtransparent
 if SBtransparent == true then
  WindowText (settings_menu_win, infofont, "X", 400, 272, 0, 0, ColourNameToRGB  "white")
  SetVariable("SBtransparent", "true")
  SetVariable("show_BGprev", "true")
 else
  DeleteVariable("show_BGprev")
  WindowShow (sidebar_bgBar_prev, false)
  SetVariable("SBtransparent", "false")
 end -- SBtransparent
 sidebar_background ()
 settings_menu ()
end -- function mousedown_sb_trans
function mouseover_sb_trans (flags, hotspotid)
 WindowText (settings_menu_win, font, "Transparent", 365, 270, 0, 0, ColourNameToRGB  "gray")
 if SBtransparent == false or SBtransparent == nil then
  
 else
  if GetVariable("SBsolid") ~= nil then
   WindowCreate (sidebar_bg_prev, settings_men_Lpos + 85, 395, 45, 115, 7, 2, 0x000000)
   WindowGradient (sidebar_bg_prev, 0, 0, 0, 0,
                 GetVariable("SBsolid"),
                 GetVariable("SBsolid"), 
                 1)
   WindowShow ("sidebar_bg_prev", true)
  else
   WindowCreate (sidebar_bg_prev, settings_men_Lpos + 85, 395, 45, 115, 7, 2, 0x000000)
   WindowGradient (sidebar_bg_prev, 0, 0, 0, 0,
                 ColourNameToRGB("black"),
                 ColourNameToRGB("black"), 
                 1)
   WindowShow ("sidebar_bg_prev", true)
  end -- SBsolid
  sb_prevB ()  -- redraw sidebar
 end -- SBtransparent
 Redraw()
end -- function mouseover_sb_trans
function cancel_mouseover_sb_trans (flags, hotspotid)
 WindowShow (sidebar_bg_prev, false)
 settings_menu ()
end -- function cancel_mouseover_sb_trans

sidebar_bg_prev = "sidebar_bg_prev"
----/  Gradient Bars  /----
function mousedown_sb_grOne (flags, hotspotid)
 SetVariable("SBtransparent", "false")
 SetVariable("cSelected", "one")
 sidebar_background ()
 settings_menu ()
end -- function mousedown_sb_grOne

function mouseover_sb_grOne (flags, hotspotid)
 WindowText (settings_menu_win, font, "1", 327, 300, 0, 0, ColourNameToRGB  "gray")
 WindowCreate (sidebar_bg_prev, settings_men_Lpos + 85, 395, 45, 115, 7, 2, 0x000000)
 if SBtopC ~= nil and SBbotC ~= nil then
  WindowGradient (sidebar_bg_prev, 0, 0, 0, 0,  
                 GetVariable("SBtopC"),
				 GetVariable("SBbotC"),
                 2)
 end -- SBtopC
 WindowShow (sidebar_bg_prev, true)
 sb_prevB ()
end -- function mouseover_sb_grOne
function cancel_mouseover_sb_grOne (flags, hotspotid)
 WindowShow (sidebar_bg_prev, false)
 WindowRectOp (sidebar_bg_prev, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
 settings_menu ()
end -- function cancel_mouseover_sb_grOne

function mousedown_sb_grTwo (flags, hotspotid)
 SetVariable("SBtransparent", "false")
 SetVariable("cSelected", "two")
 sidebar_background ()
 settings_menu ()
end -- function mousedown_sb_grTwo

sidebar_bg_prev = "sidebar_bg_prev"
function mouseover_sb_grTwo (flags, hotspotid)
 WindowText (settings_menu_win, font, "2", 372, 300, 0, 0, ColourNameToRGB  "gray")
 WindowCreate (sidebar_bg_prev, settings_men_Lpos + 85, 395, 45, 115, 7, 2, 0x000000)
 if SBbotC ~=nil and SBtopC ~= nil then
  WindowGradient (sidebar_bg_prev, 0, 0, 0, 40,  
                 GetVariable("SBtopC"),
				 GetVariable("SBbotC"),
                 2)
 end -- SBbotC and SBtopC
 if GRthree ~= nil and GRfour ~= nil then
  WindowGradient (sidebar_bg_prev, 0, 60, 0, 0,  
                 GetVariable("GRthree"),
				 GetVariable("GRfour"),
                 2)
 end -- GRthree and GRfour
 WindowShow (sidebar_bg_prev, true)
 sb_prevB ()
end -- function mouseover_sb_grTwo
function cancel_mouseover_sb_grTwo (flags, hotspotid)
 WindowShow (sidebar_bg_prev, false)
 WindowRectOp (sidebar_bg_prev, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
 settings_menu ()
end -- function cancel_mouseover_sb_grTwo

function mousedown_sb_grThree (flags, hotspotid)
 SetVariable("SBtransparent", "false")
 SetVariable("cSelected", "three")
 sidebar_background ()
 settings_menu ()
end -- function mousedown_sb_grThree
sidebar_bgBar_prev = "sidebar_bgBar_prev"
sidebar_bg_prev = "sidebar_bg_prev"
function mouseover_sb_grThree (flags, hotspotid)
 WindowText (settings_menu_win, font, "3", 417, 300, 0, 0, ColourNameToRGB  "gray")
 WindowCreate (sidebar_bg_prev, settings_men_Lpos + 85, 395, 45, 115, 7, 2, 0x000000)
     if SBtopC ~= nil and SBbotC ~= nil then
      WindowGradient (sidebar_bg_prev, 0, 0, 0, 16,  
                 GetVariable("SBtopC"),
				 GetVariable("SBbotC"),
                 2)
     end -- SBtopC and SBbotC
     if GRthree ~= nil and GRfour ~= nil then
      WindowGradient (sidebar_bg_prev, 0, 16, 0, 33,  
                 GetVariable("GRthree"),
				 GetVariable("GRfour"),
                 2)
     end -- GRthree and GRfour
     if GRfive ~= nil and GRsix ~= nil then
      WindowGradient (sidebar_bg_prev, 0, 45, 0, 0,  
                 GetVariable("GRfive"),
				 GetVariable("GRsix"),
                 2)
     end -- GRfive and GRsix
 WindowShow (sidebar_bg_prev, true)
 sb_prevB ()
end -- function mouseover_sb_grThree
function cancel_mouseover_sb_grThree (flags, hotspotid)
 WindowShow (sidebar_bg_prev, false)
 WindowRectOp (sidebar_bg_prev, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
 settings_menu ()
end -- function cancel_mouseover_sb_grThree

function mousedown_sb_grFour (flags, hotspotid)
 SetVariable("SBtransparent", "false")
 SetVariable("cSelected", "four")
 sidebar_background ()
 settings_menu ()
end -- function mousedown_sb_grFour

sidebar_bg_prev = "sidebar_bg_prev"
function mouseover_sb_grFour (flags, hotspotid)
 WindowText (settings_menu_win, font, "4", 462, 300, 0, 0, ColourNameToRGB  "gray")
 WindowCreate (sidebar_bg_prev, settings_men_Lpos + 85, 395, 45, 115, 7, 2, 0x000000)
 if SBtopC ~= nil and SBbotC ~= nil then
  WindowGradient (sidebar_bg_prev, 0, 0, 0, 20,  
                  GetVariable("SBtopC"),
				  GetVariable("SBbotC"),
                  2)
 end -- SBtopC and SBbotC
 if GRthree ~= nil and GRfour ~= nil then
  WindowGradient (sidebar_bg_prev, 0, 20, 0, 33,  
                  GetVariable("GRthree"),
	 			  GetVariable("GRfour"),
                  2)
 end -- GRthree and GRfour
 if GRfive ~= nil and GRsix ~= nil then
  WindowGradient (sidebar_bg_prev, 0, 45, 0, 60,  
                  GetVariable("GRfive"),
	 			  GetVariable("GRsix"),
                  2)
 end -- GRfive and GRsix
 if GRseven ~= nil and GReight ~= nil then
  WindowGradient (sidebar_bg_prev, 0, 60, 0, 0,  
                  GetVariable("GRseven"),
   	   			  GetVariable("GReight"),
                  2)
 end -- GRseven and GReight
 WindowShow (sidebar_bg_prev, true)
 sb_prevB ()
end -- function mouseover_sb_grFour
function cancel_mouseover_sb_grFour (flags, hotspotid)
 WindowShow (sidebar_bg_prev, false)
 WindowRectOp (sidebar_bg_prev, 2, 0, 0, 0, 0, ColourNameToRGB("black"))
 settings_menu ()
end -- function cancel_mouseover_sb_grFour

----/  Gradient Colors  /----
function mousedown_sb_grCa (flags, hotspotid)
 SBtopC = getColour(SBtopC)
 SetVariable("SBtopC", SBtopC)
 sidebar_background ()
 settings_menu ()
end -- function mousedown_sb_grCa
function mouseover_sb_grCa (flags, hotspotid)
 if SBtopC ~= nil then
  WindowCircleOp (settings_menu_win, 4, 245, 350, 260, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, SBtopC, 0, 0, 0, 0)
 else
  WindowCircleOp (settings_menu_win, 4, 245, 350, 260, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
 end -- SBtopC
 Redraw()
end -- function mouseover_sb_grCa
function cancel_mouseover_sb_grCa (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_sb_grCa

function mousedown_sb_grCb (flags, hotspotid)
 SBbotC = getColour(SBbotC)
 SetVariable("SBbotC", SBbotC)
 sidebar_background ()
 settings_menu ()
end -- function mousedown_sb_grCb
function mouseover_sb_grCb (flags, hotspotid)
 if SBbotC ~= nil then
  WindowCircleOp (settings_menu_win, 4, 265, 350, 280, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, SBbotC, 0, 0, 0, 0)
 else
  WindowCircleOp (settings_menu_win, 4, 265, 350, 280, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
 end -- SBbotC
 Redraw()
end -- function mouseover_sb_grCb
function cancel_mouseover_sb_grCb (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_sb_grCb

function mousedown_sb_grCc (flags, hotspotid)
 GRthree = getColour(GRthree)
 SetVariable("GRthree", GRthree)
 sidebar_background ()
 settings_menu ()
end -- function mousedown_sb_grCc
function mouseover_sb_grCc (flags, hotspotid)
 if GRthree ~= nil then
  WindowCircleOp (settings_menu_win, 4, 315, 350, 330, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, GRthree, 0, 0, 0, 0)
 else
  WindowCircleOp (settings_menu_win, 4, 315, 350, 330, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
 end -- GRthree
 Redraw()
end -- function mouseover_sb_grCc
function cancel_mouseover_sb_grCc (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_sb_grCc

function mousedown_sb_grCd (flags, hotspotid)
 GRfour = getColour(GRfour)
 SetVariable("GRfour", GRfour)
 sidebar_background ()
 settings_menu ()
end -- function mousedown_sb_grCd
function mouseover_sb_grCd (flags, hotspotid)
 if GRfour ~= nil then
  WindowCircleOp (settings_menu_win, 4, 335, 350, 350, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, GRfour, 0, 0, 0, 0)	
 else
  WindowCircleOp (settings_menu_win, 4, 335, 350, 350, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)	
 end -- GRfour
 Redraw()
end -- function mouseover_sb_grCd
function cancel_mouseover_sb_grCd (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_sb_grCd

function mousedown_sb_grCe (flags, hotspotid)
 GRfive = getColour(GRfive)
 SetVariable("GRfive", GRfive)
 sidebar_background ()
 settings_menu ()
end -- function mousedown_sb_grCe
function mouseover_sb_grCe (flags, hotspotid)
 if GRfive ~= nil then
  WindowCircleOp (settings_menu_win, 4, 385, 350, 400, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, GRfive, 0, 0, 0, 0)	
 else
  WindowCircleOp (settings_menu_win, 4, 385, 350, 400, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)	
 end -- GRfive
 Redraw()
end -- function mouseover_sb_grCe
function cancel_mouseover_sb_grCe (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_sb_grCe

function mousedown_sb_grCf (flags, hotspotid)
 GRsix = getColour(GRsix)
 SetVariable("GRsix", GRsix)
 sidebar_background ()
 settings_menu ()
end -- function mousedown_sb_grCf
function mouseover_sb_grCf (flags, hotspotid)
 if GRsix ~= nil then
  WindowCircleOp (settings_menu_win, 4, 405, 350, 420, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, GRsix, 0, 0, 0, 0)	
 else
  WindowCircleOp (settings_menu_win, 4, 405, 350, 420, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)	
 end -- GRsix
 Redraw()
end -- function mouseover_sb_grCf
function cancel_mouseover_sb_grCf (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_sb_grCf

function mousedown_sb_grCg (flags, hotspotid)
 GRseven = getColour(GRseven)
 SetVariable("GRseven", GRseven)
 sidebar_background ()
 settings_menu ()
end -- function mousedown_sb_grCg
function mouseover_sb_grCg (flags, hotspotid)
 if GRseven ~= nil then
  WindowCircleOp (settings_menu_win, 4, 455, 350, 470, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, GRseven, 0, 0, 0, 0)
 else
  WindowCircleOp (settings_menu_win, 4, 455, 350, 470, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
 end -- GRseven	 
 Redraw()
end -- function mouseover_sb_grCg
function cancel_mouseover_sb_grCg (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_sb_grCg

function mousedown_sb_grCh (flags, hotspotid)
 GReight = getColour(GReight)
 SetVariable("GReight", GReight)
 sidebar_background ()
 settings_menu ()
end -- function mousedown_sb_grCh
function mouseover_sb_grCh (flags, hotspotid)
 if GReight ~= nil then
  WindowCircleOp (settings_menu_win, 4, 475, 350, 490, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, GReight, 0, 0, 0, 0)	
 else
  WindowCircleOp (settings_menu_win, 4, 475, 350, 490, 365,  -- round rectangle
     ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)	
 end -- GReight
 Redraw()
end -- function mouseover_sb_grCh
function cancel_mouseover_sb_grCh (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_sb_grCh

----/  Sidebar Background Border Colors  /----
function mousedown_sb_brCa (flags, hotspotid)
 -- sidebar background bar color
  SBbarC = getColour(SBbarC)
  SetVariable("SBbarC", SBbarC)
  sidebar_background ()
  build_chatLine ()
  build_promptLine ()
 settings_menu ()
end -- function mousedown_sb_brCa
function mouseover_sb_brCa (flags, hotspotid)
if SBbarC ~= nil then
 WindowCircleOp (settings_menu_win, 4, 385, 380, 400, 395,  -- round rectangle
           ColourNameToRGB("red"), 0, 2, SBbarC, 0, 0, 0, 0)
else
 WindowCircleOp (settings_menu_win, 4, 385, 380, 400, 395,  -- round rectangle
           ColourNameToRGB("red"), 0, 2, ColourNameToRGB("lime"), 0, 0, 0, 0)
end -- SBbarC
 Redraw()
end -- function mouseover_sb_brCa
function cancel_mouseover_sb_brCa (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_sb_brCa

function mousedown_sb_brCb (flags, hotspotid)
 -- sidebar background bar color
  SBbarCe = getColour(SBbarCe)
  SetVariable("SBbarCe", SBbarCe)
  sidebar_background ()
 settings_menu ()
end -- function mousedown_sb_brCb
function mouseover_sb_brCb (flags, hotspotid)
if SBbarCe ~= nil then
 WindowCircleOp (settings_menu_win, 4, 405, 380, 420, 395,  -- round rectangle
          ColourNameToRGB("red"), 0, 2, SBbarCe, 0, 0, 0, 0)
else
 WindowCircleOp (settings_menu_win, 4, 405, 380, 420, 395,  -- round rectangle
          ColourNameToRGB("red"), 0, 2, ColourNameToRGB("black"), 0, 0, 0, 0)
end -- SBbarCe
 Redraw()
end -- function mouseover_sb_brCb
function cancel_mouseover_sb_brCb (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_sb_brCb

----/  Prompt Bar Settings Mouseovers /----
function mousedown_prompt_set (flags, hotspotid)
 if GetVariable("PB_SET") == "true" then
  PB_SET = true
 else
  PB_SET = false
 end -- PB_SET
 PB_SET = not PB_SET
 if PB_SET == true then
  SetVariable("prompt_checked", "default")
  DeleteVariable("prompt_checked_custom")
  DeleteVariable("health_color")
  DeleteVariable("health_colorB")
  DeleteVariable("mana_color")
  DeleteVariable("mana_colorB")
  DeleteVariable("move_color")
  DeleteVariable("move_colorB")
  DeleteVariable("enemy_color")
  DeleteVariable("enemy_colorB")
  DeleteVariable("bar_text_color")
  SetVariable("custom_bar_color_highlight_top", ColourNameToRGB("#000000"))
  SetVariable("custom_bar_color_highlight_bottom", ColourNameToRGB("#000000"))
 end -- PB_SET
 draw_energy_bars ()
 settings_menu ()
end -- function mousedown_prompt_set
function mouseover_prompt_set (flags, hotspotid)
 WindowText (settings_menu_win, font, "Default colors:", 245, 270, 0, 0, ColourNameToRGB  "darkgray")
 Redraw()
end -- function mouseover_prompt_set
function cancel_mouseover_prompt_set (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_prompt_set

-- ADD FUNCTIONALITY SOMETIME TO PROMPT MOUSEOVERS BELOW
function mousedown_prompt_ft (flags, hotspotid)
  SetVariable("prompt_checked", "blahblah")
  bar_text_color = getColour(bar_text_color)
  SetVariable("bar_text_color", bar_text_color)
  draw_energy_bars ()
 settings_menu ()
end -- function mousedown_prompt_ft
function mouseover_prompt_ft (flags, hotspotid)
 if bar_text_color ~= nil then
  WindowCircleOp (settings_menu_win, 4, 325, 300, 340, 315,  -- round rectangle
          ColourNameToRGB("red"), 0, 2, bar_text_color, 0, 0, 0, 0)
 else
  WindowCircleOp (settings_menu_win, 4, 325, 300, 340, 315,  -- round rectangle
          ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
 end -- bar_text_color
 Redraw()
end -- function mouseover_prompt_ft
function cancel_mouseover_prompt_ft (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_prompt_ft

-- Top edge color
function mousedown_prompt_edgO (flags, hotspotid)
  SetVariable("prompt_checked", "customTop")
  customBar_top_color = getColour(customBar_top_color)
  SetVariable("custom_bar_color_highlight_top", customBar_top_color)
  draw_energy_bars ()
 settings_menu ()
end -- function mousedown_prompt_edgO
function mouseover_prompt_edgO (flags, hotspotid)
 if custom_bar_color_highlight_top ~= nil then
  WindowCircleOp (settings_menu_win, 4, 465, 300, 480, 315,  -- round rectangle
          ColourNameToRGB("red"), 0, 2, custom_bar_color_highlight_top, 0, 0, 0, 0)
 else
  WindowCircleOp (settings_menu_win, 4, 465, 300, 480, 315,  -- round rectangle
          ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
 end -- custom_bar_color_highlight_top
 Redraw()
end -- function mouseover_prompt_edgO
function cancel_mouseover_prompt_edgO (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_prompt_edgO

-- Bottom edge color
function mousedown_prompt_edgT (flags, hotspotid)
  SetVariable("prompt_checked_custom", "customBottom")
  if GetVariable("prompt_checked") ~= "customTop" then
   SetVariable("prompt_checked", "blahblah")
  end -- quick fix so I dont have to rewrite code cause im lazy lol
  customBar_bottom_color = getColour(customBar_bottom_color)
  SetVariable("custom_bar_color_highlight_bottom", customBar_bottom_color)
  draw_energy_bars ()	
 settings_menu ()
end -- function mousedown_prompt_edgT
function mouseover_prompt_edgT (flags, hotspotid)
 if custom_bar_color_highlight_bottom ~= nil then
  WindowCircleOp (settings_menu_win, 4, 485, 300, 500, 315,  -- round rectangle
          ColourNameToRGB("red"), 0, 2, custom_bar_color_highlight_bottom, 0, 0, 0, 0)
 else
  WindowCircleOp (settings_menu_win, 4, 485, 300, 500, 315,  -- round rectangle
          ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
 end -- custom_bar_color_highlight_bottom
 Redraw()
end -- function mouseover_prompt_edgT
function cancel_mouseover_prompt_edgT (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_prompt_edgT

-- Enemy bar full
function mousedown_prompt_EbarF (flags, hotspotid)
  SetVariable("prompt_checked", "blahblah")
  enemy_color = getColour(enemy_color)
  SetVariable("enemy_color", enemy_color)
  draw_energy_bars ()
 settings_menu ()
end -- function mousedown_prompt_EbarF
function mouseover_prompt_EbarF (flags, hotspotid)
 if enemy_color ~= nil then
  WindowCircleOp (settings_menu_win, 4, 350, 370, 365, 385,  -- round rectangle
          ColourNameToRGB("red"), 0, 2, enemy_color, 0, 0, 0, 0)
 else
  WindowCircleOp (settings_menu_win, 4, 350, 370, 365, 385,  -- round rectangle
          ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
 end -- enemy_color
 Redraw()
end -- function mouseover_prompt_EbarF
function cancel_mouseover_prompt_EbarF (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_prompt_EbarF

-- Enemy bar empty
function mousedown_prompt_EbarE (flags, hotspotid)
  SetVariable("prompt_checked", "blahblah")
  enemy_colorB = getColour(enemy_colorB)
  SetVariable("enemy_colorB", enemy_colorB)
  draw_energy_bars ()
 settings_menu ()
end -- function mousedown_prompt_EbarE
function mouseover_prompt_EbarE (flags, hotspotid)
 if enemy_colorB ~= nil then
   WindowCircleOp (settings_menu_win, 4, 395, 370, 410, 385,  -- round rectangle
         ColourNameToRGB("red"), 0, 2, enemy_colorB, 0, 0, 0, 0)
 else
  WindowCircleOp (settings_menu_win, 4, 395, 370, 410, 385,  -- round rectangle
         ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
 end -- enemy_colorB
 Redraw()
end -- function mouseover_prompt_EbarE
function cancel_mouseover_prompt_EbarE (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_prompt_EbarE

-- Health bar full
function mousedown_prompt_HbarF (flags, hotspotid)
  SetVariable("prompt_checked", "blahblah")
  health_color = getColour(health_color)
  SetVariable("health_color", health_color)
  draw_energy_bars ()
 settings_menu ()
end -- function mousedown_prompt_HbarF
function mouseover_prompt_HbarF (flags, hotspotid)
 if health_color ~= nil then
  WindowCircleOp (settings_menu_win, 4, 350, 385, 365, 400,  -- round rectangle
         ColourNameToRGB("red"), 0, 2, health_color, 0, 0, 0, 0)
 else
  WindowCircleOp (settings_menu_win, 4, 350, 385, 365, 400,  -- round rectangle
         ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
 end -- health_color
 Redraw()
end -- function mouseover_prompt_HbarF
function cancel_mouseover_prompt_HbarF (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_prompt_HbarF

-- Health bar empty
function mousedown_prompt_HbarE (flags, hotspotid)
  SetVariable("prompt_checked", "blahblah")
  health_colorB = getColour(health_colorB)
  SetVariable("health_colorB", health_colorB)
  draw_energy_bars ()
 settings_menu ()
end -- function mousedown_prompt_HbarE
function mouseover_prompt_HbarE (flags, hotspotid)
 if health_colorB ~= nil then
  WindowCircleOp (settings_menu_win, 4, 395, 385, 410, 400,  -- round rectangle
         ColourNameToRGB("red"), 0, 2, health_colorB, 0, 0, 0, 0)
 else
  WindowCircleOp (settings_menu_win, 4, 395, 385, 410, 400,  -- round rectangle
         ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
 end -- health_colorB
 Redraw()
end -- function mouseover_prompt_HbarE
function cancel_mouseover_prompt_HbarE (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_prompt_HbarE

-- Mana bar full
function mousedown_prompt_MbarF (flags, hotspotid)
  SetVariable("prompt_checked", "blahblah")
  mana_color = getColour(mana_color)
  SetVariable("mana_color", mana_color)
  draw_energy_bars ()
 settings_menu ()
end -- function mousedown_prompt_MbarF
function mouseover_prompt_MbarF (flags, hotspotid)
 if mana_color ~= nil then
   WindowCircleOp (settings_menu_win, 4, 350, 400, 365, 415,  -- round rectangle
          ColourNameToRGB("red"), 0, 2, mana_color, 0, 0, 0, 0) 
 else
  WindowCircleOp (settings_menu_win, 4, 350, 400, 365, 415,  -- round rectangle
          ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0) 
 end -- mana_color
 Redraw()
end -- function mouseover_prompt_MbarF
function cancel_mouseover_prompt_MbarF (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_prompt_MbarF

-- Mana bar empty
function mousedown_prompt_MbarE (flags, hotspotid)
  SetVariable("prompt_checked", "blahblah")
  mana_colorB = getColour(mana_colorB)
  SetVariable("mana_colorB", mana_colorB)
  draw_energy_bars ()
 settings_menu ()
end -- function mousedown_prompt_MbarE
function mouseover_prompt_MbarE (flags, hotspotid)
 if mana_colorB ~= nil then
  WindowCircleOp (settings_menu_win, 4, 395, 400, 410, 415,  -- round rectangle
            ColourNameToRGB("red"), 0, 2, mana_colorB, 0, 0, 0, 0)
 else
  WindowCircleOp (settings_menu_win, 4, 395, 400, 410, 415,  -- round rectangle
            ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
 end -- mana_colorB
 Redraw()
end -- function mouseover_prompt_MbarE
function cancel_mouseover_prompt_MbarE (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_prompt_MbarE

-- Movement bar full
function mousedown_prompt_movebarF (flags, hotspotid)
  SetVariable("prompt_checked", "blahblah")
  move_color = getColour(move_color)
  SetVariable("move_color", move_color)
  draw_energy_bars ()
 settings_menu ()
end -- function mousedown_prompt_movebarF
function mouseover_prompt_movebarF (flags, hotspotid)
 if move_color ~= nil then
   WindowCircleOp (settings_menu_win, 4, 350, 415, 365, 430,  -- round rectangle
           ColourNameToRGB("red"), 0, 2, move_color, 0, 0, 0, 0) 
 else
  WindowCircleOp (settings_menu_win, 4, 350, 415, 365, 430,  -- round rectangle
           ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0) 
 end -- move_color
 Redraw()
end -- function mouseover_prompt_movebarF
function cancel_mouseover_prompt_movebarF (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_prompt_movebarF

-- Movement bar empty
function mousedown_prompt_movebarE (flags, hotspotid)
  SetVariable("prompt_checked", "blahblah")
  move_colorB = getColour(move_colorB)
  SetVariable("move_colorB", move_colorB)
  draw_energy_bars ()
 settings_menu ()
end -- function mousedown_prompt_movebarE
function mouseover_prompt_movebarE (flags, hotspotid)
 if move_colorB ~= nil then
   WindowCircleOp (settings_menu_win, 4, 395, 415, 410, 430,  -- round rectangle
           ColourNameToRGB("red"), 0, 2, move_colorB, 0, 0, 0, 0)
 else
  WindowCircleOp (settings_menu_win, 4, 395, 415, 410, 430,  -- round rectangle
           ColourNameToRGB("red"), 0, 2, ColourNameToRGB("dodgerblue"), 0, 0, 0, 0)
 end -- move_colorB
 Redraw()
end -- function mouseover_prompt_movebarE
function cancel_mouseover_prompt_movebarE (flags, hotspotid)
 settings_menu ()
end -- function cancel_mouseover_prompt_movebarE

----/  Star Logger Control mouseovers  /----
function mousedown_starL (flags, hotspotid)
  if GetVariable("starLog_isRec") == nil then
   starLog_isRec = false
   SetVariable("starLog_isRec", "false")
  end -- starLog_isRec  
  starLog_isRec = not starLog_isRec  
  if starLog_isRec then
   SetVariable("starLog_isRec", "true")
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Activated")
   if GetVariable("starLog_recPrev") == "true" then
    starLog_prev ()
   end -- starLog_recPrev  
   EnableTrigger("starlogger", true)
  else
   EnableTrigger("starlogger", false)
   ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "red", "", "Deactivated")
   if GetVariable("starlog_folder") ~= nil then
    if GetVariable("starLog_fnTs") ~= nil then
     SaveNotepad ("Star_Log_Test", GetVariable("starlog_folder") .. "\\" .. os.date(GetVariable("starLog_fnTs")) .. ".txt")
     CloseNotepad ("Star_Log_Test", 0)
     ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Log file saved to ", "red", "", GetVariable("starlog_folder") .. "\\" .. os.date(GetVariable("starLog_fnTs")) .. ".txt")	 
    else
     SaveNotepad ("Star_Log_Test", GetVariable("starlog_folder") .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
     CloseNotepad ("Star_Log_Test", 0)
     ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "silver", "", "Filename has not been set, saving file with default format name.")
     ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Log file saved to ", "red", "", GetVariable("starlog_folder") .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
    end -- starlog_folder
   else
    SaveNotepad ("Star_Log_Test", GetInfo (58) .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
    CloseNotepad ("Star_Log_Test", 0)
    ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "silver", "", "Folder and Filename has not been set, saving file at default location with default name.")
    ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "green", "", "Log file saved to ", "red", "", GetInfo (58) .. "\\" .. os.date("%b %d %Y [%I_%M_%S%p]") .. ".txt")
   end -- starlog_folder
   SetVariable("starLog_isRec", "false")
  end -- starLog_isRec
end -- function mousedown_starL
function mouseover_starL (flags, hotspotid)
  if GetVariable("starLog_isRec") == nil then
   starLog_isRec = false
   SetVariable("starLog_isRec", "false")
  end -- starLog_isRec  
  if starLog_isRec then
   WindowCircleOp (sidebar_bg, 4, 63, 222, 80, 239,  -- round rectangle
          ColourNameToRGB("red"), 0, 2, ColourNameToRGB("lime"), 0, 0, 0, 0)
  else
   WindowCircleOp (sidebar_bg, 4, 63, 222, 80, 239,  -- round rectangle
          ColourNameToRGB("lime"), 0, 2, ColourNameToRGB("red"), 0, 0, 0, 0)
  end -- starLog_isRec
 Redraw()
end -- function mouseover_starL
function cancel_mouseover_starL (flags, hotspotid)
 sidebar_background ()
end -- function cancel_mouseover_starL

function mousedown_starL_ali (flags, hotspotid)
  WindowRectOp(sidebar_bg, miniwin.rect_draw_edge, 100, 225, 140, 239, 
    miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
 Redraw()
 DoAfterSpecial (0.1, 'DrawThemed3DRect(sidebar_bg, 100, 225, 140, 239)', sendto.script)
 DoAfterSpecial (0.1, 'outlined_text (colourWhite, sidebar_bg, "Aliases", 5, 104, 227, 0)', sendto.script)
 DoAfterSpecial (0.1, 'Redraw()', sendto.script)
 ColourNote ("yellow", "", "St", "goldenrod", "", "ar ", "silver", "", "Logger: ", "dodgerblue", "", "ALIASES")
 ColourNote ("red", "", "star logger rec ", "silver", "", "- start/stop logging")
 ColourNote ("red", "", "star logger set folder ", "silver", "", "- specify a folder to place the logs in")
 ColourNote ("red", "", "star logger set filename ", "silver", "", "- set a custom file name for logs")
 ColourNote ("red", "", "star logger prev lines ", "silver", "", "- toggle logging all previous lines")
 ColourNote ("red", "", "star logger open folder ", "silver", "", "- opens your current/default logs folder")
 ColourNote ("silver", "", "For more options, see the settings menu")
end -- function mousedown_starL_ali
function mouseover_starL_ali (flags, hotspotid)
end -- function mouseover_starL_ali
function cancel_mouseover_starL_ali (flags, hotspotid)
 sidebar_background ()
end -- function cancel_mouseover_starL_ali

----/  Mouseover check update button  /----
function mousedown_upC (flags, hotspotid)
 WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 369, 295, 420, 310, 
    miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
 WindowText (settings_menu_win, infofont, "Check..", 376, 295, 0, 0, colourTFC)
 WindowText (settings_menu_win, font, "Connecting to the server..", 299, 345, 0, 0, ColourNameToRGB  "white")
 Redraw()
end -- function mousedown_upC
function mouseup_upC (flags, hotspotid)
 SetVariable("plugin_updating", "check")
 update_plugin()
end -- function mouseup_upC
function mouseover_upC (flags, hotspotid)
end -- function mouseover_upC
function cancel_mouseover_upC (flags, hotspotid)
end -- function cancel_mouseover_upC

function mousedown_upB (flags, hotspotid)
  WindowRectOp(settings_menu_win, miniwin.rect_draw_edge, 369, 375, 420, 390, 
    miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all)
  WindowText (settings_menu_win, infofont, "Update", 376, 375, 0, 0, colourTFC)
  Redraw()
end -- function mousedown_upB
function mouseup_upB (flags, hotspotid)
  SetVariable("plugin_updating", "true")
  local file = io.open(GetPluginInfo(GetPluginID(), 6), "w")
  file:write(GetVariable("lat_page"))
  file:close()
  raw_version = nil
 if "" == GetAlphaOption("script_prefix") then
  SetAlphaOption("script_prefix", "\\\\\\")
 end
 if GetVariable("plugin_updating") == "true" then
  Execute(GetAlphaOption("script_prefix") .. "DoAfterSpecial(1, \"ReloadPlugin('" .. GetPluginID() .. "')\", sendto.script)")
  WindowText (settings_menu_win, font, "Plugin Updated! Reload world please.", 239, 345, 0, 0, ColourNameToRGB  "white")
  Redraw()
  SetVariable("plugin_updating", "false")
 end 
end -- function mouseup_upB
function mouseover_upC (flags, hotspotid)

end -- function mouseover_upB
function cancel_mouseover_upB (flags, hotspotid)

end -- function cancel_mouseover_upB

function mouseover_hyperlink (flags, hotspotid)
  drawText (links [tonumber (hotspotid)], "blue")
  page = (links [tonumber (hotspotid)].page)
  if page == "avatar_set" then
   WindowText (settings_menu_win, font, "Avatar Settings", 340, 150, 0, 0, ColourNameToRGB  "white")
   WindowLine (settings_menu_win, 250, 168, 540, 168, colourWhite, miniwin.pen_solid, 1)
   WindowText (settings_menu_win, infofont, "Select your own custom avatar!", 318, 175, 0, 0, ColourNameToRGB  "white")
  elseif page == "background_set" then
   WindowText (settings_menu_win, font, "Background Settings", 325, 150, 0, 0, ColourNameToRGB  "white")
   WindowLine (settings_menu_win, 250, 168, 540, 168, colourWhite, miniwin.pen_solid, 1)
   WindowText (settings_menu_win, infofont, "Select a custom background image or color.", 290, 175, 0, 0, ColourNameToRGB  "white")  
  elseif page == "sidebar_set" then
   WindowText (settings_menu_win, font, "Sidebar Background Settings", 300, 150, 0, 0, ColourNameToRGB  "white")
   WindowLine (settings_menu_win, 250, 168, 540, 168, colourWhite, miniwin.pen_solid, 1)
   WindowText (settings_menu_win, infofont, "Select the border colors for the menu sidebar.", 290, 175, 0, 0, ColourNameToRGB  "white")  
  elseif page == "promptbar_set" then
   WindowText (settings_menu_win, font, "Prompt Bars Settings", 320, 150, 0, 0, ColourNameToRGB  "white")
   WindowLine (settings_menu_win, 250, 168, 540, 168, colourWhite, miniwin.pen_solid, 1)
   WindowText (settings_menu_win, infofont, "Customize the prompt bar colors.", 315, 175, 0, 0, ColourNameToRGB  "white")  
  elseif page == "compass_set" then
   WindowText (settings_menu_win, font, "Compass Settings", 330, 150, 0, 0, ColourNameToRGB  "white")
   WindowLine (settings_menu_win, 250, 168, 540, 168, colourWhite, miniwin.pen_solid, 1)
   WindowText (settings_menu_win, infofont, "Customize the compass colors.", 318, 175, 0, 0, ColourNameToRGB  "white") 
  elseif page == "starlogger_set" then
   WindowText (settings_menu_win, font, "Star Logger Settings", 315, 150, 0, 0, ColourNameToRGB  "white")
   WindowLine (settings_menu_win, 250, 168, 540, 168, colourWhite, miniwin.pen_solid, 1)
   WindowText (settings_menu_win, infofont, "Remove your prompt from logs.", 314, 175, 0, 0, ColourNameToRGB  "white") 
   WindowText (settings_menu_win, infofont, "Log all previous lines before recording.", 300, 190, 0, 0, ColourNameToRGB  "white") 
   WindowText (settings_menu_win, infofont, "Select custom log file names.", 319, 205, 0, 0, ColourNameToRGB  "white") 
   WindowText (settings_menu_win, infofont, "Add date and time stamps.", 325, 220, 0, 0, ColourNameToRGB  "white") 
  elseif page == "reportissue_set" then
   WindowText (settings_menu_win, font, "Report an Issue", 337, 150, 0, 0, ColourNameToRGB  "white")
   WindowLine (settings_menu_win, 250, 168, 540, 168, colourWhite, miniwin.pen_solid, 1)
   WindowText (settings_menu_win, infofont, "Report any problems with the plugin.", 312, 175, 0, 0, ColourNameToRGB  "white")   
  elseif page == "pluginupdate_set" then
   WindowText (settings_menu_win, font, "Check and Update Plugin", 305, 150, 0, 0, ColourNameToRGB  "white")
   WindowLine (settings_menu_win, 250, 168, 540, 168, colourWhite, miniwin.pen_solid, 1)
   WindowText (settings_menu_win, infofont, "Check to see if a new version is available.", 290, 175, 0, 0, ColourNameToRGB  "white")   
  end -- page
end -- mouseover_hyperlink

function cancel_mouseover_hyperlink (flags, hotspotid)
  settings_menu ()
end -- cancel_mouseover_hyperlink

function mousedown_hyperlink (flags, hotspotid)
  pageset = (links [tonumber (hotspotid)].page)
   settings_menu ()
end -- mousedown_hyperlink

function cancel_mousedown_hyperlink (flags, hotspotid)
  drawText (links [tonumber (hotspotid)], "dimgray")
end -- cancel_mousedown_hyperlink

function MakeHyperlink (item, which)
  -- remember current x and y in the links table
  which.x = x
  which.y = y
  width = drawText (which, "white")
  WindowAddHotspot (settings_menu_win, item, which.x, which.y, which.x + width, which.y + font_height, 
                    "mouseover_hyperlink", -- MouseOver 
                    "cancel_mouseover_hyperlink", -- CancelMouseOver 
                    "mousedown_hyperlink", -- MouseDown 
                    "cancel_mousedown_hyperlink", -- CancelMouseDown 
                    "mouseup_hyperlink", -- MouseUp 
                    which.tip, 
                    miniwin.cursor_hand,
                    0) --  Flag
  y = y + font_height
end -- MakeHyperlink

function mouseup_close (flags, hotspotid)
  WindowText (settings_menu_win, font, "[X]", 573, 20, 0, 0, ColourNameToRGB  "gray")
  close_settings ()
end -- mouseup_close

function mouseover_close (flags, hotspotid)
  WindowText (settings_menu_win, font, "[X]", 573, 20, 0, 0, ColourNameToRGB  "green")
  Redraw ()
end -- mouseover_close

function cancel_mouseover_close (flags, hotspotid)
  WindowText (settings_menu_win, font, "[X]", 573, 20, 0, 0, ColourNameToRGB  "red")
  Redraw ()
end -- cancel_mouseover_close

function mousedown_close (flags, hotspotid)
  WindowText (settings_menu_win, font, "[X]", 573, 20, 0, 0, ColourNameToRGB  "gray")
  Redraw ()
end -- mouseover_close

function cancel_mousedown_close (flags, hotspotid)
  WindowText (settings_menu_win, font, "[X]", 573, 20, 0, 0, ColourNameToRGB  "red")
  Redraw ()
end -- cancel_mouseover_close

function close_settings ()
 SetVariable("plugin_updating", "false")
 if pageset == "sidebar_set" then
  if sidebar_bgBar_prev ~= nil then
   WindowShow (sidebar_bgBar_prev, false)
   WindowShow (sidebar_bg_prev, false)
  else
   WindowShow ("sidebar_bgBar_prev", false)
   WindowShow ("sidebar_bg_prev", false)
  end -- sidebar_bg_prev
 end -- pageset
 WindowShow (settings_menu_win, false)
end -- function close_settings

function msdp_test ()
REPORT = msdp["REPORT"]
CHARACTER_NAME = msdp["CHARACTER_NAME"]
SERVER_ID = msdp["SERVER_ID"]
SERVER_TIME = msdp["SERVER_TIME"]
SNIPPET_VERSION = msdp["SNIPPET_VERSION"]
AFFECTS = msdp["AFFECTS"]
ALIGNMENT = msdp["ALIGNMENT"]
EXPERIENCE = msdp["EXPERIENCE"]
EXPERIENCE_TNL = msdp["EXPERIENCE_TNL"]
HEALTH = msdp["HEALTH"]
HEALTH_MAX = msdp["HEALTH_MAX"]
LEVEL = msdp["LEVEL"]
RACE = msdp["RACE"]
CLASS = msdp["CLASS"]
CLASS2 = msdp["CLASS2"]
CLASS3 = msdp["CLASS3"]
MANA = msdp["MANA"]
MANA_MAX = msdp["MANA_MAX"]
WIMPY = msdp["WIMPY"]
PRACTICE = msdp["PRACTICE"]
MONEY = msdp["MONEY"]
MOVEMENT = msdp["MOVEMENT"]
MOVEMENT_MAX = msdp["MOVEMENT_MAX"]
OPPONENT_HEALTH = msdp["OPPONENT_HEALTH"]
OPPONENT_HEALTH_MAX = msdp["OPPONENT_HEALTH_MAX"]
OPPONENT_LEVEL = msdp["OPPONENT_LEVEL"]
OPPONENT_NAME = msdp["OPPONENT_NAME"]
AREA_NAME = msdp["AREA_NAME"]
ROOM_EXITS = msdp["ROOM_EXITS"]
ROOM_NAME = msdp["ROOM_NAME"]
ROOM_VNUM = msdp["ROOM_VNUM"]
WORLD_TIME = msdp["WORLD_TIME"]
print("CHARACTER_NAME:", CHARACTER_NAME)
print("SERVER_ID:", SERVER_ID)
print("SERVER_TIME:", SERVER_TIME)
print("SNIPPET_VERSION:", SNIPPET_VERSION)
print("AFFECTS:", AFFECTS)
print("ALIGNMENT:", ALIGNMENT)
print("EXPERIENCE:", EXPERIENCE)
print("EXPERIENCE_TNL:", EXPERIENCE_TNL)
print("HEALTH:", HEALTH)
print("HEALTH_MAX:", HEALTH_MAX)
print("LEVEL:", LEVEL)
print("RACE:", RACE)
print("CLASS:", CLASS)
print("CLASS2:", CLASS2)
print("CLASS3:", CLASS3)
print("MANA:", MANA)
print("MANA_MAX:", MANA_MAX)
print("WIMPY:", WIMPY)
print("PRACTICE:", PRACTICE)
print("MONEY:", MONEY)
print("MOVEMENT:", MOVEMENT)
print("MOVEMENT_MAX:", MOVEMENT_MAX)
print("AREA_NAME:", AREA_NAME)
print("ROOM_EXITS:", ROOM_EXITS)
print("ROOM_NAME:", ROOM_NAME)
print("ROOM_VNUM:", ROOM_VNUM)
print("WORLD_TIME:", WORLD_TIME)
print(REPORT)
end -- function msdp_test
]]>
</script>
</muclient>